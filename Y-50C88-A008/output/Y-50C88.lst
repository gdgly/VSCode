

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Oct 11 10:27:18 2019

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	89F23X5
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	_Fc_ID_2_text,global,class=CODE,delta=2
     7                           	psect	_Fc_ID_1_text,global,class=CODE,delta=2
     8                           	psect	_Fc_ID_8_text,global,class=CODE,delta=2
     9                           	psect	_Fc_ID_7_text,global,class=CODE,delta=2
    10                           	psect	_Fc_ID_6_text,global,class=CODE,delta=2
    11                           	psect	_Fc_ID_5_text,global,class=CODE,delta=2
    12                           	psect	_Fc_ID_4_text,global,class=CODE,delta=2
    13                           	psect	_Fc_ID_3_text,global,class=CODE,delta=2
    14                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,split=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text30,local,class=CODE,merge=1,delta=2
    29                           	psect	text38,local,class=CODE,merge=1,delta=2
    30                           	psect	text40,local,class=CODE,merge=1,delta=2
    31                           	psect	text47,local,class=CODE,merge=1,delta=2
    32                           	psect	text49,local,class=CODE,merge=1,delta=2
    33                           	psect	text51,local,class=CODE,merge=1,delta=2
    34                           	psect	text58,local,class=CODE,merge=1,delta=2
    35                           	psect	text65,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	pa_nodes0,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataBANK0
    76  0000                     __pidataBANK0:	
    77                           
    78                           	psect	stringtext
    79  1800                     __pstringtext:	
    80  1800                     stringtab:	
    81  1800                     __stringtab:	
    82                           
    83                           ;	String table - string pointers are 2 bytes each
    84  1800  1BFF               	btfsc	btemp+1,7
    85  1801  280A               	ljmp	stringcode
    86  1802  1383               	bcf	3,7
    87  1803  187F               	btfsc	btemp+1,0
    88  1804  1783               	bsf	3,7
    89  1805  0800               	movf	0,w
    90  1806  0A84               	incf	4,f
    91  1807  1903               	skipnz
    92  1808  0AFF               	incf	btemp+1,f
    93  1809  0008               	return
    94  180A                     stringcode:	
    95  180A  087F               	movf	btemp+1,w
    96  180B  397F               	andlw	127
    97  180C  008A               	movwf	10
    98  180D  0804               	movf	4,w
    99  180E  0A84               	incf	4,f
   100  180F  1903               	skipnz
   101  1810  0AFF               	incf	btemp+1,f
   102  1811  0082               	movwf	2
   103  1812                     __stringbase:	
   104  1812                     __end_of__stringtab:	
   105  1812                     _REF_TEMP_TAB:	
   106  1812  3400               	retlw	0
   107  1813  3400               	retlw	0
   108  1814  3400               	retlw	0
   109  1815  3400               	retlw	0
   110  1816  3400               	retlw	0
   111  1817  3400               	retlw	0
   112  1818  3400               	retlw	0
   113  1819  3400               	retlw	0
   114  181A  3401               	retlw	1
   115  181B  3403               	retlw	3
   116  181C  3405               	retlw	5
   117  181D  3407               	retlw	7
   118  181E  3409               	retlw	9
   119  181F  340B               	retlw	11
   120  1820  340D               	retlw	13
   121  1821  340E               	retlw	14
   122  1822  3410               	retlw	16
   123  1823  3411               	retlw	17
   124  1824  3413               	retlw	19
   125  1825  3414               	retlw	20
   126  1826  3415               	retlw	21
   127  1827  3416               	retlw	22
   128  1828  3418               	retlw	24
   129  1829  3419               	retlw	25
   130  182A  341A               	retlw	26
   131  182B  341B               	retlw	27
   132  182C  341C               	retlw	28
   133  182D  341D               	retlw	29
   134  182E  341E               	retlw	30
   135  182F  341F               	retlw	31
   136  1830  3420               	retlw	32
   137  1831  3420               	retlw	32
   138  1832  3421               	retlw	33
   139  1833  3422               	retlw	34
   140  1834  3423               	retlw	35
   141  1835  3424               	retlw	36
   142  1836  3425               	retlw	37
   143  1837  3425               	retlw	37
   144  1838  3426               	retlw	38
   145  1839  3427               	retlw	39
   146  183A  3428               	retlw	40
   147  183B  3428               	retlw	40
   148  183C  3429               	retlw	41
   149  183D  342A               	retlw	42
   150  183E  342A               	retlw	42
   151  183F  342B               	retlw	43
   152  1840  342C               	retlw	44
   153  1841  342C               	retlw	44
   154  1842  342D               	retlw	45
   155  1843  342E               	retlw	46
   156  1844  342E               	retlw	46
   157  1845  342F               	retlw	47
   158  1846  3430               	retlw	48
   159  1847  3430               	retlw	48
   160  1848  3431               	retlw	49
   161  1849  3431               	retlw	49
   162  184A  3432               	retlw	50
   163  184B  3433               	retlw	51
   164  184C  3433               	retlw	51
   165  184D  3434               	retlw	52
   166  184E  3434               	retlw	52
   167  184F  3435               	retlw	53
   168  1850  3435               	retlw	53
   169  1851  3436               	retlw	54
   170  1852  3436               	retlw	54
   171  1853  3437               	retlw	55
   172  1854  3438               	retlw	56
   173  1855  3438               	retlw	56
   174  1856  3439               	retlw	57
   175  1857  3439               	retlw	57
   176  1858  343A               	retlw	58
   177  1859  343A               	retlw	58
   178  185A  343B               	retlw	59
   179  185B  343B               	retlw	59
   180  185C  343C               	retlw	60
   181  185D  343C               	retlw	60
   182  185E  343D               	retlw	61
   183  185F  343D               	retlw	61
   184  1860  343E               	retlw	62
   185  1861  343E               	retlw	62
   186  1862  343F               	retlw	63
   187  1863  343F               	retlw	63
   188  1864  3440               	retlw	64
   189  1865  3441               	retlw	65
   190  1866  3441               	retlw	65
   191  1867  3442               	retlw	66
   192  1868  3442               	retlw	66
   193  1869  3443               	retlw	67
   194  186A  3443               	retlw	67
   195  186B  3444               	retlw	68
   196  186C  3444               	retlw	68
   197  186D  3444               	retlw	68
   198  186E  3445               	retlw	69
   199  186F  3445               	retlw	69
   200  1870  3446               	retlw	70
   201  1871  3446               	retlw	70
   202  1872  3447               	retlw	71
   203  1873  3447               	retlw	71
   204  1874  3448               	retlw	72
   205  1875  3448               	retlw	72
   206  1876  3449               	retlw	73
   207  1877  3449               	retlw	73
   208  1878  344A               	retlw	74
   209  1879  344A               	retlw	74
   210  187A  344B               	retlw	75
   211  187B  344B               	retlw	75
   212  187C  344C               	retlw	76
   213  187D  344C               	retlw	76
   214  187E  344D               	retlw	77
   215  187F  344D               	retlw	77
   216  1880  344E               	retlw	78
   217  1881  344E               	retlw	78
   218  1882  344F               	retlw	79
   219  1883  344F               	retlw	79
   220  1884  3450               	retlw	80
   221  1885  3450               	retlw	80
   222  1886  3451               	retlw	81
   223  1887  3451               	retlw	81
   224  1888  3452               	retlw	82
   225  1889  3452               	retlw	82
   226  188A  3453               	retlw	83
   227  188B  3453               	retlw	83
   228  188C  3453               	retlw	83
   229  188D  3454               	retlw	84
   230  188E  3454               	retlw	84
   231  188F  3455               	retlw	85
   232  1890  3455               	retlw	85
   233  1891  3456               	retlw	86
   234  1892  3456               	retlw	86
   235  1893  3457               	retlw	87
   236  1894  3457               	retlw	87
   237  1895  3458               	retlw	88
   238  1896  3458               	retlw	88
   239  1897  3459               	retlw	89
   240  1898  3459               	retlw	89
   241  1899  345A               	retlw	90
   242  189A  345A               	retlw	90
   243  189B  345B               	retlw	91
   244  189C  345B               	retlw	91
   245  189D  345C               	retlw	92
   246  189E  345C               	retlw	92
   247  189F  345D               	retlw	93
   248  18A0  345D               	retlw	93
   249  18A1  345E               	retlw	94
   250  18A2  345E               	retlw	94
   251  18A3  345F               	retlw	95
   252  18A4  345F               	retlw	95
   253  18A5  3460               	retlw	96
   254  18A6  3461               	retlw	97
   255  18A7  3461               	retlw	97
   256  18A8  3462               	retlw	98
   257  18A9  3462               	retlw	98
   258  18AA  3463               	retlw	99
   259  18AB  3463               	retlw	99
   260  18AC  3464               	retlw	100
   261  18AD  3464               	retlw	100
   262  18AE  3465               	retlw	101
   263  18AF  3466               	retlw	102
   264  18B0  3466               	retlw	102
   265  18B1  3467               	retlw	103
   266  18B2  3467               	retlw	103
   267  18B3  3468               	retlw	104
   268  18B4  3468               	retlw	104
   269  18B5  3469               	retlw	105
   270  18B6  3469               	retlw	105
   271  18B7  346A               	retlw	106
   272  18B8  346B               	retlw	107
   273  18B9  346B               	retlw	107
   274  18BA  346C               	retlw	108
   275  18BB  346C               	retlw	108
   276  18BC  346D               	retlw	109
   277  18BD  346E               	retlw	110
   278  18BE  346E               	retlw	110
   279  18BF  346F               	retlw	111
   280  18C0  3470               	retlw	112
   281  18C1  3470               	retlw	112
   282  18C2  3471               	retlw	113
   283  18C3  3472               	retlw	114
   284  18C4  3472               	retlw	114
   285  18C5  3473               	retlw	115
   286  18C6  3474               	retlw	116
   287  18C7  3474               	retlw	116
   288  18C8  3475               	retlw	117
   289  18C9  3476               	retlw	118
   290  18CA  3476               	retlw	118
   291  18CB  3477               	retlw	119
   292  18CC  3478               	retlw	120
   293  18CD  3478               	retlw	120
   294  18CE  3479               	retlw	121
   295  18CF  347A               	retlw	122
   296  18D0  347B               	retlw	123
   297  18D1  347B               	retlw	123
   298  18D2  347C               	retlw	124
   299  18D3  347D               	retlw	125
   300  18D4  347E               	retlw	126
   301  18D5  347F               	retlw	127
   302  18D6  347F               	retlw	127
   303  18D7  3480               	retlw	128
   304  18D8  3481               	retlw	129
   305  18D9  3482               	retlw	130
   306  18DA  3483               	retlw	131
   307  18DB  3484               	retlw	132
   308  18DC  3485               	retlw	133
   309  18DD  3486               	retlw	134
   310  18DE  3487               	retlw	135
   311  18DF  3488               	retlw	136
   312  18E0  3489               	retlw	137
   313  18E1  348A               	retlw	138
   314  18E2  348B               	retlw	139
   315  18E3  348C               	retlw	140
   316  18E4  348D               	retlw	141
   317  18E5  348E               	retlw	142
   318  18E6  348F               	retlw	143
   319  18E7  3490               	retlw	144
   320  18E8  3492               	retlw	146
   321  18E9  3493               	retlw	147
   322  18EA  3494               	retlw	148
   323  18EB  3495               	retlw	149
   324  18EC  3496               	retlw	150
   325  18ED  3498               	retlw	152
   326  18EE  3499               	retlw	153
   327  18EF  349A               	retlw	154
   328  18F0  349C               	retlw	156
   329  18F1  349D               	retlw	157
   330  18F2  349F               	retlw	159
   331  18F3  34A0               	retlw	160
   332  18F4  34A2               	retlw	162
   333  18F5  34A4               	retlw	164
   334  18F6  34A6               	retlw	166
   335  18F7  34A7               	retlw	167
   336  18F8  34A9               	retlw	169
   337  18F9  34AB               	retlw	171
   338  18FA  34AD               	retlw	173
   339  18FB  34B0               	retlw	176
   340  18FC  34B2               	retlw	178
   341  18FD  34B4               	retlw	180
   342  18FE  34B7               	retlw	183
   343  18FF  34BA               	retlw	186
   344  1900  34BD               	retlw	189
   345  1901  34C0               	retlw	192
   346  1902  34C3               	retlw	195
   347  1903  34C6               	retlw	198
   348  1904  34CA               	retlw	202
   349  1905  34CE               	retlw	206
   350  1906  34D3               	retlw	211
   351  1907  34D8               	retlw	216
   352  1908                     __end_of_REF_TEMP_TAB:	
   353  1908                     _TIME_TAB:	
   354  1908  3400               	retlw	0
   355  1909  3400               	retlw	0
   356  190A  3400               	retlw	0
   357  190B  3400               	retlw	0
   358  190C  3410               	retlw	16
   359  190D  3412               	retlw	18
   360  190E  3414               	retlw	20
   361  190F  3400               	retlw	0
   362  1910  340F               	retlw	15
   363  1911  3411               	retlw	17
   364  1912  3415               	retlw	21
   365  1913  3400               	retlw	0
   366  1914  3405               	retlw	5
   367  1915  340A               	retlw	10
   368  1916  340F               	retlw	15
   369  1917  3400               	retlw	0
   370  1918  340A               	retlw	10
   371  1919  340F               	retlw	15
   372  191A  3414               	retlw	20
   373  191B  3400               	retlw	0
   374  191C  3414               	retlw	20
   375  191D  341C               	retlw	28
   376  191E  3423               	retlw	35
   377  191F  3400               	retlw	0
   378  1920  340F               	retlw	15
   379  1921  3414               	retlw	20
   380  1922  3419               	retlw	25
   381  1923  3400               	retlw	0
   382  1924  340C               	retlw	12
   383  1925  340F               	retlw	15
   384  1926  3414               	retlw	20
   385  1927  3400               	retlw	0
   386  1928  340F               	retlw	15
   387  1929  3414               	retlw	20
   388  192A  341E               	retlw	30
   389  192B  3400               	retlw	0
   390  192C  3412               	retlw	18
   391  192D  3419               	retlw	25
   392  192E  341E               	retlw	30
   393  192F  3400               	retlw	0
   394  1930  3414               	retlw	20
   395  1931  3419               	retlw	25
   396  1932  3423               	retlw	35
   397  1933  3400               	retlw	0
   398  1934  341E               	retlw	30
   399  1935  3423               	retlw	35
   400  1936  342D               	retlw	45
   401  1937  3400               	retlw	0
   402  1938  3428               	retlw	40
   403  1939  3428               	retlw	40
   404  193A  3428               	retlw	40
   405  193B  3400               	retlw	0
   406  193C  3408               	retlw	8
   407  193D  3408               	retlw	8
   408  193E  3408               	retlw	8
   409  193F  3400               	retlw	0
   410  1940  3408               	retlw	8
   411  1941  3408               	retlw	8
   412  1942  3408               	retlw	8
   413  1943  3400               	retlw	0
   414  1944                     __end_of_TIME_TAB:	
   415  1944                     _HOT_RUN_TAB:	
   416  1944  3401               	retlw	1
   417  1945  3401               	retlw	1
   418  1946  3401               	retlw	1
   419  1947  3400               	retlw	0
   420  1948  3401               	retlw	1
   421  1949  3401               	retlw	1
   422  194A  3401               	retlw	1
   423  194B  3400               	retlw	0
   424  194C  3400               	retlw	0
   425  194D  3401               	retlw	1
   426  194E  3401               	retlw	1
   427  194F  3401               	retlw	1
   428  1950  3400               	retlw	0
   429  1951  3400               	retlw	0
   430  1952  3401               	retlw	1
   431  1953  3403               	retlw	3
   432  1954  3400               	retlw	0
   433  1955  3400               	retlw	0
   434  1956  3400               	retlw	0
   435  1957  3407               	retlw	7
   436  1958  3400               	retlw	0
   437  1959  3400               	retlw	0
   438  195A  3400               	retlw	0
   439  195B  340E               	retlw	14
   440  195C  3400               	retlw	0
   441  195D  3400               	retlw	0
   442  195E  3408               	retlw	8
   443  195F  340C               	retlw	12
   444  1960  3400               	retlw	0
   445  1961  3408               	retlw	8
   446  1962  3408               	retlw	8
   447  1963  3408               	retlw	8
   448  1964  3408               	retlw	8
   449  1965  3408               	retlw	8
   450  1966  3408               	retlw	8
   451  1967  3400               	retlw	0
   452  1968  3418               	retlw	24
   453  1969  3408               	retlw	8
   454  196A  3400               	retlw	0
   455  196B  3400               	retlw	0
   456  196C  3438               	retlw	56
   457  196D  3400               	retlw	0
   458  196E  3400               	retlw	0
   459  196F  3400               	retlw	0
   460  1970  3431               	retlw	49
   461  1971  3400               	retlw	0
   462  1972  3400               	retlw	0
   463  1973  3400               	retlw	0
   464  1974  3421               	retlw	33
   465  1975  3401               	retlw	1
   466  1976  3400               	retlw	0
   467  1977  3400               	retlw	0
   468  1978                     __end_of_HOT_RUN_TAB:	
   469  1978                     _SEG_MATH_TAB:	
   470  1978  343F               	retlw	63
   471  1979  3406               	retlw	6
   472  197A  345B               	retlw	91
   473  197B  344F               	retlw	79
   474  197C  3466               	retlw	102
   475  197D  346D               	retlw	109
   476  197E  347D               	retlw	125
   477  197F  3407               	retlw	7
   478  1980  347F               	retlw	127
   479  1981  346F               	retlw	111
   480  1982  3477               	retlw	119
   481  1983  347C               	retlw	124
   482  1984  3439               	retlw	57
   483  1985  345E               	retlw	94
   484  1986  3479               	retlw	121
   485  1987  3471               	retlw	113
   486  1988                     __end_of_SEG_MATH_TAB:	
   487  1FF9                     _Fc_ID_2_absaddr	set	8185
   488  1FF8                     _Fc_ID_1_absaddr	set	8184
   489  1FFF                     _Fc_ID_8_absaddr	set	8191
   490  1FFE                     _Fc_ID_7_absaddr	set	8190
   491  1FFD                     _Fc_ID_6_absaddr	set	8189
   492  1FFC                     _Fc_ID_5_absaddr	set	8188
   493  1FFB                     _Fc_ID_4_absaddr	set	8187
   494  1FFA                     _Fc_ID_3_absaddr	set	8186
   495  1FF9                     _Fc_ID_2_absaddr	set	8185
   496                           
   497                           	psect	_Fc_ID_2_text
   498  1FF9                     __p_Fc_ID_2_text:	
   499  1FF9                     _Fc_ID_2:	
   500  1FF9  3400               	retlw	0
   501  1FFA                     __end_of_Fc_ID_2:	
   502  1FF8                     _Fc_ID_1_absaddr	set	8184
   503                           
   504                           	psect	_Fc_ID_1_text
   505  1FF8                     __p_Fc_ID_1_text:	
   506  1FF8                     _Fc_ID_1:	
   507  1FF8  3400               	retlw	0
   508  1FF9                     __end_of_Fc_ID_1:	
   509  1FFF                     _Fc_ID_8_absaddr	set	8191
   510                           
   511                           	psect	_Fc_ID_8_text
   512  1FFF                     __p_Fc_ID_8_text:	
   513  1FFF                     _Fc_ID_8:	
   514  1FFF  3400               	retlw	0
   515  2000                     __end_of_Fc_ID_8:	
   516  1FFE                     _Fc_ID_7_absaddr	set	8190
   517                           
   518                           	psect	_Fc_ID_7_text
   519  1FFE                     __p_Fc_ID_7_text:	
   520  1FFE                     _Fc_ID_7:	
   521  1FFE  3400               	retlw	0
   522  1FFF                     __end_of_Fc_ID_7:	
   523  1FFD                     _Fc_ID_6_absaddr	set	8189
   524                           
   525                           	psect	_Fc_ID_6_text
   526  1FFD                     __p_Fc_ID_6_text:	
   527  1FFD                     _Fc_ID_6:	
   528  1FFD  3400               	retlw	0
   529  1FFE                     __end_of_Fc_ID_6:	
   530  1FFC                     _Fc_ID_5_absaddr	set	8188
   531                           
   532                           	psect	_Fc_ID_5_text
   533  1FFC                     __p_Fc_ID_5_text:	
   534  1FFC                     _Fc_ID_5:	
   535  1FFC  3400               	retlw	0
   536  1FFD                     __end_of_Fc_ID_5:	
   537  1FFB                     _Fc_ID_4_absaddr	set	8187
   538                           
   539                           	psect	_Fc_ID_4_text
   540  1FFB                     __p_Fc_ID_4_text:	
   541  1FFB                     _Fc_ID_4:	
   542  1FFB  3400               	retlw	0
   543  1FFC                     __end_of_Fc_ID_4:	
   544  1FFA                     _Fc_ID_3_absaddr	set	8186
   545                           
   546                           	psect	_Fc_ID_3_text
   547  1FFA                     __p_Fc_ID_3_text:	
   548  1FFA                     _Fc_ID_3:	
   549  1FFA  3400               	retlw	0
   550  1FFB                     __end_of_Fc_ID_3:	
   551                           
   552                           	psect	nvBANK0
   553  0067                     __pnvBANK0:	
   554  0067                     _AC_Vol_Rms:	
   555  0067                     	ds	2
   556  0069                     _Vrms_Level:	
   557  0069                     	ds	1
   558  006A                     _SysStatus:	
   559  006A                     	ds	1
   560  001F                     _ADCON0	set	31
   561  001E                     _ADRESH	set	30
   562  001D                     _PWMCON	set	29
   563  001B                     _CCPR0L	set	27
   564  0010                     _T1CON	set	16
   565  000F                     _TMR1H	set	15
   566  000E                     _TMR1L	set	14
   567  000B                     _INTCON	set	11
   568  0008                     _PORTD	set	8
   569  0007                     _PORTC	set	7
   570  0006                     _PORTB	set	6
   571  0005                     _PORTA	set	5
   572  00F9                     _GODONE	set	249
   573  00E8                     _PWM0EN	set	232
   574  0090                     _T2CKPS0	set	144
   575  0091                     _T2CKPS1	set	145
   576  0092                     _TMR2ON	set	146
   577  0060                     _TMR1IF	set	96
   578  0061                     _TMR2IF	set	97
   579  0044                     _RD4	set	68
   580  0038                     _RC0	set	56
   581  0039                     _RC1	set	57
   582  0031                     _RB1	set	49
   583  0032                     _RB2	set	50
   584  0033                     _RB3	set	51
   585  0034                     _RB4	set	52
   586  0035                     _RB5	set	53
   587  0036                     _RB6	set	54
   588  0037                     _RB7	set	55
   589  009F                     _ADCON1	set	159
   590  009E                     _ADRESL	set	158
   591  0095                     _WPUB	set	149
   592  0092                     _PR2	set	146
   593  008F                     _OSCCON	set	143
   594  0088                     _TRISD	set	136
   595  0087                     _TRISC	set	135
   596  0086                     _TRISB	set	134
   597  0085                     _TRISA	set	133
   598  0081                     _OPTION_REG	set	129
   599  0460                     _TMR1IE	set	1120
   600  0114                     _LCDCON	set	276
   601  0196                     _SEGEN0	set	406
   602  0195                     _SEGEN1	set	405
   603  0194                     _SEGEN2	set	404
   604  0193                     _LEDDATA	set	403
   605  0192                     _LEDADD	set	402
   606  0191                     _LCDCON1	set	401
   607  0190                     _LCDCON0	set	400
   608  018F                     _WPUC	set	399
   609  018E                     _WPUA	set	398
   610  0185                     _WPUD	set	389
   611                           
   612                           	psect	cinit
   613  000F                     start_initialization:	
   614                           ; #config settings
   615                           
   616  000F                     __initialization:	
   617                           
   618                           ;initializer for Get_Temp_Data@s_admin
   619  000F  30FF               	movlw	255
   620  0010  00EB               	movwf	__pdataBANK0& (0+127)
   621                           
   622                           ;initializer for Get_AC_Rms@s_minvol
   623  0011  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   624  0012  30A0               	movlw	low __pbssBANK1
   625                           
   626                           ; Clear objects allocated to BANK1
   627  0013  1383               	bcf	3,7	;select IRP bank0
   628  0014  0084               	movwf	4
   629  0015  30D0               	movlw	low (__pbssBANK1+48)
   630  0016  120A  118A  25FF  120A  118A  	fcall	clear_ram0
   631                           
   632                           ; Clear objects allocated to BANK0
   633  001B  3020               	movlw	low __pbssBANK0
   634  001C  0084               	movwf	4
   635  001D  305A               	movlw	low (__pbssBANK0+58)
   636  001E  120A  118A  25FF   	fcall	clear_ram0
   637                           
   638                           ; Clear objects allocated to COMMON
   639  0021  01F9               	clrf	__pbssCOMMON& (0+127)
   640  0022  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   641  0023  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   642  0024  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   643                           
   644                           ; Clear objects allocated to BITCOMMON
   645  0025  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   646  0026  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   647  0027  01F2               	clrf	((__pbitbssCOMMON/(0+8)+2))& (0+127)
   648  0028                     end_of_initialization:	
   649                           ;End of C runtime variable initialization code
   650                           
   651  0028                     __end_of__initialization:	
   652  0028  0183               	clrf	3
   653  0029  120A  118A  2C68   	ljmp	_main	;jump to C main() function
   654                           
   655                           	psect	bitbssCOMMON
   656  0380                     __pbitbssCOMMON:	
   657  0380                     _b_MainLoop_500ms:	
   658  0380                     	ds	1
   659  0381                     _b_MainLoop_8ms:	
   660  0381                     	ds	1
   661  0382                     _b_JudgeLidOk:	
   662  0382                     	ds	1
   663  0383                     _b_TestShow:	
   664  0383                     	ds	1
   665  0384                     _b_AutoKeepWarm:	
   666  0384                     	ds	1
   667  0385                     _b_LedCol:	
   668  0385                     	ds	1
   669  0386                     _b_ZeroDeley_OK:	
   670  0386                     	ds	1
   671  0387                     _b_Rel_NoZero:	
   672  0387                     	ds	1
   673  0388                     _b_RelType:	
   674  0388                     	ds	1
   675  0389                     _b_Opencook_OK:	
   676  0389                     	ds	1
   677  038A                     _b_BotTempOut:	
   678  038A                     	ds	1
   679  038B                     _b_Auto_test:	
   680  038B                     	ds	1
   681  038C                     _b_ShortOn:	
   682  038C                     	ds	1
   683  038D                     _b_BotHeatOn:	
   684  038D                     	ds	1
   685  038E                     _b_BotHeatEn:	
   686  038E                     	ds	1
   687  038F                     _b_AdBot_OK:	
   688  038F                     	ds	1
   689  0390                     _b_Zero:	
   690  0390                     	ds	1
   691  0391                     _b_ZeroWave_OK:	
   692  0391                     	ds	1
   693  0392                     _b_ZeroTimeout:	
   694  0392                     	ds	1
   695  0393                     _b_Zero_EN:	
   696  0393                     	ds	1
   697  0394                     _b_VolData_OK:	
   698  0394                     	ds	1
   699  0395                     _b_PressureOn:	
   700  0395                     	ds	1
   701  0396                     _b_Standby:	
   702  0396                     	ds	1
   703  0397                     _b_LidClosed:	
   704  0397                     	ds	1
   705                           
   706                           	psect	bssCOMMON
   707  0079                     __pbssCOMMON:	
   708  0079                     _RelWaitCnt:	
   709  0079                     	ds	2
   710  007B                     _ChooseFunSave:	
   711  007B                     	ds	1
   712  007C                     _Ad_Vol_Raw:	
   713  007C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0020                     __pbssBANK0:	
   717  0020                     _DispData:	
   718  0020                     	ds	7
   719  0027                     _KeyData:	
   720  0027                     	ds	2
   721  0029                     _WaitCycle:	
   722  0029                     	ds	1
   723  002A                     _CountTimeS:	
   724  002A                     	ds	1
   725  002B                     _KeepWarmH:	
   726  002B                     	ds	1
   727  002C                     _PresetTimeS:	
   728  002C                     	ds	1
   729  002D                     _KeyFlag:	
   730  002D                     	ds	1
   731  002E                     _WorkTimeH:	
   732  002E                     	ds	1
   733  002F                     _JudgeLidMin:	
   734  002F                     	ds	1
   735  0030                     _SendShow:	
   736  0030                     	ds	1
   737  0031                     _TestShow:	
   738  0031                     	ds	1
   739  0032                     _HorseCount:	
   740  0032                     	ds	1
   741  0033                     _CountDownTimeSave:	
   742  0033                     	ds	1
   743  0034                     _WorkTimeS:	
   744  0034                     	ds	1
   745  0035                     _PresetTimeM:	
   746  0035                     	ds	1
   747  0036                     _PresetTimeH:	
   748  0036                     	ds	1
   749  0037                     _MinBuf:	
   750  0037                     	ds	1
   751  0038                     _HourBuf:	
   752  0038                     	ds	1
   753  0039                     _PresetState:	
   754  0039                     	ds	1
   755  003A                     _ZeroTimeoutCnt:	
   756  003A                     	ds	1
   757  003B                     _ZeroDeley:	
   758  003B                     	ds	1
   759  003C                     _ChooseFun:	
   760  003C                     	ds	1
   761  003D                     _WorkTimeM:	
   762  003D                     	ds	1
   763  003E                     _TotalTimeSave:	
   764  003E                     	ds	1
   765  003F                     _WorkStage:	
   766  003F                     	ds	1
   767  0040                     _CountDownTime:	
   768  0040                     	ds	1
   769  0041                     _FactoryTestData:	
   770  0041                     	ds	1
   771  0042                     _WorkStep:	
   772  0042                     	ds	1
   773  0043                     _ShortCntM:	
   774  0043                     	ds	1
   775  0044                     _ShortCntL:	
   776  0044                     	ds	1
   777  0045                     _HeatCnt500ms:	
   778  0045                     	ds	1
   779  0046                     _RelOffCnt:	
   780  0046                     	ds	1
   781  0047                     Get_Temp_Data@s_admax:	
   782  0047                     	ds	1
   783  0048                     Get_Zero@s_lowcount:	
   784  0048                     	ds	1
   785  0049                     Get_Zero@s_highcount:	
   786  0049                     	ds	1
   787  004A                     Get_Zero@s_zerocnt9ms:	
   788  004A                     	ds	1
   789  004B                     Get_AC_Rms@s_voltimes:	
   790  004B                     	ds	1
   791  004C                     Get_AC_Rms@s_maxvol:	
   792  004C                     	ds	1
   793  004D                     Get_Lid_Data@s_lidcount:	
   794  004D                     	ds	1
   795  004E                     _Bot_Temp:	
   796  004E                     	ds	1
   797  004F                     _Ad_Bot:	
   798  004F                     	ds	1
   799  0050                     _Ad_Bot_Raw:	
   800  0050                     	ds	1
   801  0051                     _Ad_Vol_Avg:	
   802  0051                     	ds	1
   803  0052                     _Ad_Pressure_Raw:	
   804  0052                     	ds	1
   805  0053                     _BuzDownTemp:	
   806  0053                     	ds	1
   807  0054                     _BuzUpTemp:	
   808  0054                     	ds	1
   809  0055                     _BuzDownTime:	
   810  0055                     	ds	1
   811  0056                     _BuzUpTime:	
   812  0056                     	ds	1
   813  0057                     _BuzCnt:	
   814  0057                     	ds	1
   815  0058                     _ErrorCode:	
   816  0058                     	ds	1
   817  0059                     _StandbyTimeCnt:	
   818  0059                     	ds	1
   819                           
   820                           	psect	dataBANK0
   821  006B                     __pdataBANK0:	
   822  006B                     Get_Temp_Data@s_admin:	
   823  006B                     	ds	1
   824  006C                     Get_AC_Rms@s_minvol:	
   825  006C                     	ds	1
   826                           
   827                           	psect	bssBANK1
   828  00A0                     __pbssBANK1:	
   829  00A0                     _Fc_ID:	
   830  00A0                     	ds	8
   831  00A8                     Key_Drive@keylong:	
   832  00A8                     	ds	2
   833  00AA                     Key_Drive@keyold:	
   834  00AA                     	ds	2
   835  00AC                     Error_Deal@E3_delaycount:	
   836  00AC                     	ds	2
   837  00AE                     Get_Temp_Data@s_adsum:	
   838  00AE                     	ds	2
   839  00B0                     Get_Zero@s_zerotimes:	
   840  00B0                     	ds	2
   841  00B2                     Get_AC_Rms@s_sumvol:	
   842  00B2                     	ds	2
   843  00B4                     Get_AC_Voltage@s_volcount:	
   844  00B4                     	ds	2
   845  00B6                     Get_Pressure_Switch_Data@s_pscount:	
   846  00B6                     	ds	2
   847  00B8                     _ZeroTimesShow:	
   848  00B8                     	ds	2
   849  00BA                     _Ad_Vol_Sum:	
   850  00BA                     	ds	2
   851  00BC                     _Ad_Pressure:	
   852  00BC                     	ds	1
   853  00BD                     _Ad_Lid:	
   854  00BD                     	ds	1
   855  00BE                     _TasteCase:	
   856  00BE                     	ds	1
   857  00BF                     _ErrorSoundTime:	
   858  00BF                     	ds	1
   859  00C0                     _MainTime_10ms:	
   860  00C0                     	ds	1
   861  00C1                     _MainTime_8ms:	
   862  00C1                     	ds	1
   863  00C2                     Key_Drive@nkeycount:	
   864  00C2                     	ds	1
   865  00C3                     Key_Drive@keycount:	
   866  00C3                     	ds	1
   867  00C4                     _KeepWarmS:	
   868  00C4                     	ds	1
   869  00C5                     _KeepWarmM:	
   870  00C5                     	ds	1
   871  00C6                     _PressureCountTime:	
   872  00C6                     	ds	1
   873  00C7                     _PressureData:	
   874  00C7                     	ds	1
   875  00C8                     _JudgeLidCnt:	
   876  00C8                     	ds	1
   877  00C9                     _MainTime_500ms:	
   878  00C9                     	ds	1
   879  00CA                     _LongKeyCount:	
   880  00CA                     	ds	1
   881  00CB                     _LedCol_500ms:	
   882  00CB                     	ds	1
   883  00CC                     _HorseShowTime160ms:	
   884  00CC                     	ds	1
   885  00CD                     _Led_Step_100C:	
   886  00CD                     	ds	1
   887  00CE                     _RelOnCnt:	
   888  00CE                     	ds	1
   889  00CF                     Get_Temp_Data@s_adtimes:	
   890  00CF                     	ds	1
   891                           
   892                           	psect	clrtext
   893  05FF                     clear_ram0:	
   894                           ;	Called with FSR containing the base address, and
   895                           ;	W with the last address+1
   896                           
   897  05FF  0064               	clrwdt	;clear the watchdog before getting into this loop
   898  0600                     clrloop0:	
   899  0600  0180               	clrf	0	;clear RAM location pointed to by FSR
   900  0601  0A84               	incf	4,f	;increment pointer
   901  0602  0604               	xorwf	4,w	;XOR with final address
   902  0603  1903               	btfsc	3,2	;have we reached the end yet?
   903  0604  3400               	retlw	0	;all done for this memory range, return
   904  0605  0604               	xorwf	4,w	;XOR again to restore value
   905  0606  2E00               	goto	clrloop0	;do the next byte
   906                           
   907                           	psect	cstackCOMMON
   908  0073                     __pcstackCOMMON:	
   909  0073                     ?_Cancel:	
   910  0073                     ?_Sound_Deal:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0073                     ?_Time_Deal:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0073                     ?_Get_Lid_Data:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0073                     ?_Get_Pressure_Switch_Data:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0073                     ??_Get_Pressure_Switch_Data:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0073                     ?_Get_AC_Voltage:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0073                     ??_Get_AC_Voltage:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0073                     ?_Get_AC_Rms:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0073                     ?_Get_Zero:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0073                     ??_Get_Zero:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0073                     ?_Get_Temp_Data:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0073                     ?_Get_AD:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0073                     ??_Get_AD:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0073                     ?_BotHeatOn:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0073                     ?_BotHeatOff:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0073                     ?_ShortTimeOn:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0073                     ?_FactoryTest:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0073                     ?_RiceHeat:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0073                     ?_PressureHeat:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0073                     ?_OpenCook:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0073                     ?_CakeHeat:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0073                     ?_ReheatCook:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0073                     ?_KeepWarmHeat:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0073                     ?_Cook_Task:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0073                     ?_Relay_Duty_Control:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0073                     ?_Operate_Relay_IO:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0073                     ??_Operate_Relay_IO:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0073                     ?_LED_Off:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0073                     ?_Power_On_Show:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0073                     ?_Waiting_Mode_Show:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0073                     ?_Fun_Choose_Show:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0073                     ?_Work_Mode_Show:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0073                     ?_Keepwarm_Show:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0073                     ?_Error_Show:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0073                     ?_Test_Mode_Show:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0073                     ?_Factory_Show:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0073                     ?_LED_Task:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0073                     ?_Init_LED_Module:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0073                     ?_LED_Drive:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0073                     ?_Error_Deal:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0073                     ?_Maink_Cancel:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0073                     ?_MainK_Preset:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0073                     ?_Maink_Fast_Fun:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0073                     ?_Maink_Test:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0073                     ?_Maink_Factory:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0073                     ?_Key_Task:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0073                     ?_KscanIo:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0073                     ?_Key_Drive:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0073                     ?_Init_PWM:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0073                     ?_Init_TMR1:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0073                     ?_Init_GPIO:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0073                     ?_Init_Var:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0073                     ?_Init_System:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0073                     ?_Timer1_Isr:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0073                     ?_main:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0073                     ?_StandbyTimeStart:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0073                     ?_ErrorTimeStart:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0073                     ?_PresetTimeStart:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0073                     ?_CountDownTimeStart:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0073                     ?_KeepWarmTimeStart:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0073                     ?_WorkTimeStart:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0073                     ?_ShortTime:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0073                     ?_AutoStartFun:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099                           
  1100                           ; 1 bytes @ 0x0
  1101  0073                     	ds	1
  1102  0074                     Get_AD@adresult:	
  1103                           
  1104                           ; 1 bytes @ 0x1
  1105  0074                     	ds	1
  1106  0075                     Get_AD@ch:	
  1107                           
  1108                           ; 1 bytes @ 0x2
  1109  0075                     	ds	1
  1110  0076                     Get_AD@i:	
  1111                           
  1112                           ; 1 bytes @ 0x3
  1113  0076                     	ds	1
  1114  0077                     ??_Timer1_Isr:	
  1115                           
  1116                           ; 1 bytes @ 0x4
  1117  0077                     	ds	2
  1118                           
  1119                           	psect	cstackBANK0
  1120  005A                     __pcstackBANK0:	
  1121  005A                     ??_Cancel:	
  1122  005A                     ??_Sound_Deal:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  005A                     ??_Get_Lid_Data:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  005A                     ??_Get_Temp_Data:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  005A                     ?_Heat_Time_Select:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  005A                     ??_BotHeatOn:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  005A                     ??_BotHeatOff:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  005A                     ??_ShortTimeOn:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  005A                     ??_FactoryTest:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  005A                     ??_Relay_Duty_Control:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  005A                     ?_DelayXms:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  005A                     ??_LED_Off:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  005A                     ??_Power_On_Show:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  005A                     ??_Waiting_Mode_Show:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  005A                     ??_Keepwarm_Show:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  005A                     ?_Set_Addr_Value:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  005A                     ??_Init_LED_Module:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  005A                     ??_Error_Deal:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  005A                     ??_Maink_Cancel:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  005A                     ??_MainK_Preset:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  005A                     ??_Maink_Fast_Fun:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  005A                     ??_Maink_Test:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  005A                     ??_Maink_Factory:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188  005A                     ??_KscanIo:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  005A                     ??_Init_PWM:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  005A                     ??_Init_TMR1:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  005A                     ??_Init_GPIO:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  005A                     ??_Init_Var:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  005A                     ??_StandbyTimeStart:	
  1204                           ; 1 bytes @ 0x0
  1205                           
  1206  005A                     ??_ErrorTimeStart:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  005A                     ??_CountDownTimeStart:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  005A                     ??_KeepWarmTimeStart:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  005A                     ??_WorkTimeStart:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  005A                     ??_ShortTime:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  005A                     ??_AutoStartFun:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  005A                     ?___lbdiv:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  005A                     ?___lbmod:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  005A                     ?___wmul:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  005A                     ?___awdiv:	
  1234                           ; 2 bytes @ 0x0
  1235                           
  1236  005A                     ?___awmod:	
  1237                           ; 2 bytes @ 0x0
  1238                           
  1239  005A                     ?___lwdiv:	
  1240                           ; 2 bytes @ 0x0
  1241                           
  1242  005A                     ?___lwmod:	
  1243                           ; 2 bytes @ 0x0
  1244                           
  1245  005A                     Heat_Time_Select@offtm:	
  1246                           ; 2 bytes @ 0x0
  1247                           
  1248  005A                     LED_Off@i:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  005A                     Power_On_Show@i:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  005A                     Set_Addr_Value@mask:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  005A                     ___lbdiv@divisor:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  005A                     ___lbmod@divisor:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  005A                     DelayXms@x:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  005A                     ___wmul@multiplier:	
  1267                           ; 2 bytes @ 0x0
  1268                           
  1269  005A                     ___awdiv@divisor:	
  1270                           ; 2 bytes @ 0x0
  1271                           
  1272  005A                     ___awmod@divisor:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275  005A                     ___lwdiv@divisor:	
  1276                           ; 2 bytes @ 0x0
  1277                           
  1278  005A                     ___lwmod@divisor:	
  1279                           ; 2 bytes @ 0x0
  1280                           
  1281                           
  1282                           ; 2 bytes @ 0x0
  1283  005A                     	ds	1
  1284  005B                     ??_Heat_Time_Select:	
  1285  005B                     ??_Set_Addr_Value:	
  1286                           ; 1 bytes @ 0x1
  1287                           
  1288  005B                     ??_Key_Task:	
  1289                           ; 1 bytes @ 0x1
  1290                           
  1291  005B                     ??___lbdiv:	
  1292                           ; 1 bytes @ 0x1
  1293                           
  1294  005B                     ??___lbmod:	
  1295                           ; 1 bytes @ 0x1
  1296                           
  1297  005B                     Heat_Time_Select@ontm:	
  1298                           ; 1 bytes @ 0x1
  1299                           
  1300  005B                     Set_Addr_Value@addr:	
  1301                           ; 1 bytes @ 0x1
  1302                           
  1303  005B                     ___lbdiv@dividend:	
  1304                           ; 1 bytes @ 0x1
  1305                           
  1306                           
  1307                           ; 1 bytes @ 0x1
  1308  005B                     	ds	1
  1309  005C                     ??_RiceHeat:	
  1310  005C                     ??_PressureHeat:	
  1311                           ; 1 bytes @ 0x2
  1312                           
  1313  005C                     ??_OpenCook:	
  1314                           ; 1 bytes @ 0x2
  1315                           
  1316  005C                     ??_CakeHeat:	
  1317                           ; 1 bytes @ 0x2
  1318                           
  1319  005C                     ??_ReheatCook:	
  1320                           ; 1 bytes @ 0x2
  1321                           
  1322  005C                     ??_KeepWarmHeat:	
  1323                           ; 1 bytes @ 0x2
  1324                           
  1325  005C                     ??_Cook_Task:	
  1326                           ; 1 bytes @ 0x2
  1327                           
  1328  005C                     ??_DelayXms:	
  1329                           ; 1 bytes @ 0x2
  1330                           
  1331  005C                     DelayXms@i:	
  1332                           ; 1 bytes @ 0x2
  1333                           
  1334  005C                     Set_Addr_Value@data:	
  1335                           ; 1 bytes @ 0x2
  1336                           
  1337  005C                     ___lbdiv@counter:	
  1338                           ; 1 bytes @ 0x2
  1339                           
  1340  005C                     ___lbmod@dividend:	
  1341                           ; 1 bytes @ 0x2
  1342                           
  1343  005C                     ___wmul@multiplicand:	
  1344                           ; 1 bytes @ 0x2
  1345                           
  1346  005C                     ___awdiv@dividend:	
  1347                           ; 2 bytes @ 0x2
  1348                           
  1349  005C                     ___awmod@dividend:	
  1350                           ; 2 bytes @ 0x2
  1351                           
  1352  005C                     ___lwdiv@dividend:	
  1353                           ; 2 bytes @ 0x2
  1354                           
  1355  005C                     ___lwmod@dividend:	
  1356                           ; 2 bytes @ 0x2
  1357                           
  1358                           
  1359                           ; 2 bytes @ 0x2
  1360  005C                     	ds	1
  1361  005D                     ??_LED_Drive:	
  1362  005D                     ??_Init_System:	
  1363                           ; 1 bytes @ 0x3
  1364                           
  1365  005D                     ___lbdiv@quotient:	
  1366                           ; 1 bytes @ 0x3
  1367                           
  1368  005D                     ___lbmod@counter:	
  1369                           ; 1 bytes @ 0x3
  1370                           
  1371                           
  1372                           ; 1 bytes @ 0x3
  1373  005D                     	ds	1
  1374  005E                     ??___wmul:	
  1375  005E                     ??___awdiv:	
  1376                           ; 1 bytes @ 0x4
  1377                           
  1378  005E                     ??___awmod:	
  1379                           ; 1 bytes @ 0x4
  1380                           
  1381  005E                     ??___lwdiv:	
  1382                           ; 1 bytes @ 0x4
  1383                           
  1384  005E                     ??___lwmod:	
  1385                           ; 1 bytes @ 0x4
  1386                           
  1387  005E                     KscanIo@i:	
  1388                           ; 1 bytes @ 0x4
  1389                           
  1390  005E                     ___awdiv@counter:	
  1391                           ; 1 bytes @ 0x4
  1392                           
  1393  005E                     ___awmod@counter:	
  1394                           ; 1 bytes @ 0x4
  1395                           
  1396  005E                     ___lbmod@rem:	
  1397                           ; 1 bytes @ 0x4
  1398                           
  1399  005E                     ___lwmod@counter:	
  1400                           ; 1 bytes @ 0x4
  1401                           
  1402  005E                     ___wmul@product:	
  1403                           ; 1 bytes @ 0x4
  1404                           
  1405  005E                     ___lwdiv@quotient:	
  1406                           ; 2 bytes @ 0x4
  1407                           
  1408                           
  1409                           ; 2 bytes @ 0x4
  1410  005E                     	ds	1
  1411  005F                     ?_DIG_Show_Time:	
  1412  005F                     ?_DIG_Show_Data:	
  1413                           ; 1 bytes @ 0x5
  1414                           
  1415  005F                     ??_Error_Show:	
  1416                           ; 1 bytes @ 0x5
  1417                           
  1418  005F                     ??_Factory_Show:	
  1419                           ; 1 bytes @ 0x5
  1420                           
  1421  005F                     ??_Key_Drive:	
  1422                           ; 1 bytes @ 0x5
  1423                           
  1424  005F                     DIG_Show_Time@min:	
  1425                           ; 1 bytes @ 0x5
  1426                           
  1427  005F                     DIG_Show_Data@digdata2:	
  1428                           ; 1 bytes @ 0x5
  1429                           
  1430  005F                     ___awdiv@sign:	
  1431                           ; 1 bytes @ 0x5
  1432                           
  1433  005F                     ___awmod@sign:	
  1434                           ; 1 bytes @ 0x5
  1435                           
  1436                           
  1437                           ; 1 bytes @ 0x5
  1438  005F                     	ds	1
  1439  0060                     DIG_Show_Time@point:	
  1440  0060                     DIG_Show_Data@digdata3:	
  1441                           ; 1 bytes @ 0x6
  1442                           
  1443  0060                     ___lwdiv@counter:	
  1444                           ; 1 bytes @ 0x6
  1445                           
  1446  0060                     ___awdiv@quotient:	
  1447                           ; 1 bytes @ 0x6
  1448                           
  1449                           
  1450                           ; 2 bytes @ 0x6
  1451  0060                     	ds	1
  1452  0061                     ??_Get_AC_Rms:	
  1453  0061                     ??_DIG_Show_Time:	
  1454                           ; 1 bytes @ 0x7
  1455                           
  1456  0061                     DIG_Show_Time@hour:	
  1457                           ; 1 bytes @ 0x7
  1458                           
  1459  0061                     DIG_Show_Data@digdata4:	
  1460                           ; 1 bytes @ 0x7
  1461                           
  1462                           
  1463                           ; 1 bytes @ 0x7
  1464  0061                     	ds	1
  1465  0062                     ??_DIG_Show_Data:	
  1466  0062                     ??_Fun_Choose_Show:	
  1467                           ; 1 bytes @ 0x8
  1468                           
  1469  0062                     ??_Work_Mode_Show:	
  1470                           ; 1 bytes @ 0x8
  1471                           
  1472  0062                     ??_PresetTimeStart:	
  1473                           ; 1 bytes @ 0x8
  1474                           
  1475  0062                     DIG_Show_Data@digdata1:	
  1476                           ; 1 bytes @ 0x8
  1477                           
  1478                           
  1479                           ; 1 bytes @ 0x8
  1480  0062                     	ds	1
  1481  0063                     ??_Time_Deal:	
  1482  0063                     ??_Test_Mode_Show:	
  1483                           ; 1 bytes @ 0x9
  1484                           
  1485                           
  1486                           ; 1 bytes @ 0x9
  1487  0063                     	ds	4
  1488  0067                     ??_LED_Task:	
  1489  0067                     ??_main:	
  1490                           ; 1 bytes @ 0xD
  1491                           
  1492                           
  1493                           	psect	maintext
  1494  0468                     __pmaintext:	
  1495                           ; 1 bytes @ 0xD
  1496 ;;
  1497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1498 ;;
  1499 ;; *************** function _main *****************
  1500 ;; Defined at:
  1501 ;;		line 201 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : B00/0
  1512 ;;		On exit  : 200/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1515 ;;      Params:         0       0       0       0       0
  1516 ;;      Locals:         0       0       0       0       0
  1517 ;;      Temps:          0       0       0       0       0
  1518 ;;      Totals:         0       0       0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels required when called:    6
  1521 ;; This function calls:
  1522 ;;		_Cook_Task
  1523 ;;		_Error_Deal
  1524 ;;		_Get_AC_Rms
  1525 ;;		_Get_Lid_Data
  1526 ;;		_Get_Temp_Data
  1527 ;;		_Init_System
  1528 ;;		_Key_Drive
  1529 ;;		_Key_Task
  1530 ;;		_LED_Drive
  1531 ;;		_LED_Task
  1532 ;;		_Sound_Deal
  1533 ;;		_Time_Deal
  1534 ;; This function is called by:
  1535 ;;		Startup code after reset
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           
  1540                           ;psect for function _main
  1541  0468                     _main:	
  1542                           
  1543                           ;main.c: 203: Init_System();
  1544                           
  1545                           ;incstack = 0
  1546                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1547  0468  120A  118A  2363  120A  118A  	fcall	_Init_System
  1548  046D                     l6855:	
  1549                           ;main.c: 205: while(1)
  1550                           
  1551  046D  0064               	clrwdt	;# 
  1552                           
  1553                           ;main.c: 209: if(b_MainLoop_8ms)
  1554  046E  1CF0               	btfss	_b_MainLoop_8ms/(0+8),_b_MainLoop_8ms& (0+7)	;volatile
  1555  046F  2CD2               	goto	l17072
  1556                           
  1557                           ;main.c: 210: {
  1558                           ;main.c: 211: b_MainLoop_8ms = 0;
  1559  0470  10F0               	bcf	_b_MainLoop_8ms/(0+8),_b_MainLoop_8ms& (0+7)	;volatile
  1560                           
  1561                           ;main.c: 214: if(SysStatus == 6)
  1562  0471  3006               	movlw	6
  1563  0472  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0473  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0474  066A               	xorwf	_SysStatus,w	;volatile
  1566  0475  1D03               	btfss	3,2
  1567  0476  2CA1               	goto	l17050
  1568                           
  1569                           ;main.c: 215: {
  1570                           ;main.c: 216: if(++WaitCycle >= 125)
  1571  0477  307D               	movlw	125
  1572  0478  0AA9               	incf	_WaitCycle,f	;volatile
  1573  0479  0229               	subwf	_WaitCycle,w	;volatile
  1574  047A  1C03               	skipc
  1575  047B  2C7F               	goto	l17022
  1576                           
  1577                           ;main.c: 217: {
  1578                           ;main.c: 218: WaitCycle = 0;
  1579  047C  01A9               	clrf	_WaitCycle	;volatile
  1580                           
  1581                           ;main.c: 219: SysStatus = 1;
  1582  047D  3001               	movlw	1
  1583  047E  00EA               	movwf	_SysStatus	;volatile
  1584  047F                     l17022:	
  1585                           
  1586                           ;main.c: 220: }
  1587                           ;main.c: 222: if(WaitCycle >= 60)
  1588  047F  303C               	movlw	60
  1589  0480  0229               	subwf	_WaitCycle,w	;volatile
  1590  0481  1C03               	skipc
  1591  0482  2CA1               	goto	l17050
  1592                           
  1593                           ;main.c: 223: {
  1594                           ;main.c: 225: if((Ad_Bot_Raw >= 158 && Ad_Bot_Raw <= 168) && (Ad_Pressure_Raw >= 238 && 
      +                          Ad_Pressure_Raw <= 248) && b_LidClosed == 1)
  1595  0483  309E               	movlw	158
  1596  0484  0250               	subwf	_Ad_Bot_Raw,w	;volatile
  1597  0485  1C03               	skipc
  1598  0486  2CA1               	goto	l17050
  1599  0487  30A9               	movlw	169
  1600  0488  0250               	subwf	_Ad_Bot_Raw,w	;volatile
  1601  0489  1803               	skipnc
  1602  048A  2CA1               	goto	l17050
  1603  048B  30EE               	movlw	238
  1604  048C  0252               	subwf	_Ad_Pressure_Raw,w	;volatile
  1605  048D  1C03               	skipc
  1606  048E  2CA1               	goto	l17050
  1607  048F  30F9               	movlw	249
  1608  0490  0252               	subwf	_Ad_Pressure_Raw,w	;volatile
  1609  0491  1C03               	btfss	3,0
  1610  0492  1FF2               	btfss	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
  1611  0493  2CA1               	goto	l17050
  1612                           
  1613                           ;main.c: 226: {
  1614                           ;main.c: 227: SysStatus = 5;
  1615  0494  3005               	movlw	5
  1616  0495  00EA               	movwf	_SysStatus	;volatile
  1617                           
  1618                           ;main.c: 228: FactoryTestData = 0;
  1619  0496  01C1               	clrf	_FactoryTestData	;volatile
  1620                           
  1621                           ;main.c: 229: b_Auto_test = 1;
  1622  0497  15F1               	bsf	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
  1623                           
  1624                           ;main.c: 230: {{BuzCnt = 1; BuzUpTime = 75/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
  1625  0498  3001               	movlw	1
  1626  0499  00D7               	movwf	_BuzCnt	;volatile
  1627  049A  3025               	movlw	37
  1628  049B  00D6               	movwf	_BuzUpTime	;volatile
  1629  049C  120A  158A  279A  120A  118A  	fcall	PL10	;call to abstracted procedure
  1630  04A1                     l17050:	
  1631                           
  1632                           ;main.c: 231: }
  1633                           ;main.c: 232: }
  1634                           ;main.c: 233: }
  1635                           ;main.c: 235: Key_Drive();
  1636  04A1  120A  118A  2281  120A  118A  	fcall	_Key_Drive
  1637                           
  1638                           ;main.c: 236: Key_Task();
  1639  04A6  120A  158A  2407  120A  118A  	fcall	_Key_Task
  1640                           
  1641                           ;main.c: 238: if(b_AdBot_OK)
  1642  04AB  1FF1               	btfss	_b_AdBot_OK/(0+8),_b_AdBot_OK& (0+7)	;volatile
  1643  04AC  2CB2               	goto	l17058
  1644                           
  1645                           ;main.c: 239: {
  1646                           ;main.c: 240: Get_Temp_Data();
  1647  04AD  120A  118A  254D  120A  118A  	fcall	_Get_Temp_Data
  1648  04B2                     l17058:	
  1649                           
  1650                           ;main.c: 241: }
  1651                           ;main.c: 243: Get_Lid_Data();
  1652  04B2  120A  158A  27A1  120A  118A  	fcall	_Get_Lid_Data
  1653                           
  1654                           ;main.c: 245: if(b_Auto_test == 0)
  1655  04B7  19F1               	btfsc	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
  1656  04B8  2CBE               	goto	l17064
  1657                           
  1658                           ;main.c: 246: {
  1659                           ;main.c: 247: Error_Deal();
  1660  04B9  120A  118A  23E8  120A  118A  	fcall	_Error_Deal
  1661  04BE                     l17064:	
  1662                           
  1663                           ;main.c: 248: }
  1664                           ;main.c: 249: Cook_Task();
  1665  04BE  120A  158A  2041  120A  118A  	fcall	_Cook_Task
  1666                           
  1667                           ;main.c: 250: Sound_Deal();
  1668  04C3  120A  118A  25DA  120A  118A  	fcall	_Sound_Deal
  1669                           
  1670                           ;main.c: 251: LED_Task();
  1671  04C8  120A  118A  2183  120A  118A  	fcall	_LED_Task
  1672                           
  1673                           ;main.c: 252: LED_Drive();
  1674  04CD  120A  118A  24E2  120A  118A  	fcall	_LED_Drive
  1675  04D2                     l17072:	
  1676                           
  1677                           ;main.c: 253: }
  1678                           ;main.c: 255: if(b_MainLoop_500ms)
  1679  04D2  1C70               	btfss	_b_MainLoop_500ms/(0+8),_b_MainLoop_500ms& (0+7)	;volatile
  1680  04D3  2C6D               	goto	l6855
  1681                           
  1682                           ;main.c: 256: {
  1683                           ;main.c: 257: b_MainLoop_500ms = 0;
  1684  04D4  1070               	bcf	_b_MainLoop_500ms/(0+8),_b_MainLoop_500ms& (0+7)	;volatile
  1685                           
  1686                           ;main.c: 258: Time_Deal();
  1687  04D5  120A  158A  2370  120A  118A  	fcall	_Time_Deal
  1688                           
  1689                           ;main.c: 261: if(b_VolData_OK == 1)
  1690  04DA  1E72               	btfss	_b_VolData_OK/(0+8),_b_VolData_OK& (0+7)	;volatile
  1691  04DB  2C6D               	goto	l6855
  1692                           
  1693                           ;main.c: 262: {
  1694                           ;main.c: 263: Get_AC_Rms();
  1695  04DC  160A  118A  2002  120A  118A  	fcall	_Get_AC_Rms
  1696  04E1  2C6D               	goto	l6855
  1697  04E2                     __end_of_main:	
  1698                           
  1699                           	psect	text7
  1700  05A4                     __ptext7:	
  1701 ;; *************** function _KeepWarmTimeStart *****************
  1702 ;; Defined at:
  1703 ;;		line 168 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0, pclath, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 300/0
  1714 ;;		On exit  : 200/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         0       0       0       0       0
  1718 ;;      Locals:         0       0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0
  1720 ;;      Totals:         0       0       0       0       0
  1721 ;;Total ram usage:        0 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    3
  1724 ;; This function calls:
  1725 ;;		_Cancel
  1726 ;; This function is called by:
  1727 ;;		_Time_Deal
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function _KeepWarmTimeStart
  1733  05A4                     _KeepWarmTimeStart:	
  1734                           
  1735                           ;time.c: 170: if(SysStatus != 4)
  1736                           
  1737                           ;incstack = 0
  1738                           ; Regs used in _KeepWarmTimeStart: [wreg+status,2+status,0+pclath+cstack]
  1739  05A4  3004               	movlw	4
  1740  05A5  066A               	xorwf	_SysStatus,w	;volatile
  1741  05A6  1903               	btfsc	3,2
  1742  05A7  2DAE               	goto	l13700
  1743                           
  1744                           ;time.c: 171: {
  1745                           ;time.c: 172: KeepWarmS = 0;
  1746  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  1747  05A9  01C4               	clrf	_KeepWarmS^(0+128)	;volatile
  1748                           
  1749                           ;time.c: 173: KeepWarmM = 0;
  1750  05AA  01C5               	clrf	_KeepWarmM^(0+128)	;volatile
  1751                           
  1752                           ;time.c: 174: KeepWarmH = 0;
  1753  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  1754  05AC  01AB               	clrf	_KeepWarmH	;volatile
  1755  05AD  0008               	return
  1756  05AE                     l13700:	
  1757                           
  1758                           ;time.c: 176: }
  1759                           ;time.c: 178: if((++KeepWarmS) < 120)return;
  1760  05AE  3078               	movlw	120
  1761  05AF  1683               	bsf	3,5	;RP0=1, select bank1
  1762  05B0  0AC4               	incf	_KeepWarmS^(0+128),f	;volatile
  1763  05B1  0244               	subwf	_KeepWarmS^(0+128),w	;volatile
  1764  05B2  1C03               	btfss	3,0
  1765  05B3  0008               	return
  1766                           
  1767                           ;time.c: 179: KeepWarmS = 0;
  1768  05B4  01C4               	clrf	_KeepWarmS^(0+128)	;volatile
  1769                           
  1770                           ;time.c: 180: if((++KeepWarmM) < 60) return;
  1771  05B5  303C               	movlw	60
  1772  05B6  0AC5               	incf	_KeepWarmM^(0+128),f	;volatile
  1773  05B7  0245               	subwf	_KeepWarmM^(0+128),w	;volatile
  1774  05B8  1C03               	btfss	3,0
  1775  05B9  0008               	return
  1776                           
  1777                           ;time.c: 181: KeepWarmM = 0;
  1778  05BA  01C5               	clrf	_KeepWarmM^(0+128)	;volatile
  1779                           
  1780                           ;time.c: 183: if(ChooseFunSave == 1 || ChooseFunSave == 2 || ChooseFunSave == 12)
  1781  05BB  037B               	decf	_ChooseFunSave,w	;volatile
  1782  05BC  1903               	btfsc	3,2
  1783  05BD  2DC6               	goto	l13718
  1784  05BE  3002               	movlw	2
  1785  05BF  067B               	xorwf	_ChooseFunSave,w	;volatile
  1786  05C0  1903               	btfsc	3,2
  1787  05C1  2DC6               	goto	l13718
  1788  05C2  300C               	movlw	12
  1789  05C3  067B               	xorwf	_ChooseFunSave,w	;volatile
  1790  05C4  1D03               	btfss	3,2
  1791  05C5  2DC8               	goto	l13722
  1792  05C6                     l13718:	
  1793                           
  1794                           ;time.c: 184: {
  1795                           ;time.c: 185: if((++KeepWarmH) < 5)
  1796  05C6  3005               	movlw	5
  1797  05C7  2DC9               	goto	L3
  1798  05C8                     l13722:	
  1799                           
  1800                           ;time.c: 188: else
  1801                           ;time.c: 189: {
  1802                           ;time.c: 190: if((++KeepWarmH) < 24)
  1803  05C8  3018               	movlw	24
  1804  05C9                     L3:	
  1805  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  1806  05CA  0AAB               	incf	_KeepWarmH,f	;volatile
  1807  05CB  022B               	subwf	_KeepWarmH,w	;volatile
  1808  05CC  1C03               	btfss	3,0
  1809  05CD  0008               	return
  1810                           
  1811                           ;time.c: 192: }
  1812                           ;time.c: 193: ChooseFunSave = 0;
  1813  05CE  01FB               	clrf	_ChooseFunSave	;volatile
  1814                           
  1815                           ;time.c: 194: b_AutoKeepWarm = 0;
  1816  05CF  1270               	bcf	_b_AutoKeepWarm/(0+8),_b_AutoKeepWarm& (0+7)	;volatile
  1817                           
  1818                           ;time.c: 195: Cancel();
  1819  05D0  120A  158A  2577   	fcall	_Cancel
  1820                           
  1821                           ;time.c: 196: {{BuzCnt = 5; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
  1822  05D3  3005               	movlw	5
  1823  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1824  05D5  00D7               	movwf	_BuzCnt	;volatile
  1825  05D6  3019               	movlw	25
  1826  05D7  120A  158A  2F88   	ljmp	PL2	;call to abstracted procedure
  1827  05DA                     __end_of_KeepWarmTimeStart:	
  1828                           
  1829                           	psect	text11
  1830  05DA                     __ptext11:	
  1831 ;; *************** function _Sound_Deal *****************
  1832 ;; Defined at:
  1833 ;;		line 6 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\sound.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;		None
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0
  1842 ;; Tracked objects:
  1843 ;;		On entry : 300/0
  1844 ;;		On exit  : 300/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1847 ;;      Params:         0       0       0       0       0
  1848 ;;      Locals:         0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0
  1850 ;;      Totals:         0       0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    2
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           
  1862                           ;psect for function _Sound_Deal
  1863  05DA                     _Sound_Deal:	
  1864                           
  1865                           ;sound.c: 8: if(BuzCnt > 0)
  1866                           
  1867                           ;incstack = 0
  1868                           ; Regs used in _Sound_Deal: [wreg+status,2+status,0]
  1869  05DA  0857               	movf	_BuzCnt,w	;volatile
  1870  05DB  1903               	btfsc	3,2
  1871  05DC  2DF5               	goto	l14606
  1872                           
  1873                           ;sound.c: 9: {
  1874                           ;sound.c: 10: if(BuzUpTime > 0)
  1875  05DD  0856               	movf	_BuzUpTime,w	;volatile
  1876  05DE  1903               	btfsc	3,2
  1877  05DF  2DE6               	goto	l7677
  1878                           
  1879                           ;sound.c: 11: {
  1880                           ;sound.c: 12: {TRISC&=~(1<<(2));PWM0EN=1;};
  1881  05E0  1683               	bsf	3,5	;RP0=1, select bank1
  1882  05E1  1107               	bcf	7,2	;volatile
  1883  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1884  05E3  141D               	bsf	29,0	;volatile
  1885                           
  1886                           ;sound.c: 13: BuzUpTime--;
  1887  05E4  03D6               	decf	_BuzUpTime,f	;volatile
  1888                           
  1889                           ;sound.c: 14: }
  1890  05E5  0008               	return
  1891  05E6                     l7677:	
  1892                           
  1893                           ;sound.c: 15: else
  1894                           ;sound.c: 16: {
  1895                           ;sound.c: 17: {TRISC|=(1<<(2));PWM0EN=0;};
  1896  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  1897  05E7  1507               	bsf	7,2	;volatile
  1898  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1899  05E9  101D               	bcf	29,0	;volatile
  1900                           
  1901                           ;sound.c: 18: if(BuzDownTime > 0)
  1902  05EA  0855               	movf	_BuzDownTime,w	;volatile
  1903  05EB  1903               	btfsc	3,2
  1904  05EC  2DEF               	goto	l14600
  1905                           
  1906                           ;sound.c: 19: {
  1907                           ;sound.c: 20: BuzDownTime--;
  1908  05ED  03D5               	decf	_BuzDownTime,f	;volatile
  1909                           
  1910                           ;sound.c: 21: }
  1911  05EE  0008               	return
  1912  05EF                     l14600:	
  1913                           
  1914                           ;sound.c: 22: else
  1915                           ;sound.c: 23: {
  1916                           ;sound.c: 24: BuzCnt--;
  1917  05EF  03D7               	decf	_BuzCnt,f	;volatile
  1918                           
  1919                           ;sound.c: 25: BuzDownTime = BuzDownTemp;
  1920  05F0  0853               	movf	_BuzDownTemp,w	;volatile
  1921  05F1  00D5               	movwf	_BuzDownTime	;volatile
  1922                           
  1923                           ;sound.c: 26: BuzUpTime = BuzUpTemp;
  1924  05F2  0854               	movf	_BuzUpTemp,w	;volatile
  1925  05F3  00D6               	movwf	_BuzUpTime	;volatile
  1926  05F4  0008               	return
  1927  05F5                     l14606:	
  1928                           
  1929                           ;sound.c: 30: else
  1930                           ;sound.c: 31: {
  1931                           ;sound.c: 32: BuzUpTime = 0;
  1932  05F5  01D6               	clrf	_BuzUpTime	;volatile
  1933                           
  1934                           ;sound.c: 33: BuzDownTime = 0;
  1935  05F6  01D5               	clrf	_BuzDownTime	;volatile
  1936                           
  1937                           ;sound.c: 34: BuzUpTemp = 0;
  1938  05F7  01D4               	clrf	_BuzUpTemp	;volatile
  1939                           
  1940                           ;sound.c: 35: BuzDownTemp = 0;
  1941  05F8  01D3               	clrf	_BuzDownTemp	;volatile
  1942                           
  1943                           ;sound.c: 36: BuzCnt = 0;
  1944  05F9  01D7               	clrf	_BuzCnt	;volatile
  1945                           
  1946                           ;sound.c: 37: {TRISC|=(1<<(2));PWM0EN=0;};
  1947  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  1948  05FB  1507               	bsf	7,2	;volatile
  1949  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  1950  05FD  101D               	bcf	29,0	;volatile
  1951  05FE  0008               	return
  1952  05FF                     __end_of_Sound_Deal:	
  1953                           
  1954                           	psect	text12
  1955  0183                     __ptext12:	
  1956 ;; *************** function _LED_Task *****************
  1957 ;; Defined at:
  1958 ;;		line 691 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 300/0
  1969 ;;		On exit  : 300/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1972 ;;      Params:         0       0       0       0       0
  1973 ;;      Locals:         0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0
  1975 ;;      Totals:         0       0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    5
  1979 ;; This function calls:
  1980 ;;		_Error_Show
  1981 ;;		_Factory_Show
  1982 ;;		_Fun_Choose_Show
  1983 ;;		_Keepwarm_Show
  1984 ;;		_LED_Off
  1985 ;;		_Power_On_Show
  1986 ;;		_Test_Mode_Show
  1987 ;;		_Waiting_Mode_Show
  1988 ;;		_Work_Mode_Show
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _LED_Task
  1996  0183                     _LED_Task:	
  1997                           
  1998                           ;display.c: 694: LED_Off();
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _LED_Task: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2002  0183  2260  120A  118A   	fcall	_LED_Off
  2003                           
  2004                           ;display.c: 697: if(++HorseShowTime160ms >= 20)
  2005  0186  3014               	movlw	20
  2006  0187  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0188  0ACC               	incf	_HorseShowTime160ms^(0+128),f	;volatile
  2008  0189  024C               	subwf	_HorseShowTime160ms^(0+128),w	;volatile
  2009  018A  1C03               	skipc
  2010  018B  2995               	goto	l16964
  2011                           
  2012                           ;display.c: 698: {
  2013                           ;display.c: 699: HorseShowTime160ms = 0;
  2014  018C  01CC               	clrf	_HorseShowTime160ms^(0+128)	;volatile
  2015                           
  2016                           ;display.c: 700: if(++HorseCount >= 13)
  2017  018D  300D               	movlw	13
  2018  018E  1283               	bcf	3,5	;RP0=0, select bank0
  2019  018F  0AB2               	incf	_HorseCount,f	;volatile
  2020  0190  0232               	subwf	_HorseCount,w	;volatile
  2021  0191  1C03               	skipc
  2022  0192  2995               	goto	l16964
  2023                           
  2024                           ;display.c: 701: {
  2025                           ;display.c: 702: HorseCount = 1;
  2026  0193  3001               	movlw	1
  2027  0194  00B2               	movwf	_HorseCount	;volatile
  2028  0195                     l16964:	
  2029                           
  2030                           ;display.c: 703: }
  2031                           ;display.c: 704: }
  2032                           ;display.c: 707: if(SysStatus == 6)
  2033  0195  3006               	movlw	6
  2034  0196  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0197  066A               	xorwf	_SysStatus,w	;volatile
  2036  0198  1D03               	btfss	3,2
  2037  0199  299E               	goto	l16968
  2038                           
  2039                           ;display.c: 708: {
  2040                           ;display.c: 709: Power_On_Show();
  2041  019A  226C  120A  118A   	fcall	_Power_On_Show
  2042                           
  2043                           ;display.c: 710: }
  2044  019D  29E1               	goto	l17004
  2045  019E                     l16968:	
  2046                           
  2047                           ;display.c: 711: else if(SysStatus == 1)
  2048  019E  0B6A               	decfsz	_SysStatus,w	;volatile
  2049  019F  29AC               	goto	l16978
  2050                           
  2051                           ;display.c: 712: {
  2052                           ;display.c: 713: if(b_Standby)
  2053  01A0  1F72               	btfss	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
  2054  01A1  29A8               	goto	l16976
  2055                           
  2056                           ;display.c: 714: {
  2057                           ;display.c: 715: if(b_LedCol)
  2058  01A2  1EF0               	btfss	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  2059  01A3  29E1               	goto	l17004
  2060                           
  2061                           ;display.c: 716: {
  2062                           ;display.c: 718: DispData[0] |= 0x40;
  2063                           
  2064                           ;display.c: 719: DispData[1] |= 0x40;
  2065                           
  2066                           ;display.c: 720: DispData[2] |= 0x40;
  2067                           
  2068                           ;display.c: 721: DispData[3] |= 0x40;
  2069                           
  2070                           ;display.c: 722: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  2071  01A4  227A  120A  118A   	fcall	PL30	;call to abstracted procedure
  2072  01A7  29E1               	goto	l17004
  2073  01A8                     l16976:	
  2074                           
  2075                           ;display.c: 725: else
  2076                           ;display.c: 726: {
  2077                           ;display.c: 727: Waiting_Mode_Show();
  2078  01A8  2278  120A  118A   	fcall	_Waiting_Mode_Show
  2079                           
  2080                           ;display.c: 728: }
  2081                           ;display.c: 730: }
  2082  01AB  29E1               	goto	l17004
  2083  01AC                     l16978:	
  2084                           
  2085                           ;display.c: 731: else if(SysStatus == 2)
  2086  01AC  3002               	movlw	2
  2087  01AD  066A               	xorwf	_SysStatus,w	;volatile
  2088  01AE  1D03               	btfss	3,2
  2089  01AF  29B6               	goto	l16982
  2090                           
  2091                           ;display.c: 732: {
  2092                           ;display.c: 733: Fun_Choose_Show();
  2093  01B0  160A  118A  20D9  120A  118A  	fcall	_Fun_Choose_Show
  2094                           
  2095                           ;display.c: 734: }
  2096  01B5  29E1               	goto	l17004
  2097  01B6                     l16982:	
  2098                           
  2099                           ;display.c: 735: else if(SysStatus == 3 && ErrorCode == 0)
  2100  01B6  3003               	movlw	3
  2101  01B7  066A               	xorwf	_SysStatus,w	;volatile
  2102  01B8  1D03               	btfss	3,2
  2103  01B9  29C3               	goto	l16988
  2104  01BA  0858               	movf	_ErrorCode,w	;volatile
  2105  01BB  1D03               	btfss	3,2
  2106  01BC  29C3               	goto	l16988
  2107                           
  2108                           ;display.c: 736: {
  2109                           ;display.c: 737: Work_Mode_Show();
  2110  01BD  160A  118A  23F9  120A  118A  	fcall	_Work_Mode_Show
  2111                           
  2112                           ;display.c: 738: }
  2113  01C2  29E1               	goto	l17004
  2114  01C3                     l16988:	
  2115                           
  2116                           ;display.c: 739: else if(SysStatus == 4 && ErrorCode == 0)
  2117  01C3  3004               	movlw	4
  2118  01C4  066A               	xorwf	_SysStatus,w	;volatile
  2119  01C5  1D03               	btfss	3,2
  2120  01C6  29CE               	goto	l16994
  2121  01C7  0858               	movf	_ErrorCode,w	;volatile
  2122  01C8  1D03               	btfss	3,2
  2123  01C9  29CE               	goto	l16994
  2124                           
  2125                           ;display.c: 740: {
  2126                           ;display.c: 741: Keepwarm_Show();
  2127  01CA  2204  120A  118A   	fcall	_Keepwarm_Show
  2128                           
  2129                           ;display.c: 742: }
  2130  01CD  29E1               	goto	l17004
  2131  01CE                     l16994:	
  2132                           
  2133                           ;display.c: 743: else if(SysStatus == 5 && ErrorCode == 0)
  2134  01CE  3005               	movlw	5
  2135  01CF  066A               	xorwf	_SysStatus,w	;volatile
  2136  01D0  1D03               	btfss	3,2
  2137  01D1  29DB               	goto	l17000
  2138  01D2  0858               	movf	_ErrorCode,w	;volatile
  2139  01D3  1D03               	btfss	3,2
  2140  01D4  29DB               	goto	l17000
  2141                           
  2142                           ;display.c: 744: {
  2143                           ;display.c: 745: Factory_Show();
  2144  01D5  160A  118A  253C  120A  118A  	fcall	_Factory_Show
  2145                           
  2146                           ;display.c: 746: }
  2147  01DA  29E1               	goto	l17004
  2148  01DB                     l17000:	
  2149                           
  2150                           ;display.c: 747: else if(ErrorCode != 0)
  2151  01DB  0858               	movf	_ErrorCode,w	;volatile
  2152  01DC  1903               	btfsc	3,2
  2153  01DD  29E1               	goto	l17004
  2154                           
  2155                           ;display.c: 748: {
  2156                           ;display.c: 749: Error_Show();
  2157  01DE  21E6  120A  118A   	fcall	_Error_Show
  2158  01E1                     l17004:	
  2159                           
  2160                           ;display.c: 750: }
  2161                           ;display.c: 753: if(b_TestShow)
  2162  01E1  1DF0               	btfss	_b_TestShow/(0+8),_b_TestShow& (0+7)	;volatile
  2163  01E2  0008               	return
  2164                           
  2165                           ;display.c: 754: {
  2166                           ;display.c: 755: Test_Mode_Show();
  2167  01E3  160A  118A  298D   	ljmp	l16816
  2168  01E6                     __end_of_LED_Task:	
  2169  01E6                     __ptext28:	
  2170 ;; *************** function _Error_Show *****************
  2171 ;; Defined at:
  2172 ;;		line 421 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : B00/0
  2183 ;;		On exit  : 300/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2186 ;;      Params:         0       0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0
  2189 ;;      Totals:         0       0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    3
  2193 ;; This function calls:
  2194 ;;		___lbmod
  2195 ;; This function is called by:
  2196 ;;		_LED_Task
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           
  2201                           ;psect for function _Error_Show
  2202  01E6                     _Error_Show:	
  2203                           
  2204                           ;display.c: 423: DispData[0] = 0;
  2205                           
  2206                           ;incstack = 0
  2207                           ; Regs used in _Error_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2208  01E6  01A0               	clrf	_DispData	;volatile
  2209                           
  2210                           ;display.c: 424: DispData[1] = SEG_MATH_TAB[14];
  2211  01E7  3086               	movlw	low ((_SEG_MATH_TAB+14)| (0+32768))
  2212  01E8  0084               	movwf	4
  2213  01E9  3099               	movlw	high ((_SEG_MATH_TAB+14)| (0+32768))
  2214  01EA  00FF               	movwf	127
  2215  01EB  160A  158A  2000  120A  118A  	fcall	stringtab
  2216  01F0  00A1               	movwf	_DispData+1	;volatile
  2217                           
  2218                           ;display.c: 425: DispData[2] = SEG_MATH_TAB[ErrorCode%10];
  2219  01F1  300A               	movlw	10
  2220  01F2  00DA               	movwf	___lbmod@divisor
  2221  01F3  0858               	movf	_ErrorCode,w	;volatile
  2222  01F4  160A  118A  26FF  120A  118A  	fcall	___lbmod
  2223  01F9  160A  118A  2792  120A  118A  	fcall	PL6	;call to abstracted procedure
  2224  01FE  160A  158A  2000   	fcall	stringtab
  2225  0201  00A2               	movwf	_DispData+2	;volatile
  2226                           
  2227                           ;display.c: 426: DispData[3] = 0;
  2228  0202  01A3               	clrf	_DispData+3	;volatile
  2229  0203  0008               	return
  2230  0204                     __end_of_Error_Show:	
  2231  0204                     __ptext21:	
  2232 ;; *************** function _Keepwarm_Show *****************
  2233 ;; Defined at:
  2234 ;;		line 377 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  1    wreg      void 
  2241 ;; Registers used:
  2242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2243 ;; Tracked objects:
  2244 ;;		On entry : B00/0
  2245 ;;		On exit  : 300/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2248 ;;      Params:         0       0       0       0       0
  2249 ;;      Locals:         0       0       0       0       0
  2250 ;;      Temps:          0       0       0       0       0
  2251 ;;      Totals:         0       0       0       0       0
  2252 ;;Total ram usage:        0 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    2
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_LED_Task
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _Keepwarm_Show
  2264  0204                     _Keepwarm_Show:	
  2265                           
  2266                           ;display.c: 380: (DispData[5] |= 0x80);
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _Keepwarm_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2270  0204  17A5               	bsf	_DispData+5,7	;volatile
  2271                           
  2272                           ;display.c: 382: DispData[3] |= SEG_MATH_TAB[11];
  2273  0205  3083               	movlw	low ((_SEG_MATH_TAB+11)| (0+32768))
  2274  0206  0084               	movwf	4
  2275  0207  3099               	movlw	high ((_SEG_MATH_TAB+11)| (0+32768))
  2276  0208  00FF               	movwf	127
  2277  0209  160A  158A  2000  120A  118A  	fcall	stringtab
  2278  020E  04A3               	iorwf	_DispData+3,f	;volatile
  2279                           
  2280                           ;display.c: 383: if(b_AutoKeepWarm)
  2281  020F  1E70               	btfss	_b_AutoKeepWarm/(0+8),_b_AutoKeepWarm& (0+7)	;volatile
  2282  0210  0008               	return
  2283  0211  2A2E               	goto	l12952
  2284  0212                     l3909:	
  2285                           ;display.c: 387: {
  2286                           ;display.c: 388: case 1 : (DispData[4] |= 0x01); break;
  2287                           
  2288  0212  1424               	bsf	_DispData+4,0	;volatile
  2289  0213  2A5A               	goto	l3910
  2290  0214                     l3911:	
  2291                           ;display.c: 389: case 2 : (DispData[5] |= 0x01); break;
  2292                           
  2293  0214  1425               	bsf	_DispData+5,0	;volatile
  2294  0215  2A5A               	goto	l3910
  2295  0216                     l3912:	
  2296                           ;display.c: 390: case 3 : (DispData[4] |= 0x40); break;
  2297                           
  2298  0216  1724               	bsf	_DispData+4,6	;volatile
  2299  0217  2A5A               	goto	l3910
  2300  0218                     l3913:	
  2301                           ;display.c: 391: case 4 : (DispData[5] |= 0x40); break;
  2302                           
  2303  0218  1725               	bsf	_DispData+5,6	;volatile
  2304  0219  2A5A               	goto	l3910
  2305  021A                     l3914:	
  2306                           ;display.c: 393: case 5 : (DispData[5] |= 0x08); break;
  2307                           
  2308  021A  15A5               	bsf	_DispData+5,3	;volatile
  2309  021B  2A5A               	goto	l3910
  2310  021C                     l3915:	
  2311                           ;display.c: 394: case 6 : (DispData[5] |= 0x04); break;
  2312                           
  2313  021C  1525               	bsf	_DispData+5,2	;volatile
  2314  021D  2A5A               	goto	l3910
  2315  021E                     l3916:	
  2316                           ;display.c: 395: case 7 : (DispData[5] |= 0x10); break;
  2317                           
  2318  021E  1625               	bsf	_DispData+5,4	;volatile
  2319  021F  2A5A               	goto	l3910
  2320  0220                     l3917:	
  2321                           ;display.c: 396: case 8 : (DispData[5] |= 0x20); break;
  2322                           
  2323  0220  16A5               	bsf	_DispData+5,5	;volatile
  2324  0221  2A5A               	goto	l3910
  2325  0222                     l3918:	
  2326                           ;display.c: 398: case 9: (DispData[4] |= 0x08); break;
  2327                           
  2328  0222  15A4               	bsf	_DispData+4,3	;volatile
  2329  0223  2A5A               	goto	l3910
  2330  0224                     l3919:	
  2331                           ;display.c: 399: case 10 : (DispData[4] |= 0x04); break;
  2332                           
  2333  0224  1524               	bsf	_DispData+4,2	;volatile
  2334  0225  2A5A               	goto	l3910
  2335  0226                     l3920:	
  2336                           ;display.c: 400: case 11 : (DispData[4] |= 0x10); break;
  2337                           
  2338  0226  1624               	bsf	_DispData+4,4	;volatile
  2339  0227  2A5A               	goto	l3910
  2340  0228                     l3921:	
  2341                           ;display.c: 401: case 12 : (DispData[4] |= 0x20); break;
  2342                           
  2343  0228  16A4               	bsf	_DispData+4,5	;volatile
  2344  0229  2A5A               	goto	l3910
  2345  022A                     l3922:	
  2346                           ;display.c: 403: case 13 : (DispData[4] |= 0x80); break;
  2347                           
  2348  022A  17A4               	bsf	_DispData+4,7	;volatile
  2349  022B  2A5A               	goto	l3910
  2350  022C                     l3923:	
  2351                           ;display.c: 404: case 14 : (DispData[5] |= 0x02); break;
  2352                           
  2353  022C  14A5               	bsf	_DispData+5,1	;volatile
  2354  022D  2A5A               	goto	l3910
  2355  022E                     l12952:	
  2356  022E  087B               	movf	_ChooseFunSave,w	;volatile
  2357                           
  2358                           ; Switch size 1, requested type "space"
  2359                           ; Number of cases is 14, Range of values is 1 to 14
  2360                           ; switch strategies available:
  2361                           ; Name         Instructions Cycles
  2362                           ; simple_byte           43    22 (average)
  2363                           ; direct_byte           53    11 (fixed)
  2364                           ; jumptable            263     9 (fixed)
  2365                           ;	Chosen strategy is simple_byte
  2366  022F  3A01               	xorlw	1	; case 1
  2367  0230  1903               	skipnz
  2368  0231  2A12               	goto	l3909
  2369  0232  3A03               	xorlw	3	; case 2
  2370  0233  1903               	skipnz
  2371  0234  2A14               	goto	l3911
  2372  0235  3A01               	xorlw	1	; case 3
  2373  0236  1903               	skipnz
  2374  0237  2A16               	goto	l3912
  2375  0238  3A07               	xorlw	7	; case 4
  2376  0239  1903               	skipnz
  2377  023A  2A18               	goto	l3913
  2378  023B  3A01               	xorlw	1	; case 5
  2379  023C  1903               	skipnz
  2380  023D  2A1A               	goto	l3914
  2381  023E  3A03               	xorlw	3	; case 6
  2382  023F  1903               	skipnz
  2383  0240  2A1C               	goto	l3915
  2384  0241  3A01               	xorlw	1	; case 7
  2385  0242  1903               	skipnz
  2386  0243  2A1E               	goto	l3916
  2387  0244  3A0F               	xorlw	15	; case 8
  2388  0245  1903               	skipnz
  2389  0246  2A20               	goto	l3917
  2390  0247  3A01               	xorlw	1	; case 9
  2391  0248  1903               	skipnz
  2392  0249  2A22               	goto	l3918
  2393  024A  3A03               	xorlw	3	; case 10
  2394  024B  1903               	skipnz
  2395  024C  2A24               	goto	l3919
  2396  024D  3A01               	xorlw	1	; case 11
  2397  024E  1903               	skipnz
  2398  024F  2A26               	goto	l3920
  2399  0250  3A07               	xorlw	7	; case 12
  2400  0251  1903               	skipnz
  2401  0252  2A28               	goto	l3921
  2402  0253  3A01               	xorlw	1	; case 13
  2403  0254  1903               	skipnz
  2404  0255  2A2A               	goto	l3922
  2405  0256  3A03               	xorlw	3	; case 14
  2406  0257  1903               	skipnz
  2407  0258  2A2C               	goto	l3923
  2408  0259  2A5A               	goto	l3910
  2409  025A                     l3910:	
  2410                           
  2411                           ;display.c: 406: (DispData[6] |= 0x02);
  2412  025A  14A6               	bsf	_DispData+6,1	;volatile
  2413                           
  2414                           ;display.c: 407: (DispData[6] |= 0x80);
  2415  025B  17A6               	bsf	_DispData+6,7	;volatile
  2416                           
  2417                           ;display.c: 408: (DispData[6] |= 0x10);
  2418  025C  1626               	bsf	_DispData+6,4	;volatile
  2419                           
  2420                           ;display.c: 409: (DispData[6] |= 0x04);
  2421  025D  1526               	bsf	_DispData+6,2	;volatile
  2422                           
  2423                           ;display.c: 410: (DispData[6] |= 0x08);
  2424  025E  15A6               	bsf	_DispData+6,3	;volatile
  2425  025F  0008               	return
  2426  0260                     __end_of_Keepwarm_Show:	
  2427  0260                     __ptext20:	
  2428 ;; *************** function _LED_Off *****************
  2429 ;; Defined at:
  2430 ;;		line 118 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;		None
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  i               1    0[BANK0 ] unsigned char 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2439 ;; Tracked objects:
  2440 ;;		On entry : 300/0
  2441 ;;		On exit  : B00/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2444 ;;      Params:         0       0       0       0       0
  2445 ;;      Locals:         0       1       0       0       0
  2446 ;;      Temps:          0       0       0       0       0
  2447 ;;      Totals:         0       1       0       0       0
  2448 ;;Total ram usage:        1 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    2
  2451 ;; This function calls:
  2452 ;;		Nothing
  2453 ;; This function is called by:
  2454 ;;		_LED_Task
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           
  2459                           ;psect for function _LED_Off
  2460  0260                     _LED_Off:	
  2461                           
  2462                           ;display.c: 120: uint8 i;
  2463                           ;display.c: 122: for(i = 0; i < 7; i++)
  2464                           
  2465                           ;incstack = 0
  2466                           ; Regs used in _LED_Off: [wreg-fsr0h+status,2+status,0]
  2467  0260  01DA               	clrf	LED_Off@i
  2468  0261                     l12804:	
  2469                           
  2470                           ;display.c: 123: {
  2471                           ;display.c: 124: DispData[i] = 0x00;
  2472  0261  085A               	movf	LED_Off@i,w
  2473  0262  3E20               	addlw	(low (_DispData| 0))& (0+255)
  2474  0263  0084               	movwf	4
  2475  0264  3007               	movlw	7
  2476  0265  1383               	bcf	3,7	;select IRP bank0
  2477  0266  0180               	clrf	0
  2478  0267  0ADA               	incf	LED_Off@i,f
  2479  0268  025A               	subwf	LED_Off@i,w
  2480  0269  1803               	btfsc	3,0
  2481  026A  0008               	return
  2482  026B  2A61               	goto	l12804
  2483  026C                     __end_of_LED_Off:	
  2484  026C                     __ptext19:	
  2485 ;; *************** function _Power_On_Show *****************
  2486 ;; Defined at:
  2487 ;;		line 135 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  i               1    0[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2496 ;; Tracked objects:
  2497 ;;		On entry : B00/0
  2498 ;;		On exit  : B00/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2501 ;;      Params:         0       0       0       0       0
  2502 ;;      Locals:         0       1       0       0       0
  2503 ;;      Temps:          0       0       0       0       0
  2504 ;;      Totals:         0       1       0       0       0
  2505 ;;Total ram usage:        1 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    2
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_LED_Task
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _Power_On_Show
  2517  026C                     _Power_On_Show:	
  2518                           
  2519                           ;display.c: 137: uint8 i;
  2520                           ;display.c: 139: for(i = 0; i < 7; i++)
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in _Power_On_Show: [wreg-fsr0h+status,2+status,0]
  2524  026C  01DA               	clrf	Power_On_Show@i
  2525  026D                     l12816:	
  2526                           
  2527                           ;display.c: 140: {
  2528                           ;display.c: 141: DispData[i] = 0xFF;
  2529  026D  085A               	movf	Power_On_Show@i,w
  2530  026E  3E20               	addlw	(low (_DispData| 0))& (0+255)
  2531  026F  0084               	movwf	4
  2532  0270  30FF               	movlw	255
  2533  0271  0080               	movwf	0
  2534  0272  3007               	movlw	7
  2535  0273  0ADA               	incf	Power_On_Show@i,f
  2536  0274  025A               	subwf	Power_On_Show@i,w
  2537  0275  1803               	btfsc	3,0
  2538  0276  0008               	return
  2539  0277  2A6D               	goto	l12816
  2540  0278                     __end_of_Power_On_Show:	
  2541  0278                     __ptext15:	
  2542 ;; *************** function _Waiting_Mode_Show *****************
  2543 ;; Defined at:
  2544 ;;		line 151 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		None
  2553 ;; Tracked objects:
  2554 ;;		On entry : B00/0
  2555 ;;		On exit  : B00/0
  2556 ;;		Unchanged: 800/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2558 ;;      Params:         0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    2
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_LED_Task
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _Waiting_Mode_Show
  2574  0278                     _Waiting_Mode_Show:	
  2575                           
  2576                           ;display.c: 154: DispData[0] |= 0x40;
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _Waiting_Mode_Show: []
  2580                           
  2581                           ;display.c: 155: DispData[1] |= 0x40;
  2582                           
  2583                           ;display.c: 156: DispData[2] |= 0x40;
  2584                           
  2585                           ;display.c: 157: DispData[3] |= 0x40;
  2586                           
  2587                           ;display.c: 158: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  2588  0278  227A               	fcall	PL30	;call to abstracted procedure
  2589  0279  0008               	return
  2590  027A                     __end_of_Waiting_Mode_Show:	
  2591  027A                     PL30:	
  2592  027A  1720               	bsf	_DispData,6	;volatile
  2593  027B  1721               	bsf	_DispData+1,6	;volatile
  2594  027C  1722               	bsf	_DispData+2,6	;volatile
  2595  027D  1723               	bsf	_DispData+3,6	;volatile
  2596  027E  17A2               	bsf	_DispData+2,7	;volatile
  2597  027F  17A1               	bsf	_DispData+1,7	;volatile
  2598  0280  0008               	return
  2599  0281                     __end_ofPL30:	
  2600                           
  2601                           	psect	text30
  2602  04E2                     __ptext30:	
  2603 ;; *************** function _LED_Drive *****************
  2604 ;; Defined at:
  2605 ;;		line 834 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, pclath, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 300/0
  2616 ;;		On exit  : 300/300
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2619 ;;      Params:         0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    3
  2626 ;; This function calls:
  2627 ;;		_Set_Addr_Value
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _LED_Drive
  2635  04E2                     _LED_Drive:	
  2636                           
  2637                           ;display.c: 836: (TRISD=0B00000000);
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _LED_Drive: [wreg+status,2+status,0+pclath+cstack]
  2641  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2642  04E3  0188               	clrf	8	;volatile
  2643                           
  2644                           ;display.c: 837: (TRISA=0B00000000);
  2645  04E4  0185               	clrf	5	;volatile
  2646                           
  2647                           ;display.c: 839: Set_Addr_Value((1+8)|0X80, 0x01);
  2648  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2649  04E6  3089               	movlw	137
  2650  04E7  01DA               	clrf	Set_Addr_Value@mask
  2651  04E8  0ADA               	incf	Set_Addr_Value@mask,f
  2652  04E9  2524  120A  118A   	fcall	_Set_Addr_Value
  2653                           
  2654                           ;display.c: 841: Set_Addr_Value((0+8)|0X80, 0x02);
  2655  04EC  3002               	movlw	2
  2656  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2657  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2658  04EF  00DA               	movwf	Set_Addr_Value@mask
  2659  04F0  3088               	movlw	136
  2660  04F1  2524  120A  118A   	fcall	_Set_Addr_Value
  2661                           
  2662                           ;display.c: 844: Set_Addr_Value((6+8)|0X80, 0x04);
  2663  04F4  3004               	movlw	4
  2664  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2665  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2666  04F7  00DA               	movwf	Set_Addr_Value@mask
  2667  04F8  308E               	movlw	142
  2668  04F9  2524  120A  118A   	fcall	_Set_Addr_Value
  2669                           
  2670                           ;display.c: 847: Set_Addr_Value((7+8)|0X80, 0x08);
  2671  04FC  3008               	movlw	8
  2672  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2673  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2674  04FF  00DA               	movwf	Set_Addr_Value@mask
  2675  0500  308F               	movlw	143
  2676  0501  2524  120A  118A   	fcall	_Set_Addr_Value
  2677                           
  2678                           ;display.c: 850: Set_Addr_Value((5+8)|0X80, 0x10);
  2679  0504  3010               	movlw	16
  2680  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0507  00DA               	movwf	Set_Addr_Value@mask
  2683  0508  308D               	movlw	141
  2684  0509  2524  120A  118A   	fcall	_Set_Addr_Value
  2685                           
  2686                           ;display.c: 853: Set_Addr_Value((3+8)|0X80, 0x20);
  2687  050C  3020               	movlw	32
  2688  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2689  050E  1303               	bcf	3,6	;RP1=0, select bank0
  2690  050F  00DA               	movwf	Set_Addr_Value@mask
  2691  0510  308B               	movlw	139
  2692  0511  2524  120A  118A   	fcall	_Set_Addr_Value
  2693                           
  2694                           ;display.c: 856: Set_Addr_Value((4+8)|0X80, 0x40);
  2695  0514  3040               	movlw	64
  2696  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2698  0517  00DA               	movwf	Set_Addr_Value@mask
  2699  0518  308C               	movlw	140
  2700  0519  2524  120A  118A   	fcall	_Set_Addr_Value
  2701                           
  2702                           ;display.c: 859: Set_Addr_Value((2+8)|0X80, 0x80);
  2703  051C  3080               	movlw	128
  2704  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2705  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2706  051F  00DA               	movwf	Set_Addr_Value@mask
  2707  0520  308A               	movlw	138
  2708  0521  2524               	fcall	_Set_Addr_Value
  2709                           
  2710                           ;display.c: 871: LEDADD |= 0x40;
  2711  0522  1712               	bsf	18,6	;volatile
  2712  0523  0008               	return
  2713  0524                     __end_of_LED_Drive:	
  2714  0524                     __ptext31:	
  2715 ;; *************** function _Set_Addr_Value *****************
  2716 ;; Defined at:
  2717 ;;		line 769 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  addr            1    wreg     unsigned char 
  2720 ;;  mask            1    0[BANK0 ] unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  addr            1    1[BANK0 ] unsigned char 
  2723 ;;  data            1    2[BANK0 ] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 300/0
  2730 ;;		On exit  : 300/300
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2733 ;;      Params:         0       1       0       0       0
  2734 ;;      Locals:         0       2       0       0       0
  2735 ;;      Temps:          0       0       0       0       0
  2736 ;;      Totals:         0       3       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    2
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_LED_Drive
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           
  2748                           ;psect for function _Set_Addr_Value
  2749  0524                     _Set_Addr_Value:	
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _Set_Addr_Value: [wreg+status,2+status,0]
  2753                           ;Set_Addr_Value@addr stored from wreg
  2754  0524  00DB               	movwf	Set_Addr_Value@addr
  2755                           
  2756                           ;display.c: 771: unsigned char data = 0;
  2757  0525  01DC               	clrf	Set_Addr_Value@data
  2758                           
  2759                           ;display.c: 778: LEDADD = addr | 0x10;
  2760  0526  3810               	iorlw	16
  2761  0527  1683               	bsf	3,5	;RP0=1, select bank3
  2762  0528  1703               	bsf	3,6	;RP1=1, select bank3
  2763  0529  0092               	movwf	18	;volatile
  2764                           
  2765                           ;display.c: 781: if(DispData[0] & mask)
  2766  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2767  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2768  052C  0820               	movf	_DispData,w	;volatile
  2769  052D  055A               	andwf	Set_Addr_Value@mask,w
  2770  052E  1D03               	btfss	3,2
  2771                           
  2772                           ;display.c: 782: data|=(1<<(3));
  2773  052F  15DC               	bsf	Set_Addr_Value@data,3
  2774                           
  2775                           ;display.c: 784: if(DispData[1] & mask)
  2776  0530  0821               	movf	_DispData+1,w	;volatile
  2777  0531  055A               	andwf	Set_Addr_Value@mask,w
  2778  0532  1D03               	btfss	3,2
  2779                           
  2780                           ;display.c: 785: data|=(1<<(0));
  2781  0533  145C               	bsf	Set_Addr_Value@data,0
  2782                           
  2783                           ;display.c: 788: if(DispData[2] & mask)
  2784  0534  0822               	movf	_DispData+2,w	;volatile
  2785  0535  055A               	andwf	Set_Addr_Value@mask,w
  2786  0536  1D03               	btfss	3,2
  2787                           
  2788                           ;display.c: 789: data|=(1<<(1));
  2789  0537  14DC               	bsf	Set_Addr_Value@data,1
  2790                           
  2791                           ;display.c: 792: if(DispData[3] & mask)
  2792  0538  0823               	movf	_DispData+3,w	;volatile
  2793  0539  055A               	andwf	Set_Addr_Value@mask,w
  2794  053A  1D03               	btfss	3,2
  2795                           
  2796                           ;display.c: 793: data|=(1<<(2));
  2797  053B  155C               	bsf	Set_Addr_Value@data,2
  2798                           
  2799                           ;display.c: 796: if(DispData[4] & mask)
  2800  053C  0824               	movf	_DispData+4,w	;volatile
  2801  053D  055A               	andwf	Set_Addr_Value@mask,w
  2802  053E  1D03               	btfss	3,2
  2803                           
  2804                           ;display.c: 797: data|=(1<<(7));
  2805  053F  17DC               	bsf	Set_Addr_Value@data,7
  2806                           
  2807                           ;display.c: 800: if(DispData[5] & mask)
  2808  0540  0825               	movf	_DispData+5,w	;volatile
  2809  0541  055A               	andwf	Set_Addr_Value@mask,w
  2810  0542  1D03               	btfss	3,2
  2811                           
  2812                           ;display.c: 801: data|=(1<<(6));
  2813  0543  175C               	bsf	Set_Addr_Value@data,6
  2814                           
  2815                           ;display.c: 804: if(DispData[6] & mask)
  2816  0544  0826               	movf	_DispData+6,w	;volatile
  2817  0545  055A               	andwf	Set_Addr_Value@mask,w
  2818  0546  1D03               	btfss	3,2
  2819                           
  2820                           ;display.c: 805: data|=(1<<(5));
  2821  0547  16DC               	bsf	Set_Addr_Value@data,5
  2822                           
  2823                           ;display.c: 811: LEDDATA = data;
  2824  0548  085C               	movf	Set_Addr_Value@data,w
  2825  0549  1683               	bsf	3,5	;RP0=1, select bank3
  2826  054A  1703               	bsf	3,6	;RP1=1, select bank3
  2827  054B  0093               	movwf	19	;volatile
  2828  054C  0008               	return
  2829  054D                     __end_of_Set_Addr_Value:	
  2830                           
  2831                           	psect	text38
  2832  0281                     __ptext38:	
  2833 ;; *************** function _Key_Drive *****************
  2834 ;; Defined at:
  2835 ;;		line 661 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 300/0
  2846 ;;		On exit  : 200/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       0       0       0       0
  2850 ;;      Locals:         0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0
  2852 ;;      Totals:         0       0       0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    3
  2856 ;; This function calls:
  2857 ;;		_KscanIo
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _Key_Drive
  2865  0281                     _Key_Drive:	
  2866                           
  2867                           ;key.c: 663: static unsigned char keycount,nkeycount;
  2868                           ;key.c: 664: static unsigned int keyold;
  2869                           ;key.c: 665: static unsigned int keylong;
  2870                           ;key.c: 667: KeyData = 0;
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in _Key_Drive: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2874  0281  01A7               	clrf	_KeyData	;volatile
  2875  0282  01A8               	clrf	_KeyData+1	;volatile
  2876                           
  2877                           ;key.c: 668: KscanIo();
  2878  0283  22CE  120A  118A   	fcall	_KscanIo
  2879                           
  2880                           ;key.c: 670: if(KeyData != 0)
  2881  0286  0827               	movf	_KeyData,w	;volatile
  2882  0287  0428               	iorwf	_KeyData+1,w	;volatile
  2883  0288  1903               	btfsc	3,2
  2884  0289  2ABD               	goto	l14550
  2885                           
  2886                           ;key.c: 671: {
  2887                           ;key.c: 672: nkeycount = 0;
  2888  028A  1683               	bsf	3,5	;RP0=1, select bank1
  2889  028B  01C2               	clrf	Key_Drive@nkeycount^(0+128)
  2890                           
  2891                           ;key.c: 673: if(KeyData == keyold)
  2892  028C  082B               	movf	(Key_Drive@keyold+1)^(0+128),w
  2893  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2894  028E  0628               	xorwf	_KeyData+1,w	;volatile
  2895  028F  1D03               	skipz
  2896  0290  2A95               	goto	u6175
  2897  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2898  0292  082A               	movf	Key_Drive@keyold^(0+128),w
  2899  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2900  0294  0627               	xorwf	_KeyData,w	;volatile
  2901  0295                     u6175:	
  2902  0295  1D03               	skipz
  2903  0296  2AB4               	goto	l14546
  2904                           
  2905                           ;key.c: 674: {
  2906                           ;key.c: 675: if(KeyFlag & 0x02)
  2907  0297  1CAD               	btfss	_KeyFlag,1	;volatile
  2908  0298  2AAA               	goto	l14542
  2909                           
  2910                           ;key.c: 676: {
  2911                           ;key.c: 677: if(++keylong >= 125)
  2912  0299  1683               	bsf	3,5	;RP0=1, select bank1
  2913  029A  0AA8               	incf	Key_Drive@keylong^(0+128),f
  2914  029B  1903               	skipnz
  2915  029C  0AA9               	incf	(Key_Drive@keylong+1)^(0+128),f
  2916  029D  3000               	movlw	0
  2917  029E  0229               	subwf	(Key_Drive@keylong+1)^(0+128),w
  2918  029F  307D               	movlw	125
  2919  02A0  1903               	skipnz
  2920  02A1  0228               	subwf	Key_Drive@keylong^(0+128),w
  2921  02A2  1C03               	skipc
  2922  02A3  0008               	return
  2923                           
  2924                           ;key.c: 678: {
  2925                           ;key.c: 679: keylong = 0;
  2926  02A4  01A8               	clrf	Key_Drive@keylong^(0+128)
  2927  02A5  01A9               	clrf	(Key_Drive@keylong+1)^(0+128)
  2928                           
  2929                           ;key.c: 680: KeyFlag|=(1<<(0));
  2930  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2931  02A7  142D               	bsf	_KeyFlag,0	;volatile
  2932                           
  2933                           ;key.c: 681: KeyFlag|=(1<<(2));
  2934  02A8  152D               	bsf	_KeyFlag,2	;volatile
  2935  02A9  0008               	return
  2936  02AA                     l14542:	
  2937                           
  2938                           ;key.c: 684: else if(++keycount >= 5)
  2939  02AA  3005               	movlw	5
  2940  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2941  02AC  0AC3               	incf	Key_Drive@keycount^(0+128),f
  2942  02AD  0243               	subwf	Key_Drive@keycount^(0+128),w
  2943  02AE  1C03               	skipc
  2944  02AF  0008               	return
  2945                           
  2946                           ;key.c: 685: {
  2947                           ;key.c: 686: KeyFlag|=(1<<(0));
  2948  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2949  02B1  142D               	bsf	_KeyFlag,0	;volatile
  2950                           
  2951                           ;key.c: 687: KeyFlag|=(1<<(1));
  2952  02B2  14AD               	bsf	_KeyFlag,1	;volatile
  2953  02B3  0008               	return
  2954  02B4                     l14546:	
  2955                           
  2956                           ;key.c: 690: else
  2957                           ;key.c: 691: {
  2958                           ;key.c: 692: keyold = KeyData;
  2959  02B4  0828               	movf	_KeyData+1,w	;volatile
  2960  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2961  02B6  00AB               	movwf	(Key_Drive@keyold+1)^(0+128)
  2962  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2963  02B8  0827               	movf	_KeyData,w	;volatile
  2964  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2965  02BA  00AA               	movwf	Key_Drive@keyold^(0+128)
  2966                           
  2967                           ;key.c: 693: keycount = 0;
  2968  02BB  01C3               	clrf	Key_Drive@keycount^(0+128)
  2969                           
  2970                           ;key.c: 694: }
  2971                           ;key.c: 695: }
  2972  02BC  0008               	return
  2973  02BD                     l14550:	
  2974                           
  2975                           ;key.c: 696: else
  2976                           ;key.c: 697: {
  2977                           ;key.c: 698: keycount = 0;
  2978  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  2979  02BE  3005               	movlw	5
  2980  02BF  01C3               	clrf	Key_Drive@keycount^(0+128)
  2981                           
  2982                           ;key.c: 699: keylong = 0;
  2983  02C0  01A8               	clrf	Key_Drive@keylong^(0+128)
  2984  02C1  01A9               	clrf	(Key_Drive@keylong+1)^(0+128)
  2985                           
  2986                           ;key.c: 700: if(++nkeycount >= 5)
  2987  02C2  0AC2               	incf	Key_Drive@nkeycount^(0+128),f
  2988  02C3  0242               	subwf	Key_Drive@nkeycount^(0+128),w
  2989  02C4  1C03               	skipc
  2990  02C5  0008               	return
  2991                           
  2992                           ;key.c: 701: {
  2993                           ;key.c: 703: KeyFlag = 0;
  2994  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2995  02C7  01AD               	clrf	_KeyFlag	;volatile
  2996                           
  2997                           ;key.c: 704: KeyData = 0;
  2998  02C8  01A7               	clrf	_KeyData	;volatile
  2999  02C9  01A8               	clrf	_KeyData+1	;volatile
  3000                           
  3001                           ;key.c: 705: keyold = 0;
  3002  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  3003  02CB  01AA               	clrf	Key_Drive@keyold^(0+128)
  3004  02CC  01AB               	clrf	(Key_Drive@keyold+1)^(0+128)
  3005  02CD  0008               	return
  3006  02CE                     __end_of_Key_Drive:	
  3007  02CE                     __ptext39:	
  3008 ;; *************** function _KscanIo *****************
  3009 ;; Defined at:
  3010 ;;		line 599 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;  i               1    4[BANK0 ] unsigned char 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3019 ;; Tracked objects:
  3020 ;;		On entry : 300/0
  3021 ;;		On exit  : 300/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3024 ;;      Params:         0       0       0       0       0
  3025 ;;      Locals:         0       1       0       0       0
  3026 ;;      Temps:          0       4       0       0       0
  3027 ;;      Totals:         0       5       0       0       0
  3028 ;;Total ram usage:        5 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    2
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_Key_Drive
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _KscanIo
  3040  02CE                     _KscanIo:	
  3041                           
  3042                           ;key.c: 604: {TRISB|=(1<<(1)); WPUB|=(1<<(1));};
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _KscanIo: [wreg-fsr0h+status,2+status,0]
  3046  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  3047  02CF  1486               	bsf	6,1	;volatile
  3048  02D0  1495               	bsf	21,1	;volatile
  3049                           
  3050                           ;key.c: 605: {TRISD|=(1<<(4)); WPUD|=(1<<(4));};
  3051  02D1  1608               	bsf	8,4	;volatile
  3052  02D2  1703               	bsf	3,6	;RP1=1, select bank3
  3053  02D3  1605               	bsf	5,4	;volatile
  3054                           
  3055                           ;key.c: 606: {TRISB|=(1<<(2)); WPUB|=(1<<(2));};
  3056  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  3057  02D5  1506               	bsf	6,2	;volatile
  3058  02D6  1515               	bsf	21,2	;volatile
  3059                           
  3060                           ;key.c: 607: {TRISB|=(1<<(5)); WPUB|=(1<<(5));};
  3061  02D7  1686               	bsf	6,5	;volatile
  3062  02D8  1695               	bsf	21,5	;volatile
  3063                           
  3064                           ;key.c: 609: TRISB|=(1<<(3));
  3065  02D9  1586               	bsf	6,3	;volatile
  3066                           
  3067                           ;key.c: 610: TRISB|=(1<<(4));
  3068  02DA  1606               	bsf	6,4	;volatile
  3069                           
  3070                           ;key.c: 611: TRISB|=(1<<(6));
  3071  02DB  1706               	bsf	6,6	;volatile
  3072                           
  3073                           ;key.c: 612: TRISB|=(1<<(7));
  3074  02DC  1786               	bsf	6,7	;volatile
  3075                           
  3076                           ;key.c: 614: __nop();
  3077  02DD  0000               	nop
  3078                           
  3079                           ;key.c: 615: __nop();
  3080  02DE  0000               	nop
  3081                           
  3082                           ;key.c: 616: __nop();
  3083  02DF  0000               	nop
  3084                           
  3085                           ;key.c: 617: __nop();
  3086  02E0  0000               	nop
  3087                           
  3088                           ;key.c: 618: __nop();
  3089  02E1  0000               	nop
  3090                           
  3091                           ;key.c: 621: for(i = 0; i < 4; i++)
  3092  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  3093  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  3094  02E4  01DE               	clrf	KscanIo@i
  3095  02E5  2B43               	goto	l13494
  3096  02E6                     l5915:	
  3097                           ;key.c: 624: {
  3098                           ;key.c: 625: case 0:
  3099                           
  3100                           
  3101                           ;key.c: 626: RB3 = 0;
  3102  02E6  1186               	bcf	6,3	;volatile
  3103                           
  3104                           ;key.c: 627: TRISB&=~(1<<(3));
  3105  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  3106  02E8  1186               	bcf	6,3	;volatile
  3107                           
  3108                           ;key.c: 628: break;
  3109  02E9  2AFE               	goto	l5916
  3110  02EA                     l5917:	
  3111                           ;key.c: 629: case 1:
  3112                           
  3113                           
  3114                           ;key.c: 630: TRISB|=(1<<(3));
  3115  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  3116  02EB  1586               	bsf	6,3	;volatile
  3117                           
  3118                           ;key.c: 631: RB4 = 0;
  3119  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  3120  02ED  1206               	bcf	6,4	;volatile
  3121                           
  3122                           ;key.c: 632: TRISB&=~(1<<(4));
  3123  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  3124  02EF  1206               	bcf	6,4	;volatile
  3125                           
  3126                           ;key.c: 633: break;
  3127  02F0  2AFE               	goto	l5916
  3128  02F1                     l5918:	
  3129                           ;key.c: 634: case 2:
  3130                           
  3131                           
  3132                           ;key.c: 635: TRISB|=(1<<(4));
  3133  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  3134  02F2  1606               	bsf	6,4	;volatile
  3135                           
  3136                           ;key.c: 636: RB6 = 0;
  3137  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  3138  02F4  1306               	bcf	6,6	;volatile
  3139                           
  3140                           ;key.c: 637: TRISB&=~(1<<(6));
  3141  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  3142  02F6  1306               	bcf	6,6	;volatile
  3143                           
  3144                           ;key.c: 638: break;
  3145  02F7  2AFE               	goto	l5916
  3146  02F8                     l5919:	
  3147                           ;key.c: 639: case 3:
  3148                           
  3149                           
  3150                           ;key.c: 640: TRISB|=(1<<(6));
  3151  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  3152  02F9  1706               	bsf	6,6	;volatile
  3153                           
  3154                           ;key.c: 641: RB7 = 0;
  3155  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  3156  02FB  1386               	bcf	6,7	;volatile
  3157                           
  3158                           ;key.c: 642: TRISB&=~(1<<(7));
  3159  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  3160  02FD  1386               	bcf	6,7	;volatile
  3161  02FE                     l5916:	
  3162                           ;key.c: 643: break;
  3163                           
  3164                           
  3165                           ;key.c: 647: if(!RB1)
  3166  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3167  02FF  1886               	btfsc	6,1	;volatile
  3168  0300  2B0E               	goto	l13498
  3169                           
  3170                           ;key.c: 648: KeyData|=(1<<(0+i*4));
  3171  0301  085E               	movf	KscanIo@i,w
  3172  0302  00DA               	movwf	??_KscanIo
  3173  0303  3001               	movlw	1
  3174  0304  1003               	clrc
  3175  0305                     L62:	
  3176  0305  0DDA               	rlf	??_KscanIo,f
  3177  0306  3EFF               	addlw	-1
  3178  0307  1003               	clrc
  3179  0308  1D03               	skipz
  3180  0309  2B05               	goto	L62
  3181  030A  0D5A               	rlf	??_KscanIo,w
  3182  030B  2352  120A  118A   	fcall	PL4	;call to abstracted procedure
  3183  030E                     l13498:	
  3184                           
  3185                           ;key.c: 649: if(!RD4)
  3186  030E  1A08               	btfsc	8,4	;volatile
  3187  030F  2B1E               	goto	l13502
  3188                           
  3189                           ;key.c: 650: KeyData|=(1<<(1+i*4));
  3190  0310  085E               	movf	KscanIo@i,w
  3191  0311  00DA               	movwf	??_KscanIo
  3192  0312  3001               	movlw	1
  3193  0313  1003               	clrc
  3194  0314                     L63:	
  3195  0314  0DDA               	rlf	??_KscanIo,f
  3196  0315  3EFF               	addlw	-1
  3197  0316  1003               	clrc
  3198  0317  1D03               	skipz
  3199  0318  2B14               	goto	L63
  3200  0319  0D5A               	rlf	??_KscanIo,w
  3201  031A  3E01               	addlw	1
  3202  031B  2352  120A  118A   	fcall	PL4	;call to abstracted procedure
  3203  031E                     l13502:	
  3204                           
  3205                           ;key.c: 651: if(!RB2)
  3206  031E  1906               	btfsc	6,2	;volatile
  3207  031F  2B2E               	goto	l13506
  3208                           
  3209                           ;key.c: 652: KeyData|=(1<<(2+i*4));
  3210  0320  085E               	movf	KscanIo@i,w
  3211  0321  00DA               	movwf	??_KscanIo
  3212  0322  3001               	movlw	1
  3213  0323  1003               	clrc
  3214  0324                     L64:	
  3215  0324  0DDA               	rlf	??_KscanIo,f
  3216  0325  3EFF               	addlw	-1
  3217  0326  1003               	clrc
  3218  0327  1D03               	skipz
  3219  0328  2B24               	goto	L64
  3220  0329  0D5A               	rlf	??_KscanIo,w
  3221  032A  3E02               	addlw	2
  3222  032B  2352  120A  118A   	fcall	PL4	;call to abstracted procedure
  3223  032E                     l13506:	
  3224                           
  3225                           ;key.c: 653: if(!RB5)
  3226  032E  1A86               	btfsc	6,5	;volatile
  3227  032F  2B3E               	goto	l13510
  3228                           
  3229                           ;key.c: 654: KeyData|=(1<<(3+i*4));
  3230  0330  085E               	movf	KscanIo@i,w
  3231  0331  00DA               	movwf	??_KscanIo
  3232  0332  3001               	movlw	1
  3233  0333  1003               	clrc
  3234  0334                     L65:	
  3235  0334  0DDA               	rlf	??_KscanIo,f
  3236  0335  3EFF               	addlw	-1
  3237  0336  1003               	clrc
  3238  0337  1D03               	skipz
  3239  0338  2B34               	goto	L65
  3240  0339  0D5A               	rlf	??_KscanIo,w
  3241  033A  3E03               	addlw	3
  3242  033B  2352  120A  118A   	fcall	PL4	;call to abstracted procedure
  3243  033E                     l13510:	
  3244  033E  3004               	movlw	4
  3245  033F  0ADE               	incf	KscanIo@i,f
  3246  0340  025E               	subwf	KscanIo@i,w
  3247  0341  1803               	btfsc	3,0
  3248  0342  0008               	return
  3249  0343                     l13494:	
  3250  0343  085E               	movf	KscanIo@i,w
  3251                           
  3252                           ; Switch size 1, requested type "space"
  3253                           ; Number of cases is 4, Range of values is 0 to 3
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           13     7 (average)
  3257                           ; direct_byte           20     8 (fixed)
  3258                           ; jumptable            260     6 (fixed)
  3259                           ;	Chosen strategy is simple_byte
  3260  0344  3A00               	xorlw	0	; case 0
  3261  0345  1903               	skipnz
  3262  0346  2AE6               	goto	l5915
  3263  0347  3A01               	xorlw	1	; case 1
  3264  0348  1903               	skipnz
  3265  0349  2AEA               	goto	l5917
  3266  034A  3A03               	xorlw	3	; case 2
  3267  034B  1903               	skipnz
  3268  034C  2AF1               	goto	l5918
  3269  034D  3A01               	xorlw	1	; case 3
  3270  034E  1903               	skipnz
  3271  034F  2AF8               	goto	l5919
  3272  0350  2AFE               	goto	l5916
  3273  0351  2AFE               	goto	l5916
  3274  0352                     __end_of_KscanIo:	
  3275  0352                     PL4:	
  3276  0352  00DB               	movwf	??_KscanIo+1
  3277  0353  3001               	movlw	1
  3278  0354  0ADB               	incf	??_KscanIo+1,f
  3279  0355  00DC               	movwf	??_KscanIo+2
  3280  0356  3000               	movlw	0
  3281  0357  00DD               	movwf	??_KscanIo+3
  3282  0358  2B5C               	goto	u4274
  3283  0359                     u4275:	
  3284  0359  1003               	clrc
  3285  035A  0DDC               	rlf	??_KscanIo+2,f
  3286  035B  0DDD               	rlf	??_KscanIo+3,f
  3287  035C                     u4274:	
  3288  035C  0BDB               	decfsz	??_KscanIo+1,f
  3289  035D  2B59               	goto	u4275
  3290  035E  085C               	movf	??_KscanIo+2,w
  3291  035F  04A7               	iorwf	_KeyData,f	;volatile
  3292  0360  085D               	movf	??_KscanIo+3,w
  3293  0361  04A8               	iorwf	_KeyData+1,f	;volatile
  3294  0362  0008               	return
  3295  0363                     __end_ofPL4:	
  3296                           
  3297                           	psect	text40
  3298  0363                     __ptext40:	
  3299 ;; *************** function _Init_System *****************
  3300 ;; Defined at:
  3301 ;;		line 110 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0, pclath, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : B00/0
  3312 ;;		On exit  : 300/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3315 ;;      Params:         0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0
  3318 ;;      Totals:         0       0       0       0       0
  3319 ;;Total ram usage:        0 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    3
  3322 ;; This function calls:
  3323 ;;		_DelayXms
  3324 ;;		_Init_GPIO
  3325 ;;		_Init_LED_Module
  3326 ;;		_Init_PWM
  3327 ;;		_Init_TMR1
  3328 ;;		_Init_Var
  3329 ;; This function is called by:
  3330 ;;		_main
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _Init_System
  3336  0363                     _Init_System:	
  3337                           
  3338                           ;incstack = 0
  3339                           ; Regs used in _Init_System: [wreg+status,2+status,0+pclath+cstack]
  3340  0363  0000               	nop	;# 
  3341  0364  0064               	clrwdt	;# 
  3342                           
  3343                           ;main.c: 115: INTCON = 0;
  3344  0365  018B               	clrf	11	;volatile
  3345                           
  3346                           ;main.c: 116: OSCCON = 0X71;
  3347  0366  3071               	movlw	113
  3348  0367  1683               	bsf	3,5	;RP0=1, select bank1
  3349  0368  1303               	bcf	3,6	;RP1=0, select bank1
  3350  0369  008F               	movwf	15	;volatile
  3351                           
  3352                           ;main.c: 117: OPTION_REG = 0x03;
  3353  036A  3003               	movlw	3
  3354  036B  0081               	movwf	1	;volatile
  3355                           
  3356                           ;main.c: 120: Init_GPIO();
  3357  036C  2389  120A  118A   	fcall	_Init_GPIO
  3358                           
  3359                           ;main.c: 121: Init_TMR1();
  3360  036F  23BB  120A  118A   	fcall	_Init_TMR1
  3361                           
  3362                           ;main.c: 122: Init_PWM();
  3363  0372  23AE  120A  118A   	fcall	_Init_PWM
  3364                           
  3365                           ;main.c: 123: Init_LED_Module();
  3366  0375  239F  120A  118A   	fcall	_Init_LED_Module
  3367                           
  3368                           ;main.c: 124: Init_Var();
  3369  0378  23C7  120A  118A   	fcall	_Init_Var
  3370                           
  3371                           ;main.c: 127: DelayXms(300);
  3372  037B  302C               	movlw	44
  3373  037C  00DA               	movwf	DelayXms@x
  3374  037D  3001               	movlw	1
  3375  037E  00DB               	movwf	DelayXms@x+1
  3376  037F  23D0               	fcall	_DelayXms
  3377                           
  3378                           ;main.c: 134: INTCON = 0XC0;
  3379  0380  30C0               	movlw	192
  3380  0381  008B               	movwf	11	;volatile
  3381                           
  3382                           ;main.c: 136: {{BuzCnt = 1; BuzUpTime = 250/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTim
      +                          e; BuzDownTemp = BuzDownTime;};};
  3383  0382  3001               	movlw	1
  3384  0383  00D7               	movwf	_BuzCnt	;volatile
  3385  0384  307D               	movlw	125
  3386  0385  00D6               	movwf	_BuzUpTime	;volatile
  3387  0386  120A  158A  2FD5   	ljmp	PL14	;call to abstracted procedure
  3388  0389                     __end_of_Init_System:	
  3389  0389                     __ptext45:	
  3390 ;; *************** function _Init_GPIO *****************
  3391 ;; Defined at:
  3392 ;;		line 72 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2
  3401 ;; Tracked objects:
  3402 ;;		On entry : 300/100
  3403 ;;		On exit  : 300/100
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3406 ;;      Params:         0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_Init_System
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _Init_GPIO
  3422  0389                     _Init_GPIO:	
  3423                           
  3424                           ;main.c: 76: WPUA = 0B00000000;
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _Init_GPIO: [wreg+status,2]
  3428  0389  1703               	bsf	3,6	;RP1=1, select bank3
  3429  038A  018E               	clrf	14	;volatile
  3430                           
  3431                           ;main.c: 77: WPUB = 0B00000000;
  3432  038B  1303               	bcf	3,6	;RP1=0, select bank1
  3433  038C  0195               	clrf	21	;volatile
  3434                           
  3435                           ;main.c: 78: WPUC = 0B00000000;
  3436  038D  1703               	bsf	3,6	;RP1=1, select bank3
  3437  038E  018F               	clrf	15	;volatile
  3438                           
  3439                           ;main.c: 79: WPUD = 0B00000000;
  3440  038F  0185               	clrf	5	;volatile
  3441                           
  3442                           ;main.c: 83: PORTA = 0B00000000;
  3443  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0392  0185               	clrf	5	;volatile
  3446                           
  3447                           ;main.c: 84: PORTB = 0B00000000;
  3448  0393  0186               	clrf	6	;volatile
  3449                           
  3450                           ;main.c: 85: PORTC = 0B00000000;
  3451  0394  0187               	clrf	7	;volatile
  3452                           
  3453                           ;main.c: 86: PORTD = 0B00000000;
  3454  0395  0188               	clrf	8	;volatile
  3455                           
  3456                           ;main.c: 92: TRISA = 0B11111111;
  3457  0396  30FF               	movlw	255
  3458  0397  1683               	bsf	3,5	;RP0=1, select bank1
  3459  0398  0085               	movwf	5	;volatile
  3460                           
  3461                           ;main.c: 93: TRISB = 0B11111111;
  3462  0399  0086               	movwf	6	;volatile
  3463                           
  3464                           ;main.c: 94: TRISC = 0B11111101;
  3465  039A  30FD               	movlw	253
  3466  039B  0087               	movwf	7	;volatile
  3467                           
  3468                           ;main.c: 95: TRISD = 0B11111111;
  3469  039C  30FF               	movlw	255
  3470  039D  0088               	movwf	8	;volatile
  3471  039E  0008               	return
  3472  039F                     __end_of_Init_GPIO:	
  3473  039F                     __ptext44:	
  3474 ;; *************** function _Init_LED_Module *****************
  3475 ;; Defined at:
  3476 ;;		line 817 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2
  3485 ;; Tracked objects:
  3486 ;;		On entry : 300/0
  3487 ;;		On exit  : 300/200
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         0       0       0       0       0
  3491 ;;      Locals:         0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0
  3493 ;;      Totals:         0       0       0       0       0
  3494 ;;Total ram usage:        0 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    2
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_Init_System
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _Init_LED_Module
  3506  039F                     _Init_LED_Module:	
  3507                           
  3508                           ;display.c: 820: LCDCON0 = 0B00000000;
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _Init_LED_Module: [wreg+status,2]
  3512  039F  1683               	bsf	3,5	;RP0=1, select bank3
  3513  03A0  1703               	bsf	3,6	;RP1=1, select bank3
  3514  03A1  0190               	clrf	16	;volatile
  3515                           
  3516                           ;display.c: 821: LCDCON1 = 0B11111111;
  3517  03A2  30FF               	movlw	255
  3518  03A3  0091               	movwf	17	;volatile
  3519                           
  3520                           ;display.c: 822: SEGEN0 = 0B11111111;
  3521  03A4  0096               	movwf	22	;volatile
  3522                           
  3523                           ;display.c: 823: SEGEN1 = 0B00000000;
  3524  03A5  0195               	clrf	21	;volatile
  3525                           
  3526                           ;display.c: 824: SEGEN2 = 0X70;
  3527  03A6  3070               	movlw	112
  3528  03A7  0094               	movwf	20	;volatile
  3529                           
  3530                           ;display.c: 826: LEDADD = 0X10;
  3531  03A8  3010               	movlw	16
  3532  03A9  0092               	movwf	18	;volatile
  3533                           
  3534                           ;display.c: 827: LCDCON = (0x40 | 0x02);
  3535  03AA  3042               	movlw	66
  3536  03AB  1283               	bcf	3,5	;RP0=0, select bank2
  3537  03AC  0094               	movwf	20	;volatile
  3538  03AD  0008               	return
  3539  03AE                     __end_of_Init_LED_Module:	
  3540  03AE                     __ptext43:	
  3541 ;; *************** function _Init_PWM *****************
  3542 ;; Defined at:
  3543 ;;		line 44 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;		None
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg
  3552 ;; Tracked objects:
  3553 ;;		On entry : 300/0
  3554 ;;		On exit  : 300/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3557 ;;      Params:         0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0
  3560 ;;      Totals:         0       0       0       0       0
  3561 ;;Total ram usage:        0 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    2
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_Init_System
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           
  3572                           ;psect for function _Init_PWM
  3573  03AE                     _Init_PWM:	
  3574                           
  3575                           ;main.c: 46: PR2 = 124;
  3576                           
  3577                           ;incstack = 0
  3578                           ; Regs used in _Init_PWM: [wreg]
  3579  03AE  307C               	movlw	124
  3580  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  3581  03B0  0092               	movwf	18	;volatile
  3582                           
  3583                           ;main.c: 47: CCPR0L = 0x3E;
  3584  03B1  303E               	movlw	62
  3585  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  3586  03B3  009B               	movwf	27	;volatile
  3587                           
  3588                           ;main.c: 48: PWMCON = 0b00100000;
  3589  03B4  3020               	movlw	32
  3590  03B5  009D               	movwf	29	;volatile
  3591                           
  3592                           ;main.c: 49: TMR2IF = 0;
  3593  03B6  108C               	bcf	12,1	;volatile
  3594                           
  3595                           ;main.c: 50: T2CKPS0 = 1;
  3596  03B7  1412               	bsf	18,0	;volatile
  3597                           
  3598                           ;main.c: 51: T2CKPS1 = 0;
  3599  03B8  1092               	bcf	18,1	;volatile
  3600                           
  3601                           ;main.c: 52: TMR2ON = 1;
  3602  03B9  1512               	bsf	18,2	;volatile
  3603  03BA  0008               	return
  3604  03BB                     __end_of_Init_PWM:	
  3605  03BB                     __ptext42:	
  3606 ;; *************** function _Init_TMR1 *****************
  3607 ;; Defined at:
  3608 ;;		line 63 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;		None
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg
  3617 ;; Tracked objects:
  3618 ;;		On entry : 300/100
  3619 ;;		On exit  : 300/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3622 ;;      Params:         0       0       0       0       0
  3623 ;;      Locals:         0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0
  3625 ;;      Totals:         0       0       0       0       0
  3626 ;;Total ram usage:        0 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    2
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_Init_System
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _Init_TMR1
  3638  03BB                     _Init_TMR1:	
  3639                           
  3640                           ;main.c: 65: TMR1L = 0x30;
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _Init_TMR1: [wreg]
  3644  03BB  3030               	movlw	48
  3645  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  3646  03BD  008E               	movwf	14	;volatile
  3647                           
  3648                           ;main.c: 66: TMR1H = 0xF8;
  3649  03BE  30F8               	movlw	248
  3650  03BF  008F               	movwf	15	;volatile
  3651                           
  3652                           ;main.c: 67: TMR1IF = 0;
  3653  03C0  100C               	bcf	12,0	;volatile
  3654                           
  3655                           ;main.c: 68: TMR1IE = 1;
  3656  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  3657  03C2  140C               	bsf	12,0	;volatile
  3658                           
  3659                           ;main.c: 69: T1CON = 0x01;
  3660  03C3  3001               	movlw	1
  3661  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  3662  03C5  0090               	movwf	16	;volatile
  3663  03C6  0008               	return
  3664  03C7                     __end_of_Init_TMR1:	
  3665  03C7                     __ptext41:	
  3666 ;; *************** function _Init_Var *****************
  3667 ;; Defined at:
  3668 ;;		line 100 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg
  3677 ;; Tracked objects:
  3678 ;;		On entry : 300/200
  3679 ;;		On exit  : 300/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3682 ;;      Params:         0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0
  3685 ;;      Totals:         0       0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    2
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_Init_System
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _Init_Var
  3698  03C7                     _Init_Var:	
  3699                           
  3700                           ;main.c: 103: SysStatus = 6;
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in _Init_Var: [wreg]
  3704  03C7  3006               	movlw	6
  3705  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  3706  03C9  00EA               	movwf	_SysStatus	;volatile
  3707                           
  3708                           ;main.c: 104: AC_Vol_Rms = 220;
  3709  03CA  30DC               	movlw	220
  3710  03CB  00E7               	movwf	_AC_Vol_Rms	;volatile
  3711  03CC  01E8               	clrf	_AC_Vol_Rms+1	;volatile
  3712                           
  3713                           ;main.c: 105: Vrms_Level = 3;
  3714  03CD  3003               	movlw	3
  3715  03CE  00E9               	movwf	_Vrms_Level	;volatile
  3716  03CF  0008               	return
  3717  03D0                     __end_of_Init_Var:	
  3718  03D0                     __ptext46:	
  3719 ;; *************** function _DelayXms *****************
  3720 ;; Defined at:
  3721 ;;		line 10 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\delay.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  x               2    0[BANK0 ] unsigned int 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  i               1    2[BANK0 ] unsigned char 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0
  3730 ;; Tracked objects:
  3731 ;;		On entry : 300/0
  3732 ;;		On exit  : 300/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3735 ;;      Params:         0       2       0       0       0
  3736 ;;      Locals:         0       1       0       0       0
  3737 ;;      Temps:          0       0       0       0       0
  3738 ;;      Totals:         0       3       0       0       0
  3739 ;;Total ram usage:        3 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    2
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_Init_System
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _DelayXms
  3751  03D0                     _DelayXms:	
  3752                           
  3753                           ;delay.c: 12: unsigned char i = 0;;
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
  3757  03D0  01DC               	clrf	DelayXms@i
  3758  03D1                     l15366:	
  3759                           ;delay.c: 14: while(x--)
  3760                           
  3761  03D1  3001               	movlw	1
  3762  03D2  02DA               	subwf	DelayXms@x,f
  3763  03D3  3000               	movlw	0
  3764  03D4  1C03               	skipc
  3765  03D5  03DB               	decf	DelayXms@x+1,f
  3766  03D6  02DB               	subwf	DelayXms@x+1,f
  3767  03D7  0F5A               	incfsz	DelayXms@x,w
  3768  03D8  2BDC               	goto	l2924
  3769  03D9  0A5B               	incf	DelayXms@x+1,w
  3770  03DA  1903               	btfsc	3,2
  3771  03DB  0008               	return
  3772  03DC                     l2924:	
  3773  03DC  0064               	clrwdt	;# 
  3774                           
  3775                           ;delay.c: 17: while(--i)
  3776  03DD  2BE3               	goto	l2925
  3777  03DE                     l2926:	
  3778  03DE  0000               	nop	;# 
  3779  03DF  0000               	nop	;# 
  3780  03E0  0000               	nop	;# 
  3781  03E1  0000               	nop	;# 
  3782  03E2  0000               	nop	;# 
  3783  03E3                     l2925:	
  3784  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  3785  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  3786  03E5  0BDC               	decfsz	DelayXms@i,f
  3787  03E6  2BDE               	goto	l2926
  3788  03E7  2BD1               	goto	l15366
  3789  03E8                     __end_of_DelayXms:	
  3790                           
  3791                           	psect	text47
  3792  054D                     __ptext47:	
  3793 ;; *************** function _Get_Temp_Data *****************
  3794 ;; Defined at:
  3795 ;;		line 353 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3804 ;; Tracked objects:
  3805 ;;		On entry : 200/0
  3806 ;;		On exit  : 300/100
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3809 ;;      Params:         0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0
  3811 ;;      Temps:          0       2       0       0       0
  3812 ;;      Totals:         0       2       0       0       0
  3813 ;;Total ram usage:        2 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    2
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _Get_Temp_Data
  3825  054D                     _Get_Temp_Data:	
  3826                           
  3827                           ;adc.c: 355: static v_uint8 s_admax = 0x00;
  3828                           ;adc.c: 356: static v_uint8 s_admin = 0xFF;
  3829                           ;adc.c: 357: static v_uint16 s_adsum = 0;
  3830                           ;adc.c: 358: static v_uint8 s_adtimes = 0;
  3831                           ;adc.c: 360: s_adsum += Ad_Bot_Raw;
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _Get_Temp_Data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3835  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3836  054E  0850               	movf	_Ad_Bot_Raw,w	;volatile
  3837  054F  1683               	bsf	3,5	;RP0=1, select bank1
  3838  0550  07AE               	addwf	Get_Temp_Data@s_adsum^(0+128),f	;volatile
  3839  0551  1803               	skipnc
  3840  0552  0AAF               	incf	(Get_Temp_Data@s_adsum+1)^(0+128),f	;volatile
  3841                           
  3842                           ;adc.c: 363: if(Ad_Bot_Raw > s_admax)
  3843  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0554  0850               	movf	_Ad_Bot_Raw,w	;volatile
  3845  0555  0247               	subwf	Get_Temp_Data@s_admax,w	;volatile
  3846  0556  1803               	skipnc
  3847  0557  2D5A               	goto	l948
  3848                           
  3849                           ;adc.c: 364: {
  3850                           ;adc.c: 365: s_admax = Ad_Bot_Raw;
  3851  0558  0850               	movf	_Ad_Bot_Raw,w	;volatile
  3852  0559  00C7               	movwf	Get_Temp_Data@s_admax	;volatile
  3853  055A                     l948:	
  3854                           
  3855                           ;adc.c: 366: }
  3856                           ;adc.c: 367: if(Ad_Bot_Raw < s_admin)
  3857  055A  086B               	movf	Get_Temp_Data@s_admin,w	;volatile
  3858  055B  0250               	subwf	_Ad_Bot_Raw,w	;volatile
  3859  055C  1803               	skipnc
  3860  055D  2D60               	goto	l15782
  3861                           
  3862                           ;adc.c: 368: {
  3863                           ;adc.c: 369: s_admin = Ad_Bot_Raw;
  3864  055E  0850               	movf	_Ad_Bot_Raw,w	;volatile
  3865  055F  00EB               	movwf	Get_Temp_Data@s_admin	;volatile
  3866  0560                     l15782:	
  3867                           
  3868                           ;adc.c: 370: }
  3869                           ;adc.c: 373: if(++s_adtimes >= 18)
  3870  0560  3012               	movlw	18
  3871  0561  1683               	bsf	3,5	;RP0=1, select bank1
  3872  0562  0ACF               	incf	Get_Temp_Data@s_adtimes^(0+128),f	;volatile
  3873  0563  024F               	subwf	Get_Temp_Data@s_adtimes^(0+128),w	;volatile
  3874  0564  1C03               	skipc
  3875  0565  2DA2               	goto	l15806
  3876                           
  3877                           ;adc.c: 374: {
  3878                           ;adc.c: 375: s_adsum -= s_admax;
  3879  0566  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0567  0847               	movf	Get_Temp_Data@s_admax,w	;volatile
  3881  0568  1683               	bsf	3,5	;RP0=1, select bank1
  3882  0569  02AE               	subwf	Get_Temp_Data@s_adsum^(0+128),f	;volatile
  3883  056A  1C03               	skipc
  3884  056B  03AF               	decf	(Get_Temp_Data@s_adsum+1)^(0+128),f	;volatile
  3885                           
  3886                           ;adc.c: 376: s_adsum -= s_admin;
  3887  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3888  056D  086B               	movf	Get_Temp_Data@s_admin,w	;volatile
  3889  056E  1683               	bsf	3,5	;RP0=1, select bank1
  3890  056F  02AE               	subwf	Get_Temp_Data@s_adsum^(0+128),f	;volatile
  3891  0570  1C03               	skipc
  3892  0571  03AF               	decf	(Get_Temp_Data@s_adsum+1)^(0+128),f	;volatile
  3893                           
  3894                           ;adc.c: 378: Ad_Bot = (v_uint8) (s_adsum>>4);
  3895  0572  082F               	movf	(Get_Temp_Data@s_adsum+1)^(0+128),w	;volatile
  3896  0573  1283               	bcf	3,5	;RP0=0, select bank0
  3897  0574  00DB               	movwf	??_Get_Temp_Data+1
  3898  0575  1683               	bsf	3,5	;RP0=1, select bank1
  3899  0576  082E               	movf	Get_Temp_Data@s_adsum^(0+128),w	;volatile
  3900  0577  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0578  00DA               	movwf	??_Get_Temp_Data
  3902  0579  3004               	movlw	4
  3903  057A                     u7735:	
  3904  057A  1003               	clrc
  3905  057B  0CDB               	rrf	??_Get_Temp_Data+1,f
  3906  057C  0CDA               	rrf	??_Get_Temp_Data,f
  3907  057D  3EFF               	addlw	-1
  3908  057E  1D03               	skipz
  3909  057F  2D7A               	goto	u7735
  3910  0580  085A               	movf	??_Get_Temp_Data,w
  3911  0581  00CF               	movwf	_Ad_Bot	;volatile
  3912                           
  3913                           ;adc.c: 380: if(Ad_Bot > 245)
  3914  0582  30F6               	movlw	246
  3915  0583  024F               	subwf	_Ad_Bot,w	;volatile
  3916  0584  1C03               	skipc
  3917  0585  2D88               	goto	l15792
  3918                           
  3919                           ;adc.c: 381: {
  3920                           ;adc.c: 382: Bot_Temp = 223;
  3921  0586  30DF               	movlw	223
  3922  0587  2D98               	goto	L66
  3923  0588                     l15792:	
  3924                           ;adc.c: 383: }
  3925                           
  3926                           
  3927                           ;adc.c: 384: else if(Ad_Bot < 8)
  3928  0588  3008               	movlw	8
  3929  0589  024F               	subwf	_Ad_Bot,w	;volatile
  3930  058A  1803               	skipnc
  3931  058B  2D8E               	goto	l15796
  3932                           
  3933                           ;adc.c: 385: {
  3934                           ;adc.c: 386: Bot_Temp = 0;
  3935  058C  01CE               	clrf	_Bot_Temp	;volatile
  3936                           
  3937                           ;adc.c: 387: }
  3938  058D  2D99               	goto	l15798
  3939  058E                     l15796:	
  3940                           
  3941                           ;adc.c: 388: else
  3942                           ;adc.c: 389: {
  3943                           ;adc.c: 390: Bot_Temp = REF_TEMP_TAB[Ad_Bot];
  3944  058E  084F               	movf	_Ad_Bot,w
  3945  058F  3E12               	addlw	low (_REF_TEMP_TAB| (0+32768))
  3946  0590  0084               	movwf	4
  3947  0591  3098               	movlw	high (_REF_TEMP_TAB| (0+32768))
  3948  0592  1803               	skipnc
  3949  0593  3E01               	addlw	1
  3950  0594  00FF               	movwf	127
  3951  0595  160A  158A  2000   	fcall	stringtab
  3952  0598                     L66:	
  3953  0598  00CE               	movwf	_Bot_Temp	;volatile
  3954  0599                     l15798:	
  3955                           
  3956                           ;adc.c: 391: }
  3957                           ;adc.c: 393: s_adtimes = 0;
  3958  0599  1683               	bsf	3,5	;RP0=1, select bank1
  3959  059A  01CF               	clrf	Get_Temp_Data@s_adtimes^(0+128)	;volatile
  3960                           
  3961                           ;adc.c: 394: s_admax = 0x00;
  3962  059B  1283               	bcf	3,5	;RP0=0, select bank0
  3963  059C  01C7               	clrf	Get_Temp_Data@s_admax	;volatile
  3964                           
  3965                           ;adc.c: 395: s_admin = 0xFF;
  3966  059D  30FF               	movlw	255
  3967  059E  00EB               	movwf	Get_Temp_Data@s_admin	;volatile
  3968                           
  3969                           ;adc.c: 396: s_adsum = 0;
  3970  059F  1683               	bsf	3,5	;RP0=1, select bank1
  3971  05A0  01AE               	clrf	Get_Temp_Data@s_adsum^(0+128)	;volatile
  3972  05A1  01AF               	clrf	(Get_Temp_Data@s_adsum+1)^(0+128)	;volatile
  3973  05A2                     l15806:	
  3974                           
  3975                           ;adc.c: 397: }
  3976                           ;adc.c: 399: b_AdBot_OK = 0;
  3977  05A2  13F1               	bcf	_b_AdBot_OK/(0+8),_b_AdBot_OK& (0+7)	;volatile
  3978  05A3  0008               	return
  3979  05A4                     __end_of_Get_Temp_Data:	
  3980                           
  3981                           	psect	text49
  3982  1002                     __ptext49:	
  3983 ;; *************** function _Get_AC_Rms *****************
  3984 ;; Defined at:
  3985 ;;		line 180 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;		None
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  1    wreg      void 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2, status,0, pclath, cstack
  3994 ;; Tracked objects:
  3995 ;;		On entry : 300/0
  3996 ;;		On exit  : 200/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3999 ;;      Params:         0       0       0       0       0
  4000 ;;      Locals:         0       0       0       0       0
  4001 ;;      Temps:          0       2       0       0       0
  4002 ;;      Totals:         0       2       0       0       0
  4003 ;;Total ram usage:        2 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    3
  4006 ;; This function calls:
  4007 ;;		___lwdiv
  4008 ;; This function is called by:
  4009 ;;		_main
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function _Get_AC_Rms
  4015  1002                     _Get_AC_Rms:	
  4016                           
  4017                           ;adc.c: 182: static v_uint8 s_maxvol = 0x00;
  4018                           ;adc.c: 183: static v_uint8 s_minvol = 0xFF;
  4019                           ;adc.c: 184: static v_uint16 s_sumvol = 0;
  4020                           ;adc.c: 185: static v_uint8 s_voltimes = 0;
  4021                           ;adc.c: 187: Ad_Vol_Raw = (v_uint8) (Ad_Vol_Sum/400);
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _Get_AC_Rms: [wreg+status,2+status,0+pclath+cstack]
  4025  1002  3090               	movlw	144
  4026  1003  00DA               	movwf	___lwdiv@divisor
  4027  1004  3001               	movlw	1
  4028  1005  00DB               	movwf	___lwdiv@divisor+1
  4029  1006  1683               	bsf	3,5	;RP0=1, select bank1
  4030  1007  083B               	movf	(_Ad_Vol_Sum+1)^(0+128),w	;volatile
  4031  1008  1283               	bcf	3,5	;RP0=0, select bank0
  4032  1009  00DD               	movwf	___lwdiv@dividend+1
  4033  100A  1683               	bsf	3,5	;RP0=1, select bank1
  4034  100B  083A               	movf	_Ad_Vol_Sum^(0+128),w	;volatile
  4035  100C  1283               	bcf	3,5	;RP0=0, select bank0
  4036  100D  00DC               	movwf	___lwdiv@dividend
  4037  100E  2329  160A  118A   	fcall	___lwdiv
  4038  1011  085A               	movf	?___lwdiv,w
  4039  1012  00FC               	movwf	_Ad_Vol_Raw	;volatile
  4040                           
  4041                           ;adc.c: 188: Ad_Vol_Sum = 0;
  4042  1013  1683               	bsf	3,5	;RP0=1, select bank1
  4043  1014  01BA               	clrf	_Ad_Vol_Sum^(0+128)	;volatile
  4044  1015  01BB               	clrf	(_Ad_Vol_Sum+1)^(0+128)	;volatile
  4045                           
  4046                           ;adc.c: 190: s_sumvol += Ad_Vol_Raw;
  4047  1016  087C               	movf	_Ad_Vol_Raw,w	;volatile
  4048  1017  07B2               	addwf	Get_AC_Rms@s_sumvol^(0+128),f	;volatile
  4049  1018  1803               	skipnc
  4050  1019  0AB3               	incf	(Get_AC_Rms@s_sumvol+1)^(0+128),f	;volatile
  4051                           
  4052                           ;adc.c: 193: if(Ad_Vol_Raw > s_maxvol)
  4053  101A  087C               	movf	_Ad_Vol_Raw,w	;volatile
  4054  101B  1283               	bcf	3,5	;RP0=0, select bank0
  4055  101C  024C               	subwf	Get_AC_Rms@s_maxvol,w	;volatile
  4056  101D  1803               	skipnc
  4057  101E  2821               	goto	l900
  4058                           
  4059                           ;adc.c: 194: {
  4060                           ;adc.c: 195: s_maxvol = Ad_Vol_Raw;
  4061  101F  087C               	movf	_Ad_Vol_Raw,w	;volatile
  4062  1020  00CC               	movwf	Get_AC_Rms@s_maxvol	;volatile
  4063  1021                     l900:	
  4064                           
  4065                           ;adc.c: 196: }
  4066                           ;adc.c: 197: if(Ad_Vol_Raw < s_minvol)
  4067  1021  086C               	movf	Get_AC_Rms@s_minvol,w	;volatile
  4068  1022  027C               	subwf	_Ad_Vol_Raw,w	;volatile
  4069  1023  1803               	skipnc
  4070  1024  2827               	goto	l16912
  4071                           
  4072                           ;adc.c: 198: {
  4073                           ;adc.c: 199: s_minvol = Ad_Vol_Raw;
  4074  1025  087C               	movf	_Ad_Vol_Raw,w	;volatile
  4075  1026  00EC               	movwf	Get_AC_Rms@s_minvol	;volatile
  4076  1027                     l16912:	
  4077                           
  4078                           ;adc.c: 200: }
  4079                           ;adc.c: 202: if(++s_voltimes >= 6)
  4080  1027  3006               	movlw	6
  4081  1028  0ACB               	incf	Get_AC_Rms@s_voltimes,f	;volatile
  4082  1029  024B               	subwf	Get_AC_Rms@s_voltimes,w	;volatile
  4083  102A  1C03               	skipc
  4084  102B  288B               	goto	l16952
  4085                           
  4086                           ;adc.c: 203: {
  4087                           ;adc.c: 204: s_sumvol -= s_maxvol;
  4088  102C  084C               	movf	Get_AC_Rms@s_maxvol,w	;volatile
  4089  102D  1683               	bsf	3,5	;RP0=1, select bank1
  4090  102E  02B2               	subwf	Get_AC_Rms@s_sumvol^(0+128),f	;volatile
  4091  102F  1C03               	skipc
  4092  1030  03B3               	decf	(Get_AC_Rms@s_sumvol+1)^(0+128),f	;volatile
  4093                           
  4094                           ;adc.c: 205: s_sumvol -= s_minvol;
  4095  1031  1283               	bcf	3,5	;RP0=0, select bank0
  4096  1032  086C               	movf	Get_AC_Rms@s_minvol,w	;volatile
  4097  1033  1683               	bsf	3,5	;RP0=1, select bank1
  4098  1034  02B2               	subwf	Get_AC_Rms@s_sumvol^(0+128),f	;volatile
  4099  1035  1C03               	skipc
  4100  1036  03B3               	decf	(Get_AC_Rms@s_sumvol+1)^(0+128),f	;volatile
  4101                           
  4102                           ;adc.c: 207: Ad_Vol_Avg = (v_uint8) (s_sumvol>>2);
  4103  1037  0833               	movf	(Get_AC_Rms@s_sumvol+1)^(0+128),w	;volatile
  4104  1038  1283               	bcf	3,5	;RP0=0, select bank0
  4105  1039  00E2               	movwf	??_Get_AC_Rms+1
  4106  103A  1683               	bsf	3,5	;RP0=1, select bank1
  4107  103B  0832               	movf	Get_AC_Rms@s_sumvol^(0+128),w	;volatile
  4108  103C  1283               	bcf	3,5	;RP0=0, select bank0
  4109  103D  00E1               	movwf	??_Get_AC_Rms
  4110  103E  1003               	clrc
  4111  103F  0CE2               	rrf	??_Get_AC_Rms+1,f
  4112  1040  0CE1               	rrf	??_Get_AC_Rms,f
  4113  1041  1003               	clrc
  4114  1042  0CE2               	rrf	??_Get_AC_Rms+1,f
  4115  1043  0CE1               	rrf	??_Get_AC_Rms,f
  4116  1044  0861               	movf	??_Get_AC_Rms,w
  4117  1045  00D1               	movwf	_Ad_Vol_Avg	;volatile
  4118                           
  4119                           ;adc.c: 209: if(Ad_Vol_Avg > 66)
  4120  1046  3043               	movlw	67
  4121  1047  0251               	subwf	_Ad_Vol_Avg,w	;volatile
  4122  1048  1C03               	skipc
  4123  1049  284F               	goto	l16922
  4124                           
  4125                           ;adc.c: 210: {
  4126                           ;adc.c: 211: AC_Vol_Rms = 265;
  4127  104A  3009               	movlw	9
  4128  104B  00E7               	movwf	_AC_Vol_Rms	;volatile
  4129  104C  3001               	movlw	1
  4130  104D  00E8               	movwf	_AC_Vol_Rms+1	;volatile
  4131                           
  4132                           ;adc.c: 212: }
  4133  104E  2860               	goto	l16930
  4134  104F                     l16922:	
  4135                           
  4136                           ;adc.c: 213: else if(Ad_Vol_Avg < 39)
  4137  104F  3027               	movlw	39
  4138  1050  0251               	subwf	_Ad_Vol_Avg,w	;volatile
  4139  1051  1803               	skipnc
  4140  1052  2857               	goto	l16926
  4141                           
  4142                           ;adc.c: 214: {
  4143                           ;adc.c: 215: AC_Vol_Rms = 155;
  4144  1053  309B               	movlw	155
  4145  1054  00E7               	movwf	_AC_Vol_Rms	;volatile
  4146  1055  01E8               	clrf	_AC_Vol_Rms+1	;volatile
  4147                           
  4148                           ;adc.c: 216: }
  4149  1056  2860               	goto	l16930
  4150  1057                     l16926:	
  4151                           
  4152                           ;adc.c: 217: else
  4153                           ;adc.c: 218: {
  4154                           ;adc.c: 219: AC_Vol_Rms = Ad_Vol_Avg*4;
  4155  1057  0851               	movf	_Ad_Vol_Avg,w	;volatile
  4156  1058  00E7               	movwf	_AC_Vol_Rms	;volatile
  4157  1059  01E8               	clrf	_AC_Vol_Rms+1	;volatile
  4158  105A  1003               	clrc
  4159  105B  0DE7               	rlf	_AC_Vol_Rms,f	;volatile
  4160  105C  0DE8               	rlf	_AC_Vol_Rms+1,f
  4161  105D  1003               	clrc
  4162  105E  0DE7               	rlf	_AC_Vol_Rms,f	;volatile
  4163  105F  0DE8               	rlf	_AC_Vol_Rms+1,f	;volatile
  4164  1060                     l16930:	
  4165                           
  4166                           ;adc.c: 220: }
  4167                           ;adc.c: 223: if(AC_Vol_Rms <= 190)
  4168  1060  3000               	movlw	0
  4169  1061  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  4170  1062  30BF               	movlw	191
  4171  1063  1903               	skipnz
  4172  1064  0267               	subwf	_AC_Vol_Rms,w	;volatile
  4173  1065  1803               	skipnc
  4174  1066  2869               	goto	l16934
  4175                           
  4176                           ;adc.c: 224: {
  4177                           ;adc.c: 225: Vrms_Level = 1;
  4178  1067  3001               	movlw	1
  4179  1068  2883               	goto	L69
  4180  1069                     l16934:	
  4181                           ;adc.c: 226: }
  4182                           
  4183                           
  4184                           ;adc.c: 227: else if(AC_Vol_Rms <= 210)
  4185  1069  3000               	movlw	0
  4186  106A  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  4187  106B  30D3               	movlw	211
  4188  106C  1903               	skipnz
  4189  106D  0267               	subwf	_AC_Vol_Rms,w	;volatile
  4190  106E  1803               	skipnc
  4191  106F  2872               	goto	l16938
  4192                           
  4193                           ;adc.c: 228: {
  4194                           ;adc.c: 229: Vrms_Level = 2;
  4195  1070  3002               	movlw	2
  4196  1071  2883               	goto	L69
  4197  1072                     l16938:	
  4198                           ;adc.c: 230: }
  4199                           
  4200                           
  4201                           ;adc.c: 231: else if(AC_Vol_Rms <= 235)
  4202  1072  3000               	movlw	0
  4203  1073  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  4204  1074  30EC               	movlw	236
  4205  1075  1903               	skipnz
  4206  1076  0267               	subwf	_AC_Vol_Rms,w	;volatile
  4207  1077  1803               	skipnc
  4208  1078  287B               	goto	l16942
  4209                           
  4210                           ;adc.c: 232: {
  4211                           ;adc.c: 233: Vrms_Level = 3;
  4212  1079  3003               	movlw	3
  4213  107A  2883               	goto	L69
  4214  107B                     l16942:	
  4215                           ;adc.c: 234: }
  4216                           
  4217                           
  4218                           ;adc.c: 235: else if(AC_Vol_Rms <= 265)
  4219  107B  3001               	movlw	1
  4220  107C  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  4221  107D  300A               	movlw	10
  4222  107E  1903               	skipnz
  4223  107F  0267               	subwf	_AC_Vol_Rms,w	;volatile
  4224  1080  1803               	skipnc
  4225  1081  2884               	goto	l16946
  4226                           
  4227                           ;adc.c: 236: {
  4228                           ;adc.c: 237: Vrms_Level = 4;
  4229  1082  3004               	movlw	4
  4230  1083                     L69:	
  4231  1083  00E9               	movwf	_Vrms_Level	;volatile
  4232  1084                     l16946:	
  4233                           
  4234                           ;adc.c: 238: }
  4235                           ;adc.c: 240: s_voltimes = 0;
  4236  1084  01CB               	clrf	Get_AC_Rms@s_voltimes	;volatile
  4237                           
  4238                           ;adc.c: 241: s_maxvol = 0x00;
  4239  1085  01CC               	clrf	Get_AC_Rms@s_maxvol	;volatile
  4240                           
  4241                           ;adc.c: 242: s_minvol = 0xFF;
  4242  1086  30FF               	movlw	255
  4243  1087  00EC               	movwf	Get_AC_Rms@s_minvol	;volatile
  4244                           
  4245                           ;adc.c: 243: s_sumvol = 0;
  4246  1088  1683               	bsf	3,5	;RP0=1, select bank1
  4247  1089  01B2               	clrf	Get_AC_Rms@s_sumvol^(0+128)	;volatile
  4248  108A  01B3               	clrf	(Get_AC_Rms@s_sumvol+1)^(0+128)	;volatile
  4249  108B                     l16952:	
  4250                           
  4251                           ;adc.c: 245: }
  4252                           ;adc.c: 247: b_VolData_OK = 0;
  4253  108B  1272               	bcf	_b_VolData_OK/(0+8),_b_VolData_OK& (0+7)	;volatile
  4254  108C  0008               	return
  4255  108D                     __end_of_Get_AC_Rms:	
  4256  108D                     __ptext6:	
  4257 ;; *************** function _PresetTimeStart *****************
  4258 ;; Defined at:
  4259 ;;		line 76 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 300/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4273 ;;      Params:         0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0
  4275 ;;      Temps:          0       1       0       0       0
  4276 ;;      Totals:         0       1       0       0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    3
  4280 ;; This function calls:
  4281 ;;		___awdiv
  4282 ;;		___awmod
  4283 ;; This function is called by:
  4284 ;;		_Time_Deal
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _PresetTimeStart
  4290  108D                     _PresetTimeStart:	
  4291                           
  4292                           ;time.c: 78: if(SysStatus == 3)
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _PresetTimeStart: [wreg+status,2+status,0+pclath+cstack]
  4296  108D  3003               	movlw	3
  4297  108E  066A               	xorwf	_SysStatus,w	;volatile
  4298  108F  1903               	btfsc	3,2
  4299                           
  4300                           ;time.c: 79: {
  4301                           ;time.c: 80: if(WorkStage == 1)
  4302  1090  0B3F               	decfsz	_WorkStage,w	;volatile
  4303  1091  0008               	return
  4304                           
  4305                           ;time.c: 81: {
  4306                           ;time.c: 82: if((++PresetTimeS) >= 120)
  4307  1092  3078               	movlw	120
  4308  1093  0AAC               	incf	_PresetTimeS,f	;volatile
  4309  1094  022C               	subwf	_PresetTimeS,w	;volatile
  4310  1095  1C03               	skipc
  4311  1096  289F               	goto	l15710
  4312                           
  4313                           ;time.c: 83: {
  4314                           ;time.c: 84: PresetTimeS = 0;
  4315  1097  01AC               	clrf	_PresetTimeS	;volatile
  4316                           
  4317                           ;time.c: 85: if(PresetTimeM <= 0)
  4318  1098  0835               	movf	_PresetTimeM,w	;volatile
  4319  1099  1D03               	btfss	3,2
  4320  109A  289E               	goto	l15708
  4321                           
  4322                           ;time.c: 86: {
  4323                           ;time.c: 87: PresetTimeM = 60;
  4324  109B  303C               	movlw	60
  4325  109C  00B5               	movwf	_PresetTimeM	;volatile
  4326                           
  4327                           ;time.c: 88: PresetTimeH--;
  4328  109D  03B6               	decf	_PresetTimeH,f	;volatile
  4329  109E                     l15708:	
  4330                           
  4331                           ;time.c: 89: }
  4332                           ;time.c: 90: PresetTimeM--;
  4333  109E  03B5               	decf	_PresetTimeM,f	;volatile
  4334  109F                     l15710:	
  4335                           
  4336                           ;time.c: 91: }
  4337                           ;time.c: 92: if(PresetTimeH <= ((50+CountDownTime)/60) && PresetTimeM <= ((50+CountDownT
      +                          ime)%60) && PresetTimeS >= 2)
  4338  109F  0840               	movf	_CountDownTime,w	;volatile
  4339  10A0  00DC               	movwf	___awdiv@dividend
  4340  10A1  3032               	movlw	50
  4341  10A2  27D7  160A  118A   	fcall	PL24	;call to abstracted procedure
  4342  10A5  2353  160A  118A   	fcall	___awdiv
  4343  10A8  085B               	movf	?___awdiv+1,w
  4344  10A9  3A80               	xorlw	128
  4345  10AA  00E2               	movwf	??_PresetTimeStart
  4346  10AB  3080               	movlw	128
  4347  10AC  0262               	subwf	??_PresetTimeStart,w
  4348  10AD  1D03               	skipz
  4349  10AE  28B1               	goto	u7585
  4350  10AF  0836               	movf	_PresetTimeH,w	;volatile
  4351  10B0  025A               	subwf	?___awdiv,w
  4352  10B1                     u7585:	
  4353  10B1  1C03               	skipc
  4354  10B2  0008               	return
  4355  10B3  1283               	bcf	3,5	;RP0=0, select bank0
  4356  10B4  1303               	bcf	3,6	;RP1=0, select bank0
  4357  10B5  0840               	movf	_CountDownTime,w	;volatile
  4358  10B6  00DC               	movwf	___awmod@dividend
  4359  10B7  3032               	movlw	50
  4360  10B8  27DF  160A  118A   	fcall	PL26	;call to abstracted procedure
  4361  10BB  2398  160A  118A   	fcall	___awmod
  4362  10BE  085B               	movf	?___awmod+1,w
  4363  10BF  3A80               	xorlw	128
  4364  10C0  00E2               	movwf	??_PresetTimeStart
  4365  10C1  3080               	movlw	128
  4366  10C2  0262               	subwf	??_PresetTimeStart,w
  4367  10C3  1D03               	skipz
  4368  10C4  28C7               	goto	u7595
  4369  10C5  0835               	movf	_PresetTimeM,w	;volatile
  4370  10C6  025A               	subwf	?___awmod,w
  4371  10C7                     u7595:	
  4372  10C7  1C03               	skipc
  4373  10C8  0008               	return
  4374  10C9  3002               	movlw	2
  4375  10CA  1283               	bcf	3,5	;RP0=0, select bank0
  4376  10CB  1303               	bcf	3,6	;RP1=0, select bank0
  4377  10CC  022C               	subwf	_PresetTimeS,w	;volatile
  4378  10CD  1C03               	skipc
  4379  10CE  0008               	return
  4380                           
  4381                           ;time.c: 93: {
  4382                           ;time.c: 94: WorkStage = 2;
  4383  10CF  3002               	movlw	2
  4384  10D0  00BF               	movwf	_WorkStage	;volatile
  4385                           
  4386                           ;time.c: 95: PresetTimeH = 0;
  4387  10D1  01B6               	clrf	_PresetTimeH	;volatile
  4388                           
  4389                           ;time.c: 96: PresetTimeM = 0;
  4390  10D2  01B5               	clrf	_PresetTimeM	;volatile
  4391                           
  4392                           ;time.c: 97: {{BuzCnt = 3; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
  4393  10D3  3003               	movlw	3
  4394  10D4  00D7               	movwf	_BuzCnt	;volatile
  4395  10D5  3019               	movlw	25
  4396  10D6  120A  158A  2F88   	ljmp	PL2	;call to abstracted procedure
  4397  10D9                     __end_of_PresetTimeStart:	
  4398  10D9                     __ptext22:	
  4399 ;; *************** function _Fun_Choose_Show *****************
  4400 ;; Defined at:
  4401 ;;		line 168 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : B00/0
  4412 ;;		On exit  : 300/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4415 ;;      Params:         0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0
  4418 ;;      Totals:         0       0       0       0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    4
  4422 ;; This function calls:
  4423 ;;		_DIG_Show_Time
  4424 ;;		___awdiv
  4425 ;;		___awmod
  4426 ;;		___lbdiv
  4427 ;;		___lbmod
  4428 ;; This function is called by:
  4429 ;;		_LED_Task
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function _Fun_Choose_Show
  4435  10D9                     _Fun_Choose_Show:	
  4436                           
  4437                           ;display.c: 171: if(b_LedCol)
  4438                           
  4439                           ;incstack = 0
  4440                           ; Regs used in _Fun_Choose_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4441  10D9  1AF0               	btfsc	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  4442  10DA  28F8               	goto	l15374
  4443  10DB  2924               	goto	l15376
  4444  10DC                     l3837:	
  4445                           ;display.c: 174: {
  4446                           ;display.c: 175: case 1 : (DispData[4] |= 0x01); break;
  4447                           
  4448  10DC  1424               	bsf	_DispData+4,0	;volatile
  4449  10DD  2924               	goto	l15376
  4450  10DE                     l3839:	
  4451                           ;display.c: 176: case 2 : (DispData[5] |= 0x01); break;
  4452                           
  4453  10DE  1425               	bsf	_DispData+5,0	;volatile
  4454  10DF  2924               	goto	l15376
  4455  10E0                     l3840:	
  4456                           ;display.c: 177: case 3 : (DispData[4] |= 0x40); break;
  4457                           
  4458  10E0  1724               	bsf	_DispData+4,6	;volatile
  4459  10E1  2924               	goto	l15376
  4460  10E2                     l3841:	
  4461                           ;display.c: 178: case 4 : (DispData[5] |= 0x40); break;
  4462                           
  4463  10E2  1725               	bsf	_DispData+5,6	;volatile
  4464  10E3  2924               	goto	l15376
  4465  10E4                     l3842:	
  4466                           ;display.c: 180: case 5 : (DispData[5] |= 0x08); break;
  4467                           
  4468  10E4  15A5               	bsf	_DispData+5,3	;volatile
  4469  10E5  2924               	goto	l15376
  4470  10E6                     l3843:	
  4471                           ;display.c: 181: case 6 : (DispData[5] |= 0x04); break;
  4472                           
  4473  10E6  1525               	bsf	_DispData+5,2	;volatile
  4474  10E7  2924               	goto	l15376
  4475  10E8                     l3844:	
  4476                           ;display.c: 182: case 7 : (DispData[5] |= 0x10); break;
  4477                           
  4478  10E8  1625               	bsf	_DispData+5,4	;volatile
  4479  10E9  2924               	goto	l15376
  4480  10EA                     l3845:	
  4481                           ;display.c: 183: case 8 : (DispData[5] |= 0x20); break;
  4482                           
  4483  10EA  16A5               	bsf	_DispData+5,5	;volatile
  4484  10EB  2924               	goto	l15376
  4485  10EC                     l3846:	
  4486                           ;display.c: 185: case 9: (DispData[4] |= 0x08); break;
  4487                           
  4488  10EC  15A4               	bsf	_DispData+4,3	;volatile
  4489  10ED  2924               	goto	l15376
  4490  10EE                     l3847:	
  4491                           ;display.c: 186: case 10 : (DispData[4] |= 0x04); break;
  4492                           
  4493  10EE  1524               	bsf	_DispData+4,2	;volatile
  4494  10EF  2924               	goto	l15376
  4495  10F0                     l3848:	
  4496                           ;display.c: 187: case 11 : (DispData[4] |= 0x10); break;
  4497                           
  4498  10F0  1624               	bsf	_DispData+4,4	;volatile
  4499  10F1  2924               	goto	l15376
  4500  10F2                     l3849:	
  4501                           ;display.c: 188: case 12 : (DispData[4] |= 0x20); break;
  4502                           
  4503  10F2  16A4               	bsf	_DispData+4,5	;volatile
  4504  10F3  2924               	goto	l15376
  4505  10F4                     l3850:	
  4506                           ;display.c: 190: case 13 : (DispData[4] |= 0x80); break;
  4507                           
  4508  10F4  17A4               	bsf	_DispData+4,7	;volatile
  4509  10F5  2924               	goto	l15376
  4510  10F6                     l3851:	
  4511                           ;display.c: 191: case 14 : (DispData[5] |= 0x02); break;
  4512                           
  4513  10F6  14A5               	bsf	_DispData+5,1	;volatile
  4514  10F7  2924               	goto	l15376
  4515  10F8                     l15374:	
  4516  10F8  083C               	movf	_ChooseFun,w	;volatile
  4517                           
  4518                           ; Switch size 1, requested type "space"
  4519                           ; Number of cases is 14, Range of values is 1 to 14
  4520                           ; switch strategies available:
  4521                           ; Name         Instructions Cycles
  4522                           ; simple_byte           43    22 (average)
  4523                           ; direct_byte           53    11 (fixed)
  4524                           ; jumptable            263     9 (fixed)
  4525                           ;	Chosen strategy is simple_byte
  4526  10F9  3A01               	xorlw	1	; case 1
  4527  10FA  1903               	skipnz
  4528  10FB  28DC               	goto	l3837
  4529  10FC  3A03               	xorlw	3	; case 2
  4530  10FD  1903               	skipnz
  4531  10FE  28DE               	goto	l3839
  4532  10FF  3A01               	xorlw	1	; case 3
  4533  1100  1903               	skipnz
  4534  1101  28E0               	goto	l3840
  4535  1102  3A07               	xorlw	7	; case 4
  4536  1103  1903               	skipnz
  4537  1104  28E2               	goto	l3841
  4538  1105  3A01               	xorlw	1	; case 5
  4539  1106  1903               	skipnz
  4540  1107  28E4               	goto	l3842
  4541  1108  3A03               	xorlw	3	; case 6
  4542  1109  1903               	skipnz
  4543  110A  28E6               	goto	l3843
  4544  110B  3A01               	xorlw	1	; case 7
  4545  110C  1903               	skipnz
  4546  110D  28E8               	goto	l3844
  4547  110E  3A0F               	xorlw	15	; case 8
  4548  110F  1903               	skipnz
  4549  1110  28EA               	goto	l3845
  4550  1111  3A01               	xorlw	1	; case 9
  4551  1112  1903               	skipnz
  4552  1113  28EC               	goto	l3846
  4553  1114  3A03               	xorlw	3	; case 10
  4554  1115  1903               	skipnz
  4555  1116  28EE               	goto	l3847
  4556  1117  3A01               	xorlw	1	; case 11
  4557  1118  1903               	skipnz
  4558  1119  28F0               	goto	l3848
  4559  111A  3A07               	xorlw	7	; case 12
  4560  111B  1903               	skipnz
  4561  111C  28F2               	goto	l3849
  4562  111D  3A01               	xorlw	1	; case 13
  4563  111E  1903               	skipnz
  4564  111F  28F4               	goto	l3850
  4565  1120  3A03               	xorlw	3	; case 14
  4566  1121  1903               	skipnz
  4567  1122  28F6               	goto	l3851
  4568  1123  2924               	goto	l15376
  4569  1124                     l15376:	
  4570                           
  4571                           ;display.c: 194: }
  4572                           ;display.c: 197: if(PresetState == 1)
  4573  1124  0B39               	decfsz	_PresetState,w	;volatile
  4574  1125  2981               	goto	l15402
  4575                           
  4576                           ;display.c: 198: {
  4577                           ;display.c: 199: if(ChooseFun == 14 || ChooseFun == 13 || ChooseFun == 12)
  4578  1126  300E               	movlw	14
  4579  1127  063C               	xorwf	_ChooseFun,w	;volatile
  4580  1128  1903               	btfsc	3,2
  4581  1129  2932               	goto	l15384
  4582  112A  300D               	movlw	13
  4583  112B  063C               	xorwf	_ChooseFun,w	;volatile
  4584  112C  1903               	btfsc	3,2
  4585  112D  2932               	goto	l15384
  4586  112E  300C               	movlw	12
  4587  112F  063C               	xorwf	_ChooseFun,w	;volatile
  4588  1130  1D03               	btfss	3,2
  4589  1131  2940               	goto	l15386
  4590  1132                     l15384:	
  4591                           
  4592                           ;display.c: 200: {
  4593                           ;display.c: 201: HourBuf = (CountDownTime)/60;
  4594  1132  303C               	movlw	60
  4595  1133  00DA               	movwf	___lbdiv@divisor
  4596  1134  0840               	movf	_CountDownTime,w	;volatile
  4597  1135  271B  160A  118A   	fcall	___lbdiv
  4598  1138  00B8               	movwf	_HourBuf	;volatile
  4599                           
  4600                           ;display.c: 202: MinBuf = (CountDownTime)%60;
  4601  1139  303C               	movlw	60
  4602  113A  00DA               	movwf	___lbmod@divisor
  4603  113B  0840               	movf	_CountDownTime,w	;volatile
  4604  113C  26FF  160A  118A   	fcall	___lbmod
  4605  113F  2955               	goto	L19
  4606  1140                     l15386:	
  4607                           ;display.c: 203: }
  4608                           
  4609                           
  4610                           ;display.c: 204: else
  4611                           ;display.c: 205: {
  4612                           ;display.c: 206: HourBuf = (CountDownTime+15)/60;
  4613  1140  0840               	movf	_CountDownTime,w	;volatile
  4614  1141  00DC               	movwf	___awdiv@dividend
  4615  1142  300F               	movlw	15
  4616  1143  27D7  160A  118A   	fcall	PL24	;call to abstracted procedure
  4617  1146  2353  160A  118A   	fcall	___awdiv
  4618  1149  085A               	movf	?___awdiv,w
  4619  114A  00B8               	movwf	_HourBuf	;volatile
  4620                           
  4621                           ;display.c: 207: MinBuf = (CountDownTime+15)%60;
  4622  114B  0840               	movf	_CountDownTime,w	;volatile
  4623  114C  00DC               	movwf	___awmod@dividend
  4624  114D  300F               	movlw	15
  4625  114E  27DF  160A  118A   	fcall	PL26	;call to abstracted procedure
  4626  1151  2398  160A  118A   	fcall	___awmod
  4627  1154  085A               	movf	?___awmod,w
  4628  1155                     L19:	
  4629  1155  00B7               	movwf	_MinBuf	;volatile
  4630                           
  4631                           ;display.c: 211: DispData[1] |= SEG_MATH_TAB[HourBuf%10];
  4632  1156  300A               	movlw	10
  4633  1157  00DA               	movwf	___lbmod@divisor
  4634  1158  0838               	movf	_HourBuf,w	;volatile
  4635  1159  26FF  160A  118A   	fcall	___lbmod
  4636  115C  2792               	fcall	PL6	;call to abstracted procedure
  4637  115D  160A  158A  2000  160A  118A  	fcall	stringtab
  4638  1162  04A1               	iorwf	_DispData+1,f	;volatile
  4639                           
  4640                           ;display.c: 212: DispData[2] |= SEG_MATH_TAB[MinBuf/10];
  4641  1163  300A               	movlw	10
  4642  1164  00DA               	movwf	___lbdiv@divisor
  4643  1165  0837               	movf	_MinBuf,w	;volatile
  4644  1166  271B  160A  118A   	fcall	___lbdiv
  4645  1169  2792               	fcall	PL6	;call to abstracted procedure
  4646  116A  160A  158A  2000  160A  118A  	fcall	stringtab
  4647  116F  04A2               	iorwf	_DispData+2,f	;volatile
  4648                           
  4649                           ;display.c: 213: DispData[3] |= SEG_MATH_TAB[MinBuf%10];
  4650  1170  300A               	movlw	10
  4651  1171  00DA               	movwf	___lbmod@divisor
  4652  1172  0837               	movf	_MinBuf,w	;volatile
  4653  1173  26FF  160A  118A   	fcall	___lbmod
  4654  1176  2792               	fcall	PL6	;call to abstracted procedure
  4655  1177  160A  158A  2000   	fcall	stringtab
  4656  117A  04A3               	iorwf	_DispData+3,f	;volatile
  4657                           
  4658                           ;display.c: 214: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  4659  117B  17A2               	bsf	_DispData+2,7	;volatile
  4660  117C  17A1               	bsf	_DispData+1,7	;volatile
  4661                           
  4662                           ;display.c: 216: if(PresetTimeH > 0)
  4663  117D  0836               	movf	_PresetTimeH,w	;volatile
  4664  117E  1D03               	btfss	3,2
  4665                           
  4666                           ;display.c: 217: {
  4667                           ;display.c: 218: (DispData[4] |= 0x02);
  4668  117F  14A4               	bsf	_DispData+4,1	;volatile
  4669  1180  0008               	return
  4670  1181                     l15402:	
  4671                           
  4672                           ;display.c: 222: else if(PresetState == 2)
  4673  1181  3002               	movlw	2
  4674  1182  0639               	xorwf	_PresetState,w	;volatile
  4675  1183  1D03               	btfss	3,2
  4676  1184  0008               	return
  4677                           
  4678                           ;display.c: 223: {
  4679                           ;display.c: 225: if(b_LedCol)
  4680  1185  1AF0               	btfsc	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  4681                           
  4682                           ;display.c: 226: {
  4683                           ;display.c: 227: (DispData[4] |= 0x02);
  4684  1186  14A4               	bsf	_DispData+4,1	;volatile
  4685                           
  4686                           ;display.c: 228: }
  4687                           ;display.c: 229: DIG_Show_Time(PresetTimeH, PresetTimeM, 1);
  4688  1187  0835               	movf	_PresetTimeM,w	;volatile
  4689  1188  00DF               	movwf	DIG_Show_Time@min
  4690  1189  01E0               	clrf	DIG_Show_Time@point
  4691  118A  0AE0               	incf	DIG_Show_Time@point,f
  4692  118B  0836               	movf	_PresetTimeH,w	;volatile
  4693  118C  2F4F               	ljmp	_DIG_Show_Time
  4694  118D                     __end_of_Fun_Choose_Show:	
  4695  118D                     __ptext16:	
  4696 ;; *************** function _Test_Mode_Show *****************
  4697 ;; Defined at:
  4698 ;;		line 435 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 300/0
  4709 ;;		On exit  : 300/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4712 ;;      Params:         0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0
  4715 ;;      Totals:         0       0       0       0       0
  4716 ;;Total ram usage:        0 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    3
  4719 ;; This function calls:
  4720 ;;		_DIG_Show_Data
  4721 ;;		___awdiv
  4722 ;;		___awmod
  4723 ;;		___lbdiv
  4724 ;;		___lbmod
  4725 ;;		___lwdiv
  4726 ;;		___lwmod
  4727 ;; This function is called by:
  4728 ;;		_LED_Task
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _Test_Mode_Show
  4734  118D                     _Test_Mode_Show:	
  4735  118D                     l16816:	
  4736                           ;incstack = 0
  4737                           ; Regs used in _Test_Mode_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4738                           
  4739                           
  4740                           ;display.c: 437: if(TestShow < 2)
  4741  118D  3002               	movlw	2
  4742  118E  0231               	subwf	_TestShow,w	;volatile
  4743  118F  1803               	skipnc
  4744  1190  2995               	goto	l16898
  4745                           
  4746                           ;display.c: 438: {
  4747                           ;display.c: 440: DispData[0] = 0;
  4748  1191  01A0               	clrf	_DispData	;volatile
  4749                           
  4750                           ;display.c: 441: DispData[1] = 0;
  4751  1192  01A1               	clrf	_DispData+1	;volatile
  4752                           
  4753                           ;display.c: 442: DispData[2] = 0;
  4754  1193  01A2               	clrf	_DispData+2	;volatile
  4755                           
  4756                           ;display.c: 443: DispData[3] = 0;
  4757  1194  01A3               	clrf	_DispData+3	;volatile
  4758  1195                     l16898:	
  4759  1195  0831               	movf	_TestShow,w	;volatile
  4760                           
  4761                           ; Switch size 1, requested type "space"
  4762                           ; Number of cases is 2, Range of values is 0 to 1
  4763                           ; switch strategies available:
  4764                           ; Name         Instructions Cycles
  4765                           ; simple_byte            7     4 (average)
  4766                           ; direct_byte           14     8 (fixed)
  4767                           ; jumptable            260     6 (fixed)
  4768                           ;	Chosen strategy is simple_byte
  4769  1196  3A00               	xorlw	0	; case 0
  4770  1197  1903               	skipnz
  4771  1198  299D               	goto	l16820
  4772  1199  3A01               	xorlw	1	; case 1
  4773  119A  1903               	skipnz
  4774  119B  2ABE               	goto	l16882
  4775  119C  2B14               	goto	l3957
  4776  119D                     l16820:	
  4777                           
  4778                           ;display.c: 449: if(SendShow == 0)
  4779  119D  0830               	movf	_SendShow,w	;volatile
  4780  119E  1D03               	btfss	3,2
  4781  119F  29BA               	goto	l16824
  4782                           
  4783                           ;display.c: 450: {
  4784                           ;display.c: 451: DIG_Show_Data(SEG_MATH_TAB[1], 0x40, 0x40, SEG_MATH_TAB[11]);
  4785  11A0  3040               	movlw	64
  4786  11A1  00DF               	movwf	DIG_Show_Data@digdata2
  4787  11A2  00E0               	movwf	DIG_Show_Data@digdata3
  4788  11A3  3083               	movlw	low ((_SEG_MATH_TAB+11)| (0+32768))
  4789  11A4  0084               	movwf	4
  4790  11A5  3099               	movlw	high ((_SEG_MATH_TAB+11)| (0+32768))
  4791  11A6  00FF               	movwf	127
  4792  11A7  160A  158A  2000  160A  118A  	fcall	stringtab
  4793  11AC  00E1               	movwf	DIG_Show_Data@digdata4
  4794  11AD  3079               	movlw	low ((_SEG_MATH_TAB+1)| (0+32768))
  4795  11AE  0084               	movwf	4
  4796  11AF  3099               	movlw	high ((_SEG_MATH_TAB+1)| (0+32768))
  4797  11B0  00FF               	movwf	127
  4798  11B1  160A  158A  2000  160A  118A  	fcall	stringtab
  4799  11B6  2315  160A  118A   	fcall	_DIG_Show_Data
  4800                           
  4801                           ;display.c: 452: }
  4802  11B9  2A8E               	goto	l16876
  4803  11BA                     l16824:	
  4804                           
  4805                           ;display.c: 453: else if(SendShow == 1)
  4806  11BA  0B30               	decfsz	_SendShow,w	;volatile
  4807  11BB  29D0               	goto	l16834
  4808                           
  4809                           ;display.c: 454: {
  4810                           ;display.c: 455: HourBuf = Bot_Temp/100;
  4811  11BC  3064               	movlw	100
  4812  11BD  00DA               	movwf	___lbdiv@divisor
  4813  11BE  084E               	movf	_Bot_Temp,w	;volatile
  4814  11BF  271B  160A  118A   	fcall	___lbdiv
  4815  11C2  00B8               	movwf	_HourBuf	;volatile
  4816                           
  4817                           ;display.c: 456: MinBuf = Bot_Temp%100;
  4818  11C3  3064               	movlw	100
  4819  11C4  00DA               	movwf	___lbmod@divisor
  4820  11C5  084E               	movf	_Bot_Temp,w	;volatile
  4821  11C6  26FF  160A  118A   	fcall	___lbmod
  4822  11C9  00B7               	movwf	_MinBuf	;volatile
  4823                           
  4824                           ;display.c: 457: DispData[0] = 0x08;
  4825  11CA  3008               	movlw	8
  4826  11CB  00A0               	movwf	_DispData	;volatile
  4827                           
  4828                           ;display.c: 459: if(RC1)
  4829  11CC  1C87               	btfss	7,1	;volatile
  4830  11CD  2A8E               	goto	l16876
  4831                           
  4832                           ;display.c: 460: {
  4833                           ;display.c: 461: DispData[0] |= 0x40;
  4834  11CE  1720               	bsf	_DispData,6	;volatile
  4835  11CF  2A8E               	goto	l16876
  4836  11D0                     l16834:	
  4837                           
  4838                           ;display.c: 464: else if(SendShow == 2)
  4839  11D0  3002               	movlw	2
  4840  11D1  0630               	xorwf	_SendShow,w	;volatile
  4841  11D2  1D03               	btfss	3,2
  4842  11D3  29E4               	goto	l16840
  4843                           
  4844                           ;display.c: 465: {
  4845                           ;display.c: 466: HourBuf = Ad_Bot/100;
  4846  11D4  3064               	movlw	100
  4847  11D5  00DA               	movwf	___lbdiv@divisor
  4848  11D6  084F               	movf	_Ad_Bot,w	;volatile
  4849  11D7  271B  160A  118A   	fcall	___lbdiv
  4850  11DA  00B8               	movwf	_HourBuf	;volatile
  4851                           
  4852                           ;display.c: 467: MinBuf = Ad_Bot%100;
  4853  11DB  3064               	movlw	100
  4854  11DC  00DA               	movwf	___lbmod@divisor
  4855  11DD  084F               	movf	_Ad_Bot,w	;volatile
  4856  11DE  26FF  160A  118A   	fcall	___lbmod
  4857  11E1  00B7               	movwf	_MinBuf	;volatile
  4858                           
  4859                           ;display.c: 468: DispData[0] = (0x04 + 0x08 + 0x10 + 0x20 + 0x40);
  4860  11E2  307C               	movlw	124
  4861  11E3  2A8D               	goto	L15
  4862  11E4                     l16840:	
  4863                           ;display.c: 469: }
  4864                           
  4865                           
  4866                           ;display.c: 470: else if(SendShow == 3)
  4867  11E4  3003               	movlw	3
  4868  11E5  0630               	xorwf	_SendShow,w	;volatile
  4869  11E6  1D03               	btfss	3,2
  4870  11E7  2A03               	goto	l16846
  4871                           
  4872                           ;display.c: 471: {
  4873                           ;display.c: 472: HourBuf = b_PressureOn/100;
  4874  11E8  3064               	movlw	100
  4875  11E9  00DA               	movwf	___awdiv@divisor
  4876  11EA  01DB               	clrf	___awdiv@divisor+1
  4877  11EB  1003               	clrc
  4878  11EC  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  4879  11ED  1403               	setc
  4880  11EE  27EE  160A  118A   	fcall	PL32	;call to abstracted procedure
  4881  11F1  2353  160A  118A   	fcall	___awdiv
  4882                           
  4883                           ;display.c: 473: MinBuf = b_PressureOn%100;
  4884  11F4  27E7  160A  118A   	fcall	PL28	;call to abstracted procedure
  4885  11F7  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  4886  11F8  1403               	setc
  4887  11F9  27FA  160A  118A   	fcall	PL36	;call to abstracted procedure
  4888  11FC  2398  160A  118A   	fcall	___awmod
  4889  11FF  085A               	movf	?___awmod,w
  4890  1200  00B7               	movwf	_MinBuf	;volatile
  4891                           
  4892                           ;display.c: 475: DispData[0] = (0x01 + 0x02 + 0x10 + 0x20 + 0x40);
  4893  1201  3073               	movlw	115
  4894  1202  2A8D               	goto	L15
  4895  1203                     l16846:	
  4896                           ;display.c: 476: }
  4897                           
  4898                           
  4899                           ;display.c: 477: else if(SendShow == 4)
  4900  1203  3004               	movlw	4
  4901  1204  0630               	xorwf	_SendShow,w	;volatile
  4902  1205  1D03               	btfss	3,2
  4903  1206  2A22               	goto	l16852
  4904                           
  4905                           ;display.c: 478: {
  4906                           ;display.c: 479: HourBuf = b_LidClosed/100;
  4907  1207  3064               	movlw	100
  4908  1208  00DA               	movwf	___awdiv@divisor
  4909  1209  01DB               	clrf	___awdiv@divisor+1
  4910  120A  1003               	clrc
  4911  120B  1BF2               	btfsc	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
  4912  120C  1403               	setc
  4913  120D  27EE  160A  118A   	fcall	PL32	;call to abstracted procedure
  4914  1210  2353  160A  118A   	fcall	___awdiv
  4915                           
  4916                           ;display.c: 480: MinBuf = b_LidClosed%100;
  4917  1213  27E7  160A  118A   	fcall	PL28	;call to abstracted procedure
  4918  1216  1BF2               	btfsc	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
  4919  1217  1403               	setc
  4920  1218  27FA  160A  118A   	fcall	PL36	;call to abstracted procedure
  4921  121B  2398  160A  118A   	fcall	___awmod
  4922  121E  085A               	movf	?___awmod,w
  4923  121F  00B7               	movwf	_MinBuf	;volatile
  4924                           
  4925                           ;display.c: 482: DispData[0] = (0x08 + 0x10 + 0x20);
  4926  1220  3038               	movlw	56
  4927  1221  2A8D               	goto	L15
  4928  1222                     l16852:	
  4929                           ;display.c: 483: }
  4930                           
  4931                           
  4932                           ;display.c: 484: else if(SendShow == 5)
  4933  1222  3005               	movlw	5
  4934  1223  0630               	xorwf	_SendShow,w	;volatile
  4935  1224  1D03               	btfss	3,2
  4936  1225  2A40               	goto	l16858
  4937                           
  4938                           ;display.c: 485: {
  4939                           ;display.c: 486: HourBuf = AC_Vol_Rms/100;
  4940  1226  3064               	movlw	100
  4941  1227  00DA               	movwf	___lwdiv@divisor
  4942  1228  01DB               	clrf	___lwdiv@divisor+1
  4943  1229  0868               	movf	_AC_Vol_Rms+1,w	;volatile
  4944  122A  00DD               	movwf	___lwdiv@dividend+1
  4945  122B  0867               	movf	_AC_Vol_Rms,w	;volatile
  4946  122C  00DC               	movwf	___lwdiv@dividend
  4947  122D  2329  160A  118A   	fcall	___lwdiv
  4948  1230  085A               	movf	?___lwdiv,w
  4949  1231  00B8               	movwf	_HourBuf	;volatile
  4950                           
  4951                           ;display.c: 487: MinBuf = AC_Vol_Rms%100;
  4952  1232  3064               	movlw	100
  4953  1233  00DA               	movwf	___lwmod@divisor
  4954  1234  01DB               	clrf	___lwmod@divisor+1
  4955  1235  0868               	movf	_AC_Vol_Rms+1,w	;volatile
  4956  1236  00DD               	movwf	___lwmod@dividend+1
  4957  1237  0867               	movf	_AC_Vol_Rms,w	;volatile
  4958  1238  00DC               	movwf	___lwmod@dividend
  4959  1239  23D5  160A  118A   	fcall	___lwmod
  4960  123C  085A               	movf	?___lwmod,w
  4961  123D  00B7               	movwf	_MinBuf	;volatile
  4962                           
  4963                           ;display.c: 489: DispData[0] = (0x02 + 0x04 + 0x08 + 0x10 + 0x20);
  4964  123E  303E               	movlw	62
  4965  123F  2A8D               	goto	L15
  4966  1240                     l16858:	
  4967                           ;display.c: 490: }
  4968                           
  4969                           
  4970                           ;display.c: 491: else if(SendShow == 6)
  4971  1240  3006               	movlw	6
  4972  1241  0630               	xorwf	_SendShow,w	;volatile
  4973  1242  1D03               	btfss	3,2
  4974  1243  2A66               	goto	l16864
  4975                           
  4976                           ;display.c: 492: {
  4977                           ;display.c: 493: HourBuf = ZeroTimesShow/100;
  4978  1244  3064               	movlw	100
  4979  1245  00DA               	movwf	___lwdiv@divisor
  4980  1246  01DB               	clrf	___lwdiv@divisor+1
  4981  1247  1683               	bsf	3,5	;RP0=1, select bank1
  4982  1248  0839               	movf	(_ZeroTimesShow+1)^(0+128),w	;volatile
  4983  1249  1283               	bcf	3,5	;RP0=0, select bank0
  4984  124A  00DD               	movwf	___lwdiv@dividend+1
  4985  124B  1683               	bsf	3,5	;RP0=1, select bank1
  4986  124C  0838               	movf	_ZeroTimesShow^(0+128),w	;volatile
  4987  124D  1283               	bcf	3,5	;RP0=0, select bank0
  4988  124E  00DC               	movwf	___lwdiv@dividend
  4989  124F  2329  160A  118A   	fcall	___lwdiv
  4990  1252  085A               	movf	?___lwdiv,w
  4991  1253  00B8               	movwf	_HourBuf	;volatile
  4992                           
  4993                           ;display.c: 494: MinBuf = ZeroTimesShow%100;
  4994  1254  3064               	movlw	100
  4995  1255  00DA               	movwf	___lwmod@divisor
  4996  1256  01DB               	clrf	___lwmod@divisor+1
  4997  1257  1683               	bsf	3,5	;RP0=1, select bank1
  4998  1258  0839               	movf	(_ZeroTimesShow+1)^(0+128),w	;volatile
  4999  1259  1283               	bcf	3,5	;RP0=0, select bank0
  5000  125A  00DD               	movwf	___lwmod@dividend+1
  5001  125B  1683               	bsf	3,5	;RP0=1, select bank1
  5002  125C  0838               	movf	_ZeroTimesShow^(0+128),w	;volatile
  5003  125D  1283               	bcf	3,5	;RP0=0, select bank0
  5004  125E  00DC               	movwf	___lwmod@dividend
  5005  125F  23D5  160A  118A   	fcall	___lwmod
  5006  1262  085A               	movf	?___lwmod,w
  5007  1263  00B7               	movwf	_MinBuf	;volatile
  5008                           
  5009                           ;display.c: 496: DispData[0] = 0x08+0x10+0x20+0x40;
  5010  1264  3078               	movlw	120
  5011  1265  2A8D               	goto	L15
  5012  1266                     l16864:	
  5013                           ;display.c: 497: }
  5014                           
  5015                           
  5016                           ;display.c: 498: else if(SendShow == 7)
  5017  1266  3007               	movlw	7
  5018  1267  0630               	xorwf	_SendShow,w	;volatile
  5019  1268  1D03               	btfss	3,2
  5020  1269  2A7A               	goto	l16870
  5021                           
  5022                           ;display.c: 499: {
  5023                           ;display.c: 500: HourBuf = ZeroTimeoutCnt/100;
  5024  126A  3064               	movlw	100
  5025  126B  00DA               	movwf	___lbdiv@divisor
  5026  126C  083A               	movf	_ZeroTimeoutCnt,w	;volatile
  5027  126D  271B  160A  118A   	fcall	___lbdiv
  5028  1270  00B8               	movwf	_HourBuf	;volatile
  5029                           
  5030                           ;display.c: 501: MinBuf = ZeroTimeoutCnt%100;
  5031  1271  3064               	movlw	100
  5032  1272  00DA               	movwf	___lbmod@divisor
  5033  1273  083A               	movf	_ZeroTimeoutCnt,w	;volatile
  5034  1274  26FF  160A  118A   	fcall	___lbmod
  5035  1277  00B7               	movwf	_MinBuf	;volatile
  5036                           
  5037                           ;display.c: 503: DispData[0] = 0x02;
  5038  1278  3002               	movlw	2
  5039  1279  2A8D               	goto	L15
  5040  127A                     l16870:	
  5041                           ;display.c: 504: }
  5042                           
  5043                           
  5044                           ;display.c: 505: else if(SendShow == 8)
  5045  127A  3008               	movlw	8
  5046  127B  0630               	xorwf	_SendShow,w	;volatile
  5047  127C  1D03               	btfss	3,2
  5048  127D  2A8E               	goto	l16876
  5049                           
  5050                           ;display.c: 506: {
  5051                           ;display.c: 507: HourBuf = JudgeLidMin/100;
  5052  127E  3064               	movlw	100
  5053  127F  00DA               	movwf	___lbdiv@divisor
  5054  1280  082F               	movf	_JudgeLidMin,w	;volatile
  5055  1281  271B  160A  118A   	fcall	___lbdiv
  5056  1284  00B8               	movwf	_HourBuf	;volatile
  5057                           
  5058                           ;display.c: 508: MinBuf = JudgeLidMin%100;
  5059  1285  3064               	movlw	100
  5060  1286  00DA               	movwf	___lbmod@divisor
  5061  1287  082F               	movf	_JudgeLidMin,w	;volatile
  5062  1288  26FF  160A  118A   	fcall	___lbmod
  5063  128B  00B7               	movwf	_MinBuf	;volatile
  5064                           
  5065                           ;display.c: 510: DispData[0] = (0x02 + 0x04 + 0x08 + 0x10);
  5066  128C  301E               	movlw	30
  5067  128D                     L15:	
  5068  128D  00A0               	movwf	_DispData	;volatile
  5069  128E                     l16876:	
  5070                           
  5071                           ;display.c: 511: }
  5072                           ;display.c: 515: if(SendShow >= 1 && SendShow <= 8)
  5073  128E  0830               	movf	_SendShow,w	;volatile
  5074  128F  1903               	btfsc	3,2
  5075  1290  0008               	return
  5076  1291  3009               	movlw	9
  5077  1292  0230               	subwf	_SendShow,w	;volatile
  5078  1293  1803               	skipnc
  5079  1294  0008               	return
  5080                           
  5081                           ;display.c: 516: {
  5082                           ;display.c: 517: DIG_Show_Data(0, SEG_MATH_TAB[HourBuf%10], SEG_MATH_TAB[MinBuf/10], SEG
      +                          _MATH_TAB[MinBuf%10]);
  5083  1295  300A               	movlw	10
  5084  1296  00DA               	movwf	___lbmod@divisor
  5085  1297  0838               	movf	_HourBuf,w	;volatile
  5086  1298  26FF  160A  118A   	fcall	___lbmod
  5087  129B  2792               	fcall	PL6	;call to abstracted procedure
  5088  129C  160A  158A  2000  160A  118A  	fcall	stringtab
  5089  12A1  00DF               	movwf	DIG_Show_Data@digdata2
  5090  12A2  300A               	movlw	10
  5091  12A3  00DA               	movwf	___lbdiv@divisor
  5092  12A4  0837               	movf	_MinBuf,w	;volatile
  5093  12A5  271B  160A  118A   	fcall	___lbdiv
  5094  12A8  2792               	fcall	PL6	;call to abstracted procedure
  5095  12A9  160A  158A  2000  160A  118A  	fcall	stringtab
  5096  12AE  00E0               	movwf	DIG_Show_Data@digdata3
  5097  12AF  300A               	movlw	10
  5098  12B0  00DA               	movwf	___lbmod@divisor
  5099  12B1  0837               	movf	_MinBuf,w	;volatile
  5100  12B2  26FF  160A  118A   	fcall	___lbmod
  5101  12B5  2792               	fcall	PL6	;call to abstracted procedure
  5102  12B6  160A  158A  2000  160A  118A  	fcall	stringtab
  5103  12BB  00E1               	movwf	DIG_Show_Data@digdata4
  5104  12BC  3000               	movlw	0
  5105  12BD  2B15               	ljmp	_DIG_Show_Data
  5106  12BE                     l16882:	
  5107                           
  5108                           ;display.c: 523: if(SendShow==0)
  5109  12BE  0830               	movf	_SendShow,w	;volatile
  5110  12BF  1D03               	btfss	3,2
  5111  12C0  2AE0               	goto	l16894
  5112                           
  5113                           ;display.c: 524: {
  5114                           ;display.c: 525: DIG_Show_Data(0,0,SEG_MATH_TAB[Fc_ID[SendShow]>>4],SEG_MATH_TAB[Fc_ID[S
      +                          endShow]&0x0f]);
  5115  12C1  01DF               	clrf	DIG_Show_Data@digdata2
  5116  12C2  27D1  160A  118A   	fcall	PL22	;call to abstracted procedure
  5117  12C5  2792               	fcall	PL6	;call to abstracted procedure
  5118  12C6  160A  158A  2000  160A  118A  	fcall	stringtab
  5119  12CB  00E0               	movwf	DIG_Show_Data@digdata3
  5120  12CC  0830               	movf	_SendShow,w
  5121  12CD  27BF  160A  118A   	fcall	PL18	;call to abstracted procedure
  5122  12D0  2792               	fcall	PL6	;call to abstracted procedure
  5123  12D1  160A  158A  2000  160A  118A  	fcall	stringtab
  5124  12D6  00E1               	movwf	DIG_Show_Data@digdata4
  5125  12D7  3000               	movlw	0
  5126  12D8  2315               	fcall	_DIG_Show_Data
  5127                           
  5128                           ;display.c: 526: DispData[0] = (0x02 + 0x04);
  5129  12D9  3006               	movlw	6
  5130  12DA  00A0               	movwf	_DispData	;volatile
  5131                           
  5132                           ;display.c: 527: DispData[1] = (0x02 + 0x04 + 0x08 + 0x10 + 0x40);
  5133  12DB  305E               	movlw	94
  5134  12DC  00A1               	movwf	_DispData+1	;volatile
  5135                           
  5136                           ;display.c: 528: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  5137  12DD  17A2               	bsf	_DispData+2,7	;volatile
  5138  12DE  17A1               	bsf	_DispData+1,7	;volatile
  5139                           
  5140                           ;display.c: 529: }
  5141  12DF  0008               	return
  5142  12E0                     l16894:	
  5143                           
  5144                           ;display.c: 530: else
  5145                           ;display.c: 531: {
  5146                           ;display.c: 532: DIG_Show_Data(SEG_MATH_TAB[Fc_ID[(SendShow-1)*2+1]>>4],SEG_MATH_TAB[(Fc
      +                          _ID[(SendShow-1)*2+1]&0x0f)],SEG_MATH_TAB[Fc_ID[(SendShow-1)*2+2]>>4],SEG_MATH_TAB[(Fc_I
      +                          D[(SendShow-1)*2+2]&0x0f)]);
  5147  12E0  1003               	clrc
  5148  12E1  0D30               	rlf	_SendShow,w	;volatile
  5149  12E2  3E9F               	addlw	(low ((_Fc_ID| 0+255)))& (0+255)
  5150  12E3  0084               	movwf	4
  5151  12E4  1383               	bcf	3,7	;select IRP bank1
  5152  12E5  0800               	movf	0,w
  5153  12E6  390F               	andlw	15
  5154  12E7  2792               	fcall	PL6	;call to abstracted procedure
  5155  12E8  160A  158A  2000  160A  118A  	fcall	stringtab
  5156  12ED  00DF               	movwf	DIG_Show_Data@digdata2
  5157  12EE  1003               	clrc
  5158  12EF  0D30               	rlf	_SendShow,w	;volatile
  5159  12F0  27D1  160A  118A   	fcall	PL22	;call to abstracted procedure
  5160  12F3  2792               	fcall	PL6	;call to abstracted procedure
  5161  12F4  160A  158A  2000  160A  118A  	fcall	stringtab
  5162  12F9  00E0               	movwf	DIG_Show_Data@digdata3
  5163  12FA  1003               	clrc
  5164  12FB  0D30               	rlf	_SendShow,w	;volatile
  5165  12FC  27BF  160A  118A   	fcall	PL18	;call to abstracted procedure
  5166  12FF  2792               	fcall	PL6	;call to abstracted procedure
  5167  1300  160A  158A  2000  160A  118A  	fcall	stringtab
  5168  1305  00E1               	movwf	DIG_Show_Data@digdata4
  5169  1306  1003               	clrc
  5170  1307  0D30               	rlf	_SendShow,w	;volatile
  5171  1308  3E9F               	addlw	(low ((_Fc_ID| 0+255)))& (0+255)
  5172  1309  0084               	movwf	4
  5173  130A  1383               	bcf	3,7	;select IRP bank1
  5174  130B  0E00               	swapf	0,w
  5175  130C  390F               	andlw	15
  5176  130D  2792               	fcall	PL6	;call to abstracted procedure
  5177  130E  160A  158A  2000  160A  118A  	fcall	stringtab
  5178  1313  2B15               	ljmp	_DIG_Show_Data
  5179  1314                     l3957:	
  5180  1314  0008               	return
  5181  1315                     __end_of_Test_Mode_Show:	
  5182  1315                     __ptext18:	
  5183 ;; *************** function _DIG_Show_Data *****************
  5184 ;; Defined at:
  5185 ;;		line 89 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  digdata1        1    wreg     unsigned char 
  5188 ;;  digdata2        1    5[BANK0 ] unsigned char 
  5189 ;;  digdata3        1    6[BANK0 ] unsigned char 
  5190 ;;  digdata4        1    7[BANK0 ] unsigned char 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  digdata1        1    8[BANK0 ] unsigned char 
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  1    wreg      void 
  5195 ;; Registers used:
  5196 ;;		wreg, status,2, status,0
  5197 ;; Tracked objects:
  5198 ;;		On entry : 300/0
  5199 ;;		On exit  : 300/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5202 ;;      Params:         0       3       0       0       0
  5203 ;;      Locals:         0       1       0       0       0
  5204 ;;      Temps:          0       0       0       0       0
  5205 ;;      Totals:         0       4       0       0       0
  5206 ;;Total ram usage:        4 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    2
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		_Test_Mode_Show
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _DIG_Show_Data
  5218  1315                     _DIG_Show_Data:	
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _DIG_Show_Data: [wreg+status,2+status,0]
  5222                           ;DIG_Show_Data@digdata1 stored from wreg
  5223  1315  00E2               	movwf	DIG_Show_Data@digdata1
  5224                           
  5225                           ;display.c: 91: if(digdata1 != 0)
  5226  1316  0862               	movf	DIG_Show_Data@digdata1,w
  5227  1317  1903               	btfsc	3,2
  5228  1318  2B1B               	goto	l3815
  5229                           
  5230                           ;display.c: 92: {
  5231                           ;display.c: 93: DispData[0] |= digdata1;
  5232  1319  0862               	movf	DIG_Show_Data@digdata1,w
  5233  131A  04A0               	iorwf	_DispData,f	;volatile
  5234  131B                     l3815:	
  5235                           
  5236                           ;display.c: 94: }
  5237                           ;display.c: 96: if(digdata2 != 0)
  5238  131B  085F               	movf	DIG_Show_Data@digdata2,w
  5239  131C  1903               	btfsc	3,2
  5240  131D  2B20               	goto	l3816
  5241                           
  5242                           ;display.c: 97: {
  5243                           ;display.c: 98: DispData[1] |= digdata2;
  5244  131E  085F               	movf	DIG_Show_Data@digdata2,w
  5245  131F  04A1               	iorwf	_DispData+1,f	;volatile
  5246  1320                     l3816:	
  5247                           
  5248                           ;display.c: 99: }
  5249                           ;display.c: 101: if(digdata3 != 0)
  5250  1320  0860               	movf	DIG_Show_Data@digdata3,w
  5251  1321  1903               	btfsc	3,2
  5252  1322  2B25               	goto	l3817
  5253                           
  5254                           ;display.c: 102: {
  5255                           ;display.c: 103: DispData[2] |= digdata3;
  5256  1323  0860               	movf	DIG_Show_Data@digdata3,w
  5257  1324  04A2               	iorwf	_DispData+2,f	;volatile
  5258  1325                     l3817:	
  5259                           
  5260                           ;display.c: 104: }
  5261                           ;display.c: 106: if(digdata4 != 0)
  5262  1325  0861               	movf	DIG_Show_Data@digdata4,w
  5263  1326  1D03               	btfss	3,2
  5264                           
  5265                           ;display.c: 107: {
  5266                           ;display.c: 108: DispData[3] |= digdata4;
  5267  1327  04A3               	iorwf	_DispData+3,f	;volatile
  5268  1328  0008               	return
  5269  1329                     __end_of_DIG_Show_Data:	
  5270  1329                     __ptext50:	
  5271 ;; *************** function ___lwdiv *****************
  5272 ;; Defined at:
  5273 ;;		line 6 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\lwdiv.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  divisor         2    0[BANK0 ] unsigned int 
  5276 ;;  dividend        2    2[BANK0 ] unsigned int 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  quotient        2    4[BANK0 ] unsigned int 
  5279 ;;  counter         1    6[BANK0 ] unsigned char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  2    0[BANK0 ] unsigned int 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0
  5284 ;; Tracked objects:
  5285 ;;		On entry : 300/0
  5286 ;;		On exit  : 300/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5289 ;;      Params:         0       4       0       0       0
  5290 ;;      Locals:         0       3       0       0       0
  5291 ;;      Temps:          0       0       0       0       0
  5292 ;;      Totals:         0       7       0       0       0
  5293 ;;Total ram usage:        7 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    2
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_Test_Mode_Show
  5300 ;;		_Get_AC_Rms
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function ___lwdiv
  5306  1329                     ___lwdiv:	
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5310  1329  01DE               	clrf	___lwdiv@quotient
  5311  132A  01DF               	clrf	___lwdiv@quotient+1
  5312  132B  085A               	movf	___lwdiv@divisor,w
  5313  132C  045B               	iorwf	___lwdiv@divisor+1,w
  5314  132D  1903               	btfsc	3,2
  5315  132E  2B4E               	goto	l16716
  5316  132F  01E0               	clrf	___lwdiv@counter
  5317  1330                     L70:	
  5318  1330  0AE0               	incf	___lwdiv@counter,f
  5319  1331  1BDB               	btfsc	___lwdiv@divisor+1,7
  5320  1332  2B37               	goto	l16704
  5321  1333  1003               	clrc
  5322  1334  0DDA               	rlf	___lwdiv@divisor,f
  5323  1335  0DDB               	rlf	___lwdiv@divisor+1,f
  5324  1336  2B30               	goto	L70
  5325  1337                     l16704:	
  5326  1337  1003               	clrc
  5327  1338  0DDE               	rlf	___lwdiv@quotient,f
  5328  1339  0DDF               	rlf	___lwdiv@quotient+1,f
  5329  133A  085B               	movf	___lwdiv@divisor+1,w
  5330  133B  025D               	subwf	___lwdiv@dividend+1,w
  5331  133C  1D03               	skipz
  5332  133D  2B40               	goto	u8395
  5333  133E  085A               	movf	___lwdiv@divisor,w
  5334  133F  025C               	subwf	___lwdiv@dividend,w
  5335  1340                     u8395:	
  5336  1340  1C03               	skipc
  5337  1341  2B4A               	goto	L71
  5338  1342  085A               	movf	___lwdiv@divisor,w
  5339  1343  02DC               	subwf	___lwdiv@dividend,f
  5340  1344  085B               	movf	___lwdiv@divisor+1,w
  5341  1345  1C03               	skipc
  5342  1346  03DD               	decf	___lwdiv@dividend+1,f
  5343  1347  02DD               	subwf	___lwdiv@dividend+1,f
  5344  1348  145E               	bsf	___lwdiv@quotient,0
  5345  1349  1003               	clrc
  5346  134A                     L71:	
  5347  134A  0CDB               	rrf	___lwdiv@divisor+1,f
  5348  134B  0CDA               	rrf	___lwdiv@divisor,f
  5349  134C  0BE0               	decfsz	___lwdiv@counter,f
  5350  134D  2B37               	goto	l16704
  5351  134E                     l16716:	
  5352  134E  085F               	movf	___lwdiv@quotient+1,w
  5353  134F  00DB               	movwf	?___lwdiv+1
  5354  1350  085E               	movf	___lwdiv@quotient,w
  5355  1351  00DA               	movwf	?___lwdiv
  5356  1352  0008               	return
  5357  1353                     __end_of___lwdiv:	
  5358  1353                     __ptext24:	
  5359 ;; *************** function ___awdiv *****************
  5360 ;; Defined at:
  5361 ;;		line 6 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\awdiv.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  divisor         2    0[BANK0 ] int 
  5364 ;;  dividend        2    2[BANK0 ] int 
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;  quotient        2    6[BANK0 ] int 
  5367 ;;  sign            1    5[BANK0 ] unsigned char 
  5368 ;;  counter         1    4[BANK0 ] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2    0[BANK0 ] int 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 300/0
  5375 ;;		On exit  : 300/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5378 ;;      Params:         0       4       0       0       0
  5379 ;;      Locals:         0       4       0       0       0
  5380 ;;      Temps:          0       0       0       0       0
  5381 ;;      Totals:         0       8       0       0       0
  5382 ;;Total ram usage:        8 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    2
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_Fun_Choose_Show
  5389 ;;		_Test_Mode_Show
  5390 ;;		_PresetTimeStart
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function ___awdiv
  5396  1353                     ___awdiv:	
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5400  1353  01DF               	clrf	___awdiv@sign
  5401  1354  1FDB               	btfss	___awdiv@divisor+1,7
  5402  1355  2B5D               	goto	l15230
  5403  1356  09DA               	comf	___awdiv@divisor,f
  5404  1357  09DB               	comf	___awdiv@divisor+1,f
  5405  1358  0ADA               	incf	___awdiv@divisor,f
  5406  1359  1903               	skipnz
  5407  135A  0ADB               	incf	___awdiv@divisor+1,f
  5408  135B  01DF               	clrf	___awdiv@sign
  5409  135C  0ADF               	incf	___awdiv@sign,f
  5410  135D                     l15230:	
  5411  135D  1FDD               	btfss	___awdiv@dividend+1,7
  5412  135E  2B66               	goto	l15236
  5413  135F  09DC               	comf	___awdiv@dividend,f
  5414  1360  09DD               	comf	___awdiv@dividend+1,f
  5415  1361  0ADC               	incf	___awdiv@dividend,f
  5416  1362  1903               	skipnz
  5417  1363  0ADD               	incf	___awdiv@dividend+1,f
  5418  1364  3001               	movlw	1
  5419  1365  06DF               	xorwf	___awdiv@sign,f
  5420  1366                     l15236:	
  5421  1366  01E0               	clrf	___awdiv@quotient
  5422  1367  01E1               	clrf	___awdiv@quotient+1
  5423  1368  085A               	movf	___awdiv@divisor,w
  5424  1369  045B               	iorwf	___awdiv@divisor+1,w
  5425  136A  1903               	btfsc	3,2
  5426  136B  2B8B               	goto	l15258
  5427  136C  01DE               	clrf	___awdiv@counter
  5428  136D                     L22:	
  5429  136D  0ADE               	incf	___awdiv@counter,f
  5430  136E  1BDB               	btfsc	___awdiv@divisor+1,7
  5431  136F  2B74               	goto	l15246
  5432  1370  1003               	clrc
  5433  1371  0DDA               	rlf	___awdiv@divisor,f
  5434  1372  0DDB               	rlf	___awdiv@divisor+1,f
  5435  1373  2B6D               	goto	L22
  5436  1374                     l15246:	
  5437  1374  1003               	clrc
  5438  1375  0DE0               	rlf	___awdiv@quotient,f
  5439  1376  0DE1               	rlf	___awdiv@quotient+1,f
  5440  1377  085B               	movf	___awdiv@divisor+1,w
  5441  1378  025D               	subwf	___awdiv@dividend+1,w
  5442  1379  1D03               	skipz
  5443  137A  2B7D               	goto	u6615
  5444  137B  085A               	movf	___awdiv@divisor,w
  5445  137C  025C               	subwf	___awdiv@dividend,w
  5446  137D                     u6615:	
  5447  137D  1C03               	skipc
  5448  137E  2B87               	goto	L23
  5449  137F  085A               	movf	___awdiv@divisor,w
  5450  1380  02DC               	subwf	___awdiv@dividend,f
  5451  1381  085B               	movf	___awdiv@divisor+1,w
  5452  1382  1C03               	skipc
  5453  1383  03DD               	decf	___awdiv@dividend+1,f
  5454  1384  02DD               	subwf	___awdiv@dividend+1,f
  5455  1385  1460               	bsf	___awdiv@quotient,0
  5456  1386  1003               	clrc
  5457  1387                     L23:	
  5458  1387  0CDB               	rrf	___awdiv@divisor+1,f
  5459  1388  0CDA               	rrf	___awdiv@divisor,f
  5460  1389  0BDE               	decfsz	___awdiv@counter,f
  5461  138A  2B74               	goto	l15246
  5462  138B                     l15258:	
  5463  138B  085F               	movf	___awdiv@sign,w
  5464  138C  1903               	btfsc	3,2
  5465  138D  2B93               	goto	l15262
  5466  138E  09E0               	comf	___awdiv@quotient,f
  5467  138F  09E1               	comf	___awdiv@quotient+1,f
  5468  1390  0AE0               	incf	___awdiv@quotient,f
  5469  1391  1903               	skipnz
  5470  1392  0AE1               	incf	___awdiv@quotient+1,f
  5471  1393                     l15262:	
  5472  1393  0861               	movf	___awdiv@quotient+1,w
  5473  1394  00DB               	movwf	?___awdiv+1
  5474  1395  0860               	movf	___awdiv@quotient,w
  5475  1396  00DA               	movwf	?___awdiv
  5476  1397  0008               	return
  5477  1398                     __end_of___awdiv:	
  5478  1398                     __ptext23:	
  5479 ;; *************** function ___awmod *****************
  5480 ;; Defined at:
  5481 ;;		line 6 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\awmod.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  divisor         2    0[BANK0 ] int 
  5484 ;;  dividend        2    2[BANK0 ] int 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  sign            1    5[BANK0 ] unsigned char 
  5487 ;;  counter         1    4[BANK0 ] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  2    0[BANK0 ] int 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0
  5492 ;; Tracked objects:
  5493 ;;		On entry : 300/0
  5494 ;;		On exit  : 300/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5497 ;;      Params:         0       4       0       0       0
  5498 ;;      Locals:         0       2       0       0       0
  5499 ;;      Temps:          0       0       0       0       0
  5500 ;;      Totals:         0       6       0       0       0
  5501 ;;Total ram usage:        6 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    2
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_Fun_Choose_Show
  5508 ;;		_Test_Mode_Show
  5509 ;;		_PresetTimeStart
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function ___awmod
  5515  1398                     ___awmod:	
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5519  1398  01DF               	clrf	___awmod@sign
  5520  1399  1FDD               	btfss	___awmod@dividend+1,7
  5521  139A  2BA2               	goto	l15274
  5522  139B  09DC               	comf	___awmod@dividend,f
  5523  139C  09DD               	comf	___awmod@dividend+1,f
  5524  139D  0ADC               	incf	___awmod@dividend,f
  5525  139E  1903               	skipnz
  5526  139F  0ADD               	incf	___awmod@dividend+1,f
  5527  13A0  01DF               	clrf	___awmod@sign
  5528  13A1  0ADF               	incf	___awmod@sign,f
  5529  13A2                     l15274:	
  5530  13A2  1FDB               	btfss	___awmod@divisor+1,7
  5531  13A3  2BA9               	goto	l15278
  5532  13A4  09DA               	comf	___awmod@divisor,f
  5533  13A5  09DB               	comf	___awmod@divisor+1,f
  5534  13A6  0ADA               	incf	___awmod@divisor,f
  5535  13A7  1903               	skipnz
  5536  13A8  0ADB               	incf	___awmod@divisor+1,f
  5537  13A9                     l15278:	
  5538  13A9  085A               	movf	___awmod@divisor,w
  5539  13AA  045B               	iorwf	___awmod@divisor+1,w
  5540  13AB  1903               	btfsc	3,2
  5541  13AC  2BC8               	goto	l15294
  5542  13AD  01DE               	clrf	___awmod@counter
  5543  13AE                     L20:	
  5544  13AE  0ADE               	incf	___awmod@counter,f
  5545  13AF  1BDB               	btfsc	___awmod@divisor+1,7
  5546  13B0  2BB5               	goto	l15286
  5547  13B1  1003               	clrc
  5548  13B2  0DDA               	rlf	___awmod@divisor,f
  5549  13B3  0DDB               	rlf	___awmod@divisor+1,f
  5550  13B4  2BAE               	goto	L20
  5551  13B5                     l15286:	
  5552  13B5  085B               	movf	___awmod@divisor+1,w
  5553  13B6  025D               	subwf	___awmod@dividend+1,w
  5554  13B7  1D03               	skipz
  5555  13B8  2BBB               	goto	u6685
  5556  13B9  085A               	movf	___awmod@divisor,w
  5557  13BA  025C               	subwf	___awmod@dividend,w
  5558  13BB                     u6685:	
  5559  13BB  1C03               	skipc
  5560  13BC  2BC4               	goto	L21
  5561  13BD  085A               	movf	___awmod@divisor,w
  5562  13BE  02DC               	subwf	___awmod@dividend,f
  5563  13BF  085B               	movf	___awmod@divisor+1,w
  5564  13C0  1C03               	skipc
  5565  13C1  03DD               	decf	___awmod@dividend+1,f
  5566  13C2  02DD               	subwf	___awmod@dividend+1,f
  5567  13C3  1003               	clrc
  5568  13C4                     L21:	
  5569  13C4  0CDB               	rrf	___awmod@divisor+1,f
  5570  13C5  0CDA               	rrf	___awmod@divisor,f
  5571  13C6  0BDE               	decfsz	___awmod@counter,f
  5572  13C7  2BB5               	goto	l15286
  5573  13C8                     l15294:	
  5574  13C8  085F               	movf	___awmod@sign,w
  5575  13C9  1903               	btfsc	3,2
  5576  13CA  2BD0               	goto	l15298
  5577  13CB  09DC               	comf	___awmod@dividend,f
  5578  13CC  09DD               	comf	___awmod@dividend+1,f
  5579  13CD  0ADC               	incf	___awmod@dividend,f
  5580  13CE  1903               	skipnz
  5581  13CF  0ADD               	incf	___awmod@dividend+1,f
  5582  13D0                     l15298:	
  5583  13D0  085D               	movf	___awmod@dividend+1,w
  5584  13D1  00DB               	movwf	?___awmod+1
  5585  13D2  085C               	movf	___awmod@dividend,w
  5586  13D3  00DA               	movwf	?___awmod
  5587  13D4  0008               	return
  5588  13D5                     __end_of___awmod:	
  5589  13D5                     __ptext17:	
  5590 ;; *************** function ___lwmod *****************
  5591 ;; Defined at:
  5592 ;;		line 6 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\lwmod.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  divisor         2    0[BANK0 ] unsigned int 
  5595 ;;  dividend        2    2[BANK0 ] unsigned int 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  counter         1    4[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  2    0[BANK0 ] unsigned int 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 300/0
  5604 ;;		On exit  : 300/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5607 ;;      Params:         0       4       0       0       0
  5608 ;;      Locals:         0       1       0       0       0
  5609 ;;      Temps:          0       0       0       0       0
  5610 ;;      Totals:         0       5       0       0       0
  5611 ;;Total ram usage:        5 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    2
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_Test_Mode_Show
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function ___lwmod
  5623  13D5                     ___lwmod:	
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5627  13D5  085A               	movf	___lwmod@divisor,w
  5628  13D6  045B               	iorwf	___lwmod@divisor+1,w
  5629  13D7  1903               	btfsc	3,2
  5630  13D8  2BF4               	goto	l16736
  5631  13D9  01DE               	clrf	___lwmod@counter
  5632  13DA                     L16:	
  5633  13DA  0ADE               	incf	___lwmod@counter,f
  5634  13DB  1BDB               	btfsc	___lwmod@divisor+1,7
  5635  13DC  2BE1               	goto	l16728
  5636  13DD  1003               	clrc
  5637  13DE  0DDA               	rlf	___lwmod@divisor,f
  5638  13DF  0DDB               	rlf	___lwmod@divisor+1,f
  5639  13E0  2BDA               	goto	L16
  5640  13E1                     l16728:	
  5641  13E1  085B               	movf	___lwmod@divisor+1,w
  5642  13E2  025D               	subwf	___lwmod@dividend+1,w
  5643  13E3  1D03               	skipz
  5644  13E4  2BE7               	goto	u8435
  5645  13E5  085A               	movf	___lwmod@divisor,w
  5646  13E6  025C               	subwf	___lwmod@dividend,w
  5647  13E7                     u8435:	
  5648  13E7  1C03               	skipc
  5649  13E8  2BF0               	goto	L17
  5650  13E9  085A               	movf	___lwmod@divisor,w
  5651  13EA  02DC               	subwf	___lwmod@dividend,f
  5652  13EB  085B               	movf	___lwmod@divisor+1,w
  5653  13EC  1C03               	skipc
  5654  13ED  03DD               	decf	___lwmod@dividend+1,f
  5655  13EE  02DD               	subwf	___lwmod@dividend+1,f
  5656  13EF  1003               	clrc
  5657  13F0                     L17:	
  5658  13F0  0CDB               	rrf	___lwmod@divisor+1,f
  5659  13F1  0CDA               	rrf	___lwmod@divisor,f
  5660  13F2  0BDE               	decfsz	___lwmod@counter,f
  5661  13F3  2BE1               	goto	l16728
  5662  13F4                     l16736:	
  5663  13F4  085D               	movf	___lwmod@dividend+1,w
  5664  13F5  00DB               	movwf	?___lwmod+1
  5665  13F6  085C               	movf	___lwmod@dividend,w
  5666  13F7  00DA               	movwf	?___lwmod
  5667  13F8  0008               	return
  5668  13F9                     __end_of___lwmod:	
  5669  13F9                     __ptext13:	
  5670 ;; *************** function _Work_Mode_Show *****************
  5671 ;; Defined at:
  5672 ;;		line 241 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : B00/0
  5683 ;;		On exit  : 300/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5686 ;;      Params:         0       0       0       0       0
  5687 ;;      Locals:         0       0       0       0       0
  5688 ;;      Temps:          0       5       0       0       0
  5689 ;;      Totals:         0       5       0       0       0
  5690 ;;Total ram usage:        5 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    4
  5693 ;; This function calls:
  5694 ;;		_DIG_Show_Time
  5695 ;;		___lbdiv
  5696 ;;		___lbmod
  5697 ;;		___wmul
  5698 ;; This function is called by:
  5699 ;;		_LED_Task
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _Work_Mode_Show
  5705  13F9                     _Work_Mode_Show:	
  5706                           
  5707                           ;display.c: 244: switch(ChooseFun)
  5708                           
  5709                           ;incstack = 0
  5710                           ; Regs used in _Work_Mode_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5711  13F9  2C16               	goto	l16744
  5712  13FA                     l3865:	
  5713                           ;display.c: 245: {
  5714                           ;display.c: 246: case 1 : (DispData[4] |= 0x01); break;
  5715                           
  5716  13FA  1424               	bsf	_DispData+4,0	;volatile
  5717  13FB  2C42               	goto	l16746
  5718  13FC                     l3867:	
  5719                           ;display.c: 247: case 2 : (DispData[5] |= 0x01); break;
  5720                           
  5721  13FC  1425               	bsf	_DispData+5,0	;volatile
  5722  13FD  2C42               	goto	l16746
  5723  13FE                     l3868:	
  5724                           ;display.c: 248: case 3 : (DispData[4] |= 0x40); break;
  5725                           
  5726  13FE  1724               	bsf	_DispData+4,6	;volatile
  5727  13FF  2C42               	goto	l16746
  5728  1400                     l3869:	
  5729                           ;display.c: 249: case 4 : (DispData[5] |= 0x40); break;
  5730                           
  5731  1400  1725               	bsf	_DispData+5,6	;volatile
  5732  1401  2C42               	goto	l16746
  5733  1402                     l3870:	
  5734                           ;display.c: 251: case 5 : (DispData[5] |= 0x08); break;
  5735                           
  5736  1402  15A5               	bsf	_DispData+5,3	;volatile
  5737  1403  2C42               	goto	l16746
  5738  1404                     l3871:	
  5739                           ;display.c: 252: case 6 : (DispData[5] |= 0x04); break;
  5740                           
  5741  1404  1525               	bsf	_DispData+5,2	;volatile
  5742  1405  2C42               	goto	l16746
  5743  1406                     l3872:	
  5744                           ;display.c: 253: case 7 : (DispData[5] |= 0x10); break;
  5745                           
  5746  1406  1625               	bsf	_DispData+5,4	;volatile
  5747  1407  2C42               	goto	l16746
  5748  1408                     l3873:	
  5749                           ;display.c: 254: case 8 : (DispData[5] |= 0x20); break;
  5750                           
  5751  1408  16A5               	bsf	_DispData+5,5	;volatile
  5752  1409  2C42               	goto	l16746
  5753  140A                     l3874:	
  5754                           ;display.c: 256: case 9: (DispData[4] |= 0x08); break;
  5755                           
  5756  140A  15A4               	bsf	_DispData+4,3	;volatile
  5757  140B  2C42               	goto	l16746
  5758  140C                     l3875:	
  5759                           ;display.c: 257: case 10 : (DispData[4] |= 0x04); break;
  5760                           
  5761  140C  1524               	bsf	_DispData+4,2	;volatile
  5762  140D  2C42               	goto	l16746
  5763  140E                     l3876:	
  5764                           ;display.c: 258: case 11 : (DispData[4] |= 0x10); break;
  5765                           
  5766  140E  1624               	bsf	_DispData+4,4	;volatile
  5767  140F  2C42               	goto	l16746
  5768  1410                     l3877:	
  5769                           ;display.c: 259: case 12 : (DispData[4] |= 0x20); break;
  5770                           
  5771  1410  16A4               	bsf	_DispData+4,5	;volatile
  5772  1411  2C42               	goto	l16746
  5773  1412                     l3878:	
  5774                           ;display.c: 261: case 13 : (DispData[4] |= 0x80); break;
  5775                           
  5776  1412  17A4               	bsf	_DispData+4,7	;volatile
  5777  1413  2C42               	goto	l16746
  5778  1414                     l3879:	
  5779                           ;display.c: 262: case 14 : (DispData[5] |= 0x02); break;
  5780                           
  5781  1414  14A5               	bsf	_DispData+5,1	;volatile
  5782  1415  2C42               	goto	l16746
  5783  1416                     l16744:	
  5784  1416  083C               	movf	_ChooseFun,w	;volatile
  5785                           
  5786                           ; Switch size 1, requested type "space"
  5787                           ; Number of cases is 14, Range of values is 1 to 14
  5788                           ; switch strategies available:
  5789                           ; Name         Instructions Cycles
  5790                           ; simple_byte           43    22 (average)
  5791                           ; direct_byte           53    11 (fixed)
  5792                           ; jumptable            263     9 (fixed)
  5793                           ;	Chosen strategy is simple_byte
  5794  1417  3A01               	xorlw	1	; case 1
  5795  1418  1903               	skipnz
  5796  1419  2BFA               	goto	l3865
  5797  141A  3A03               	xorlw	3	; case 2
  5798  141B  1903               	skipnz
  5799  141C  2BFC               	goto	l3867
  5800  141D  3A01               	xorlw	1	; case 3
  5801  141E  1903               	skipnz
  5802  141F  2BFE               	goto	l3868
  5803  1420  3A07               	xorlw	7	; case 4
  5804  1421  1903               	skipnz
  5805  1422  2C00               	goto	l3869
  5806  1423  3A01               	xorlw	1	; case 5
  5807  1424  1903               	skipnz
  5808  1425  2C02               	goto	l3870
  5809  1426  3A03               	xorlw	3	; case 6
  5810  1427  1903               	skipnz
  5811  1428  2C04               	goto	l3871
  5812  1429  3A01               	xorlw	1	; case 7
  5813  142A  1903               	skipnz
  5814  142B  2C06               	goto	l3872
  5815  142C  3A0F               	xorlw	15	; case 8
  5816  142D  1903               	skipnz
  5817  142E  2C08               	goto	l3873
  5818  142F  3A01               	xorlw	1	; case 9
  5819  1430  1903               	skipnz
  5820  1431  2C0A               	goto	l3874
  5821  1432  3A03               	xorlw	3	; case 10
  5822  1433  1903               	skipnz
  5823  1434  2C0C               	goto	l3875
  5824  1435  3A01               	xorlw	1	; case 11
  5825  1436  1903               	skipnz
  5826  1437  2C0E               	goto	l3876
  5827  1438  3A07               	xorlw	7	; case 12
  5828  1439  1903               	skipnz
  5829  143A  2C10               	goto	l3877
  5830  143B  3A01               	xorlw	1	; case 13
  5831  143C  1903               	skipnz
  5832  143D  2C12               	goto	l3878
  5833  143E  3A03               	xorlw	3	; case 14
  5834  143F  1903               	skipnz
  5835  1440  2C14               	goto	l3879
  5836  1441  2C42               	goto	l16746
  5837  1442                     l16746:	
  5838                           
  5839                           ;display.c: 268: if(ChooseFun >=1 && ChooseFun <= 13)
  5840  1442  083C               	movf	_ChooseFun,w	;volatile
  5841  1443  1903               	btfsc	3,2
  5842  1444  2C69               	goto	l3880
  5843  1445  300E               	movlw	14
  5844  1446  023C               	subwf	_ChooseFun,w	;volatile
  5845  1447  1803               	skipnc
  5846  1448  2C69               	goto	l3880
  5847                           
  5848                           ;display.c: 269: {
  5849                           ;display.c: 270: if(WorkStage != 1)
  5850  1449  033F               	decf	_WorkStage,w	;volatile
  5851  144A  1903               	btfsc	3,2
  5852  144B  2C99               	goto	l16786
  5853                           
  5854                           ;display.c: 271: {
  5855                           ;display.c: 272: if(WorkTimeS > 0 || WorkTimeM > 0) (DispData[6] |= 0x02);
  5856  144C  0834               	movf	_WorkTimeS,w	;volatile
  5857  144D  1903               	btfsc	3,2
  5858  144E  083D               	movf	_WorkTimeM,w	;volatile
  5859  144F  1D03               	btfss	3,2
  5860  1450  14A6               	bsf	_DispData+6,1	;volatile
  5861                           
  5862                           ;display.c: 273: if(Ad_Bot >= 154) Led_Step_100C = 1;
  5863  1451  309A               	movlw	154
  5864  1452  024F               	subwf	_Ad_Bot,w	;volatile
  5865  1453  1C03               	skipc
  5866  1454  2C58               	goto	l16760
  5867  1455  3001               	movlw	1
  5868  1456  1683               	bsf	3,5	;RP0=1, select bank1
  5869  1457  00CD               	movwf	_Led_Step_100C^(0+128)	;volatile
  5870  1458                     l16760:	
  5871                           
  5872                           ;display.c: 274: if(Led_Step_100C) (DispData[6] |= 0x80);
  5873  1458  1683               	bsf	3,5	;RP0=1, select bank1
  5874  1459  084D               	movf	_Led_Step_100C^(0+128),w	;volatile
  5875  145A  1283               	bcf	3,5	;RP0=0, select bank0
  5876  145B  1D03               	btfss	3,2
  5877  145C  17A6               	bsf	_DispData+6,7	;volatile
  5878                           
  5879                           ;display.c: 275: if(WorkStage == 3)
  5880  145D  3003               	movlw	3
  5881  145E  1283               	bcf	3,5	;RP0=0, select bank0
  5882  145F  063F               	xorwf	_WorkStage,w	;volatile
  5883  1460  1D03               	btfss	3,2
  5884  1461  2C99               	goto	l16786
  5885                           
  5886                           ;display.c: 276: {
  5887                           ;display.c: 277: if(4*WorkTimeM >= 2*TotalTimeSave) (DispData[6] |= 0x10);
  5888  1462  083E               	movf	_TotalTimeSave,w	;volatile
  5889  1463  00E2               	movwf	??_Work_Mode_Show
  5890                           
  5891                           ;display.c: 278: if(4*WorkTimeM >= 3*TotalTimeSave) (DispData[6] |= 0x04);
  5892  1464  2799  160A  118A   	fcall	PL12	;call to abstracted procedure
  5893  1467  083E               	movf	_TotalTimeSave,w	;volatile
  5894  1468  2C81               	goto	L9
  5895  1469                     l3880:	
  5896                           ;display.c: 279: }
  5897                           ;display.c: 280: }
  5898                           ;display.c: 281: }
  5899                           
  5900                           
  5901                           ;display.c: 282: else
  5902                           ;display.c: 283: {
  5903                           ;display.c: 284: (DispData[6] |= 0x02);
  5904  1469  14A6               	bsf	_DispData+6,1	;volatile
  5905                           
  5906                           ;display.c: 285: if(4*WorkTimeM >= 1*CountDownTimeSave) (DispData[6] |= 0x80);
  5907  146A  083D               	movf	_WorkTimeM,w	;volatile
  5908  146B  27C5  160A  118A   	fcall	PL20	;call to abstracted procedure
  5909  146E  3080               	movlw	128
  5910  146F  0264               	subwf	??_Work_Mode_Show+2,w
  5911  1470  1D03               	skipz
  5912  1471  2C74               	goto	u8555
  5913  1472  0833               	movf	_CountDownTimeSave,w	;volatile
  5914  1473  0262               	subwf	??_Work_Mode_Show,w
  5915  1474                     u8555:	
  5916  1474  1C03               	skipc
  5917  1475  2C79               	goto	l16778
  5918  1476  1283               	bcf	3,5	;RP0=0, select bank0
  5919  1477  1303               	bcf	3,6	;RP1=0, select bank0
  5920  1478  17A6               	bsf	_DispData+6,7	;volatile
  5921  1479                     l16778:	
  5922                           
  5923                           ;display.c: 286: if(4*WorkTimeM >= 2*CountDownTimeSave) (DispData[6] |= 0x10);
  5924  1479  1283               	bcf	3,5	;RP0=0, select bank0
  5925  147A  1303               	bcf	3,6	;RP1=0, select bank0
  5926  147B  0833               	movf	_CountDownTimeSave,w	;volatile
  5927  147C  00E2               	movwf	??_Work_Mode_Show
  5928                           
  5929                           ;display.c: 287: if(4*WorkTimeM >= 3*CountDownTimeSave) (DispData[6] |= 0x04);
  5930  147D  2799  160A  118A   	fcall	PL12	;call to abstracted procedure
  5931  1480  0833               	movf	_CountDownTimeSave,w	;volatile
  5932  1481                     L9:	
  5933  1481  00DA               	movwf	___wmul@multiplier
  5934  1482  3003               	movlw	3
  5935  1483  01DB               	clrf	___wmul@multiplier+1
  5936  1484  00DC               	movwf	___wmul@multiplicand
  5937  1485  01DD               	clrf	___wmul@multiplicand+1
  5938  1486  2736  160A  118A   	fcall	___wmul
  5939  1489  083D               	movf	_WorkTimeM,w	;volatile
  5940  148A  27C5  160A  118A   	fcall	PL20	;call to abstracted procedure
  5941  148D  085B               	movf	?___wmul+1,w
  5942  148E  3A80               	xorlw	128
  5943  148F  0264               	subwf	??_Work_Mode_Show+2,w
  5944  1490  1D03               	skipz
  5945  1491  2C94               	goto	u8575
  5946  1492  085A               	movf	?___wmul,w
  5947  1493  0262               	subwf	??_Work_Mode_Show,w
  5948  1494                     u8575:	
  5949  1494  1C03               	skipc
  5950  1495  2C99               	goto	l16786
  5951  1496  1283               	bcf	3,5	;RP0=0, select bank0
  5952  1497  1303               	bcf	3,6	;RP1=0, select bank0
  5953  1498  1526               	bsf	_DispData+6,2	;volatile
  5954  1499                     l16786:	
  5955                           
  5956                           ;display.c: 288: }
  5957                           ;display.c: 329: if(WorkStage == 1)
  5958  1499  1283               	bcf	3,5	;RP0=0, select bank0
  5959  149A  1303               	bcf	3,6	;RP1=0, select bank0
  5960  149B  0B3F               	decfsz	_WorkStage,w	;volatile
  5961  149C  2CA6               	goto	l16792
  5962                           
  5963                           ;display.c: 330: {
  5964                           ;display.c: 331: (DispData[4] |= 0x02);
  5965  149D  14A4               	bsf	_DispData+4,1	;volatile
  5966                           
  5967                           ;display.c: 332: DIG_Show_Time(PresetTimeH, PresetTimeM, b_LedCol);
  5968  149E  0835               	movf	_PresetTimeM,w	;volatile
  5969  149F  00DF               	movwf	DIG_Show_Time@min
  5970  14A0  3000               	movlw	0
  5971  14A1  1AF0               	btfsc	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  5972  14A2  3001               	movlw	1
  5973  14A3  00E0               	movwf	DIG_Show_Time@point
  5974  14A4  0836               	movf	_PresetTimeH,w	;volatile
  5975  14A5  2F4F               	ljmp	_DIG_Show_Time
  5976  14A6                     l16792:	
  5977                           ;display.c: 333: }
  5978                           
  5979                           
  5980                           ;display.c: 335: else if(WorkStage == 2)
  5981  14A6  3002               	movlw	2
  5982  14A7  063F               	xorwf	_WorkStage,w	;volatile
  5983  14A8  1D03               	btfss	3,2
  5984  14A9  2CF0               	goto	l16796
  5985                           
  5986                           ;display.c: 336: {
  5987                           ;display.c: 337: DispData[0] |= HOT_RUN_TAB[HorseCount][0];
  5988  14AA  0832               	movf	_HorseCount,w	;volatile
  5989  14AB  00E2               	movwf	??_Work_Mode_Show
  5990  14AC  3001               	movlw	1
  5991  14AD  1003               	clrc
  5992  14AE                     L5:	
  5993  14AE  0DE2               	rlf	??_Work_Mode_Show,f
  5994  14AF  3EFF               	addlw	-1
  5995  14B0  1003               	clrc
  5996  14B1  1D03               	skipz
  5997  14B2  2CAE               	goto	L5
  5998  14B3  0D62               	rlf	??_Work_Mode_Show,w
  5999  14B4  27B8               	fcall	PL16	;call to abstracted procedure
  6000  14B5  160A  158A  2000  160A  118A  	fcall	stringtab
  6001  14BA  04A0               	iorwf	_DispData,f	;volatile
  6002                           
  6003                           ;display.c: 338: DispData[1] |= HOT_RUN_TAB[HorseCount][1];
  6004  14BB  0832               	movf	_HorseCount,w	;volatile
  6005  14BC  00E2               	movwf	??_Work_Mode_Show
  6006  14BD  3001               	movlw	1
  6007  14BE  1003               	clrc
  6008  14BF                     L6:	
  6009  14BF  0DE2               	rlf	??_Work_Mode_Show,f
  6010  14C0  3EFF               	addlw	-1
  6011  14C1  1003               	clrc
  6012  14C2  1D03               	skipz
  6013  14C3  2CBF               	goto	L6
  6014  14C4  0D62               	rlf	??_Work_Mode_Show,w
  6015  14C5  3E01               	addlw	1
  6016  14C6  27B8               	fcall	PL16	;call to abstracted procedure
  6017  14C7  160A  158A  2000  160A  118A  	fcall	stringtab
  6018  14CC  04A1               	iorwf	_DispData+1,f	;volatile
  6019                           
  6020                           ;display.c: 339: DispData[2] |= HOT_RUN_TAB[HorseCount][2];
  6021  14CD  0832               	movf	_HorseCount,w	;volatile
  6022  14CE  00E2               	movwf	??_Work_Mode_Show
  6023  14CF  3001               	movlw	1
  6024  14D0  1003               	clrc
  6025  14D1                     L7:	
  6026  14D1  0DE2               	rlf	??_Work_Mode_Show,f
  6027  14D2  3EFF               	addlw	-1
  6028  14D3  1003               	clrc
  6029  14D4  1D03               	skipz
  6030  14D5  2CD1               	goto	L7
  6031  14D6  0D62               	rlf	??_Work_Mode_Show,w
  6032  14D7  3E02               	addlw	2
  6033  14D8  27B8               	fcall	PL16	;call to abstracted procedure
  6034  14D9  160A  158A  2000  160A  118A  	fcall	stringtab
  6035  14DE  04A2               	iorwf	_DispData+2,f	;volatile
  6036                           
  6037                           ;display.c: 340: DispData[3] |= HOT_RUN_TAB[HorseCount][3];
  6038  14DF  0832               	movf	_HorseCount,w	;volatile
  6039  14E0  00E2               	movwf	??_Work_Mode_Show
  6040  14E1  3001               	movlw	1
  6041  14E2  1003               	clrc
  6042  14E3                     L8:	
  6043  14E3  0DE2               	rlf	??_Work_Mode_Show,f
  6044  14E4  3EFF               	addlw	-1
  6045  14E5  1003               	clrc
  6046  14E6  1D03               	skipz
  6047  14E7  2CE3               	goto	L8
  6048  14E8  0D62               	rlf	??_Work_Mode_Show,w
  6049  14E9  3E03               	addlw	3
  6050  14EA  27B8               	fcall	PL16	;call to abstracted procedure
  6051  14EB  160A  158A  2000   	fcall	stringtab
  6052  14EE  04A3               	iorwf	_DispData+3,f	;volatile
  6053                           
  6054                           ;display.c: 342: }
  6055  14EF  0008               	return
  6056  14F0                     l16796:	
  6057                           
  6058                           ;display.c: 344: else if(WorkStage == 3)
  6059  14F0  3003               	movlw	3
  6060  14F1  063F               	xorwf	_WorkStage,w	;volatile
  6061  14F2  1D03               	btfss	3,2
  6062  14F3  0008               	return
  6063                           
  6064                           ;display.c: 345: {
  6065                           ;display.c: 346: if( ChooseFun == 14 || ChooseFun == 12)
  6066  14F4  300E               	movlw	14
  6067  14F5  063C               	xorwf	_ChooseFun,w	;volatile
  6068  14F6  1903               	btfsc	3,2
  6069  14F7  2CFC               	goto	l16802
  6070  14F8  300C               	movlw	12
  6071  14F9  063C               	xorwf	_ChooseFun,w	;volatile
  6072  14FA  1D03               	btfss	3,2
  6073  14FB  2D36               	goto	l16814
  6074  14FC                     l16802:	
  6075                           
  6076                           ;display.c: 347: {
  6077                           ;display.c: 348: HourBuf = (CountDownTime)/60;
  6078  14FC  303C               	movlw	60
  6079  14FD  00DA               	movwf	___lbdiv@divisor
  6080  14FE  0840               	movf	_CountDownTime,w	;volatile
  6081  14FF  271B  160A  118A   	fcall	___lbdiv
  6082  1502  00B8               	movwf	_HourBuf	;volatile
  6083                           
  6084                           ;display.c: 350: DispData[0] |= 0;
  6085  1503  303C               	movlw	60
  6086  1504  00DA               	movwf	___lbmod@divisor
  6087  1505  0840               	movf	_CountDownTime,w	;volatile
  6088  1506  26FF  160A  118A   	fcall	___lbmod
  6089  1509  00B7               	movwf	_MinBuf	;volatile
  6090                           
  6091                           ;display.c: 351: DispData[1] |= SEG_MATH_TAB[HourBuf%10];
  6092  150A  300A               	movlw	10
  6093  150B  00DA               	movwf	___lbmod@divisor
  6094  150C  0838               	movf	_HourBuf,w	;volatile
  6095  150D  26FF  160A  118A   	fcall	___lbmod
  6096  1510  2792               	fcall	PL6	;call to abstracted procedure
  6097  1511  160A  158A  2000  160A  118A  	fcall	stringtab
  6098  1516  04A1               	iorwf	_DispData+1,f	;volatile
  6099                           
  6100                           ;display.c: 352: DispData[2] |= SEG_MATH_TAB[MinBuf/10];
  6101  1517  300A               	movlw	10
  6102  1518  00DA               	movwf	___lbdiv@divisor
  6103  1519  0837               	movf	_MinBuf,w	;volatile
  6104  151A  271B  160A  118A   	fcall	___lbdiv
  6105  151D  2792               	fcall	PL6	;call to abstracted procedure
  6106  151E  160A  158A  2000  160A  118A  	fcall	stringtab
  6107  1523  04A2               	iorwf	_DispData+2,f	;volatile
  6108                           
  6109                           ;display.c: 353: DispData[3] |= SEG_MATH_TAB[MinBuf%10];
  6110  1524  300A               	movlw	10
  6111  1525  00DA               	movwf	___lbmod@divisor
  6112  1526  0837               	movf	_MinBuf,w	;volatile
  6113  1527  26FF  160A  118A   	fcall	___lbmod
  6114  152A  2792               	fcall	PL6	;call to abstracted procedure
  6115  152B  160A  158A  2000  160A  118A  	fcall	stringtab
  6116  1530  04A3               	iorwf	_DispData+3,f	;volatile
  6117                           
  6118                           ;display.c: 354: if(b_LedCol)
  6119  1531  1EF0               	btfss	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  6120  1532  0008               	return
  6121                           
  6122                           ;display.c: 355: {
  6123                           ;display.c: 356: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  6124  1533  17A2               	bsf	_DispData+2,7	;volatile
  6125  1534  17A1               	bsf	_DispData+1,7	;volatile
  6126  1535  0008               	return
  6127  1536                     l16814:	
  6128                           
  6129                           ;display.c: 359: else
  6130                           ;display.c: 360: {
  6131                           ;display.c: 361: DIG_Show_Time(0, CountDownTime, 1);
  6132  1536  0840               	movf	_CountDownTime,w	;volatile
  6133  1537  00DF               	movwf	DIG_Show_Time@min
  6134  1538  3000               	movlw	0
  6135  1539  01E0               	clrf	DIG_Show_Time@point
  6136  153A  0AE0               	incf	DIG_Show_Time@point,f
  6137  153B  2F4F               	ljmp	_DIG_Show_Time
  6138  153C                     __end_of_Work_Mode_Show:	
  6139  153C                     __ptext26:	
  6140 ;; *************** function _Factory_Show *****************
  6141 ;; Defined at:
  6142 ;;		line 547 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : B00/0
  6153 ;;		On exit  : 300/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6156 ;;      Params:         0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0
  6158 ;;      Temps:          0       1       0       0       0
  6159 ;;      Totals:         0       1       0       0       0
  6160 ;;Total ram usage:        1 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    3
  6163 ;; This function calls:
  6164 ;;		___lbdiv
  6165 ;;		___lbmod
  6166 ;; This function is called by:
  6167 ;;		_LED_Task
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _Factory_Show
  6173  153C                     _Factory_Show:	
  6174                           
  6175                           ;display.c: 550: switch(FactoryTestData)
  6176                           
  6177                           ;incstack = 0
  6178                           ; Regs used in _Factory_Show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6179  153C  2E8D               	goto	l15608
  6180  153D                     l3961:	
  6181                           ;display.c: 551: {
  6182                           ;display.c: 552: case 20:
  6183                           
  6184                           
  6185                           ;display.c: 553: if(b_Auto_test)
  6186  153D  1DF1               	btfss	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
  6187  153E  2D59               	goto	l15580
  6188                           
  6189                           ;display.c: 554: {
  6190                           ;display.c: 556: DispData[0] |= (0x01 + 0x02 + 0x10 + 0x20 + 0x40);
  6191  153F  3073               	movlw	115
  6192  1540  04A0               	iorwf	_DispData,f	;volatile
  6193                           
  6194                           ;display.c: 557: DispData[1] |= SEG_MATH_TAB[10];
  6195  1541  3082               	movlw	low ((_SEG_MATH_TAB+10)| (0+32768))
  6196  1542  0084               	movwf	4
  6197  1543  3099               	movlw	high ((_SEG_MATH_TAB+10)| (0+32768))
  6198  1544  00FF               	movwf	127
  6199  1545  160A  158A  2000  160A  118A  	fcall	stringtab
  6200  154A  04A1               	iorwf	_DispData+1,f	;volatile
  6201                           
  6202                           ;display.c: 558: DispData[2] |= SEG_MATH_TAB[5];
  6203  154B  307D               	movlw	low ((_SEG_MATH_TAB+5)| (0+32768))
  6204  154C  0084               	movwf	4
  6205  154D  3099               	movlw	high ((_SEG_MATH_TAB+5)| (0+32768))
  6206  154E  00FF               	movwf	127
  6207  154F  160A  158A  2000  160A  118A  	fcall	stringtab
  6208  1554  04A2               	iorwf	_DispData+2,f	;volatile
  6209                           
  6210                           ;display.c: 559: DispData[3] |= SEG_MATH_TAB[5];
  6211  1555  307D               	movlw	low ((_SEG_MATH_TAB+5)| (0+32768))
  6212  1556  0084               	movwf	4
  6213  1557  3099               	movlw	high ((_SEG_MATH_TAB+5)| (0+32768))
  6214  1558  2E1D               	goto	L39
  6215  1559                     l15580:	
  6216                           ;display.c: 560: break;
  6217                           
  6218                           
  6219                           ;display.c: 561: }
  6220                           ;display.c: 563: DispData[0] |= SEG_MATH_TAB[0];
  6221  1559  3078               	movlw	low (_SEG_MATH_TAB| (0+32768))
  6222  155A  0084               	movwf	4
  6223  155B  3099               	movlw	high (_SEG_MATH_TAB| (0+32768))
  6224  155C  00FF               	movwf	127
  6225  155D  160A  158A  2000  160A  118A  	fcall	stringtab
  6226  1562  04A0               	iorwf	_DispData,f	;volatile
  6227                           
  6228                           ;display.c: 564: DispData[1] |= SEG_MATH_TAB[0];
  6229  1563  3078               	movlw	low (_SEG_MATH_TAB| (0+32768))
  6230  1564  0084               	movwf	4
  6231  1565  3099               	movlw	high (_SEG_MATH_TAB| (0+32768))
  6232  1566  00FF               	movwf	127
  6233  1567  160A  158A  2000  160A  118A  	fcall	stringtab
  6234  156C  04A1               	iorwf	_DispData+1,f	;volatile
  6235                           
  6236                           ;display.c: 565: DispData[2] |= SEG_MATH_TAB[CountDownTime/10];
  6237  156D  300A               	movlw	10
  6238  156E  00DA               	movwf	___lbdiv@divisor
  6239  156F  0840               	movf	_CountDownTime,w	;volatile
  6240  1570  271B  160A  118A   	fcall	___lbdiv
  6241  1573  2792               	fcall	PL6	;call to abstracted procedure
  6242  1574  160A  158A  2000  160A  118A  	fcall	stringtab
  6243  1579  04A2               	iorwf	_DispData+2,f	;volatile
  6244                           
  6245                           ;display.c: 566: DispData[3] |= SEG_MATH_TAB[CountDownTime%10];
  6246  157A  300A               	movlw	10
  6247  157B  00DA               	movwf	___lbmod@divisor
  6248  157C  0840               	movf	_CountDownTime,w	;volatile
  6249  157D  26FF  160A  118A   	fcall	___lbmod
  6250  1580  2792               	fcall	PL6	;call to abstracted procedure
  6251  1581  160A  158A  2000  160A  118A  	fcall	stringtab
  6252  1586  04A3               	iorwf	_DispData+3,f	;volatile
  6253                           
  6254                           ;display.c: 567: if(b_LedCol)
  6255  1587  1EF0               	btfss	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  6256  1588  2ECE               	goto	l15610
  6257                           
  6258                           ;display.c: 568: {
  6259                           ;display.c: 569: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  6260  1589  17A2               	bsf	_DispData+2,7	;volatile
  6261  158A  17A1               	bsf	_DispData+1,7	;volatile
  6262  158B  2ECE               	goto	l15610
  6263  158C                     l3965:	
  6264                           ;display.c: 573: case 19:
  6265                           
  6266                           
  6267                           ;display.c: 574: if(b_Auto_test)
  6268  158C  1DF1               	btfss	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
  6269  158D  2DD0               	goto	l3966
  6270                           
  6271                           ;display.c: 575: {
  6272                           ;display.c: 576: if(b_LidClosed == 0)
  6273  158E  1BF2               	btfsc	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
  6274  158F  2D93               	goto	l15594
  6275                           
  6276                           ;display.c: 577: {
  6277                           ;display.c: 579: FactoryTestData = 20;
  6278  1590  3014               	movlw	20
  6279  1591  00C1               	movwf	_FactoryTestData	;volatile
  6280                           
  6281                           ;display.c: 580: }
  6282  1592  2ECE               	goto	l15610
  6283  1593                     l15594:	
  6284                           
  6285                           ;display.c: 581: else
  6286                           ;display.c: 582: {
  6287                           ;display.c: 583: DispData[0] |= HOT_RUN_TAB[HorseCount][0];
  6288  1593  0832               	movf	_HorseCount,w	;volatile
  6289  1594  00DF               	movwf	??_Factory_Show
  6290  1595  3001               	movlw	1
  6291  1596  1003               	clrc
  6292  1597                     L26:	
  6293  1597  0DDF               	rlf	??_Factory_Show,f
  6294  1598  3EFF               	addlw	-1
  6295  1599  1003               	clrc
  6296  159A  1D03               	skipz
  6297  159B  2D97               	goto	L26
  6298  159C  0D5F               	rlf	??_Factory_Show,w
  6299  159D  27B8               	fcall	PL16	;call to abstracted procedure
  6300  159E  160A  158A  2000  160A  118A  	fcall	stringtab
  6301  15A3  04A0               	iorwf	_DispData,f	;volatile
  6302                           
  6303                           ;display.c: 584: DispData[1] |= HOT_RUN_TAB[HorseCount][1];
  6304  15A4  0832               	movf	_HorseCount,w	;volatile
  6305  15A5  00DF               	movwf	??_Factory_Show
  6306  15A6  3001               	movlw	1
  6307  15A7  1003               	clrc
  6308  15A8                     L27:	
  6309  15A8  0DDF               	rlf	??_Factory_Show,f
  6310  15A9  3EFF               	addlw	-1
  6311  15AA  1003               	clrc
  6312  15AB  1D03               	skipz
  6313  15AC  2DA8               	goto	L27
  6314  15AD  0D5F               	rlf	??_Factory_Show,w
  6315  15AE  3E01               	addlw	1
  6316  15AF  27B8               	fcall	PL16	;call to abstracted procedure
  6317  15B0  160A  158A  2000  160A  118A  	fcall	stringtab
  6318  15B5  04A1               	iorwf	_DispData+1,f	;volatile
  6319                           
  6320                           ;display.c: 585: DispData[2] |= HOT_RUN_TAB[HorseCount][2];
  6321  15B6  0832               	movf	_HorseCount,w	;volatile
  6322  15B7  00DF               	movwf	??_Factory_Show
  6323  15B8  3001               	movlw	1
  6324  15B9  1003               	clrc
  6325  15BA                     L28:	
  6326  15BA  0DDF               	rlf	??_Factory_Show,f
  6327  15BB  3EFF               	addlw	-1
  6328  15BC  1003               	clrc
  6329  15BD  1D03               	skipz
  6330  15BE  2DBA               	goto	L28
  6331  15BF  0D5F               	rlf	??_Factory_Show,w
  6332  15C0  3E02               	addlw	2
  6333  15C1  27B8               	fcall	PL16	;call to abstracted procedure
  6334  15C2  160A  158A  2000  160A  118A  	fcall	stringtab
  6335                           
  6336                           ;display.c: 586: DispData[3] |= HOT_RUN_TAB[HorseCount][3];
  6337  15C7  27F4  160A  118A   	fcall	PL34	;call to abstracted procedure
  6338  15CA                     L29:	
  6339  15CA  0DDF               	rlf	??_Factory_Show,f
  6340  15CB  3EFF               	addlw	-1
  6341  15CC  1003               	clrc
  6342  15CD  1D03               	skipz
  6343  15CE  2DCA               	goto	L29
  6344  15CF  2E16               	goto	L38
  6345  15D0                     l3966:	
  6346                           
  6347                           ;display.c: 589: }
  6348                           ;display.c: 592: if(b_BotTempOut == 1)
  6349  15D0  1D71               	btfss	_b_BotTempOut/(0+8),_b_BotTempOut& (0+7)	;volatile
  6350  15D1  2DDA               	goto	l15600
  6351                           
  6352                           ;display.c: 593: {
  6353                           ;display.c: 594: if(b_LedCol)
  6354  15D2  1EF0               	btfss	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
  6355  15D3  2ECE               	goto	l15610
  6356                           
  6357                           ;display.c: 595: {
  6358                           ;display.c: 596: DispData[1] |= (0x02 + 0x04 + 0x10 + 0x20 + 0x40);
  6359  15D4  3076               	movlw	118
  6360  15D5  04A1               	iorwf	_DispData+1,f	;volatile
  6361                           
  6362                           ;display.c: 597: DispData[2] |= 0x04|0x08|0x10|0x40;
  6363  15D6  305C               	movlw	92
  6364  15D7  04A2               	iorwf	_DispData+2,f	;volatile
  6365                           
  6366                           ;display.c: 598: DispData[3] |= 0x08|0x10|0x20|0x40;
  6367  15D8  3078               	movlw	120
  6368  15D9  2E23               	goto	L36
  6369  15DA                     l15600:	
  6370                           
  6371                           ;display.c: 601: else
  6372                           ;display.c: 602: {
  6373                           ;display.c: 603: DispData[0] |= HOT_RUN_TAB[HorseCount][0];
  6374  15DA  0832               	movf	_HorseCount,w	;volatile
  6375  15DB  00DF               	movwf	??_Factory_Show
  6376  15DC  3001               	movlw	1
  6377  15DD  1003               	clrc
  6378  15DE                     L30:	
  6379  15DE  0DDF               	rlf	??_Factory_Show,f
  6380  15DF  3EFF               	addlw	-1
  6381  15E0  1003               	clrc
  6382  15E1  1D03               	skipz
  6383  15E2  2DDE               	goto	L30
  6384  15E3  0D5F               	rlf	??_Factory_Show,w
  6385  15E4  27B8               	fcall	PL16	;call to abstracted procedure
  6386  15E5  160A  158A  2000  160A  118A  	fcall	stringtab
  6387  15EA  04A0               	iorwf	_DispData,f	;volatile
  6388                           
  6389                           ;display.c: 604: DispData[1] |= HOT_RUN_TAB[HorseCount][1];
  6390  15EB  0832               	movf	_HorseCount,w	;volatile
  6391  15EC  00DF               	movwf	??_Factory_Show
  6392  15ED  3001               	movlw	1
  6393  15EE  1003               	clrc
  6394  15EF                     L31:	
  6395  15EF  0DDF               	rlf	??_Factory_Show,f
  6396  15F0  3EFF               	addlw	-1
  6397  15F1  1003               	clrc
  6398  15F2  1D03               	skipz
  6399  15F3  2DEF               	goto	L31
  6400  15F4  0D5F               	rlf	??_Factory_Show,w
  6401  15F5  3E01               	addlw	1
  6402  15F6  27B8               	fcall	PL16	;call to abstracted procedure
  6403  15F7  160A  158A  2000  160A  118A  	fcall	stringtab
  6404  15FC  04A1               	iorwf	_DispData+1,f	;volatile
  6405                           
  6406                           ;display.c: 605: DispData[2] |= HOT_RUN_TAB[HorseCount][2];
  6407  15FD  0832               	movf	_HorseCount,w	;volatile
  6408  15FE  00DF               	movwf	??_Factory_Show
  6409  15FF  3001               	movlw	1
  6410  1600  1003               	clrc
  6411  1601                     L32:	
  6412  1601  0DDF               	rlf	??_Factory_Show,f
  6413  1602  3EFF               	addlw	-1
  6414  1603  1003               	clrc
  6415  1604  1D03               	skipz
  6416  1605  2E01               	goto	L32
  6417  1606  0D5F               	rlf	??_Factory_Show,w
  6418  1607  3E02               	addlw	2
  6419  1608  27B8               	fcall	PL16	;call to abstracted procedure
  6420  1609  160A  158A  2000  160A  118A  	fcall	stringtab
  6421                           
  6422                           ;display.c: 606: DispData[3] |= HOT_RUN_TAB[HorseCount][3];
  6423  160E  27F4  160A  118A   	fcall	PL34	;call to abstracted procedure
  6424  1611                     L33:	
  6425  1611  0DDF               	rlf	??_Factory_Show,f
  6426  1612  3EFF               	addlw	-1
  6427  1613  1003               	clrc
  6428  1614  1D03               	skipz
  6429  1615  2E11               	goto	L33
  6430  1616                     L38:	
  6431  1616  0D5F               	rlf	??_Factory_Show,w
  6432  1617  3E03               	addlw	3
  6433  1618  3E44               	addlw	low (_HOT_RUN_TAB| (0+32768))
  6434  1619  0084               	movwf	4
  6435  161A  3099               	movlw	high (_HOT_RUN_TAB| (0+32768))
  6436  161B  1803               	skipnc
  6437  161C  3E01               	addlw	1
  6438  161D                     L39:	
  6439  161D  00FF               	movwf	127
  6440  161E  160A  158A  2000  160A  118A  	fcall	stringtab
  6441  1623                     L36:	
  6442  1623  04A3               	iorwf	_DispData+3,f	;volatile
  6443  1624  2ECE               	goto	l15610
  6444  1625                     l3974:	
  6445                           ;display.c: 615: case 16: (DispData[5] |= 0x02);;
  6446                           
  6447  1625  2E28               	goto	L37
  6448  1626                     l3975:	
  6449                           ;display.c: 618: case 15: (DispData[4] |= 0x80); (DispData[6] |= 0x02); (DispData[5] |= 
      +                          0x02);;
  6450                           
  6451                           ;display.c: 616: break;
  6452                           
  6453  1626  17A4               	bsf	_DispData+4,7	;volatile
  6454  1627  14A6               	bsf	_DispData+6,1	;volatile
  6455  1628                     L37:	
  6456  1628  14A5               	bsf	_DispData+5,1	;volatile
  6457                           
  6458                           ;display.c: 619: break;
  6459  1629  2ECE               	goto	l15610
  6460  162A                     l3976:	
  6461                           ;display.c: 621: case 14: (DispData[5] |= 0x80); (DispData[6] |= 0x10); (DispData[6] |= 
      +                          0x80);;
  6462                           
  6463  162A  17A5               	bsf	_DispData+5,7	;volatile
  6464  162B  1626               	bsf	_DispData+6,4	;volatile
  6465  162C  17A6               	bsf	_DispData+6,7	;volatile
  6466                           
  6467                           ;display.c: 622: break;
  6468  162D  2ECE               	goto	l15610
  6469  162E                     l3977:	
  6470                           ;display.c: 624: case 13: (DispData[4] |= 0x02); (DispData[6] |= 0x08); (DispData[6] |= 
      +                          0x04);;
  6471                           
  6472  162E  14A4               	bsf	_DispData+4,1	;volatile
  6473  162F  15A6               	bsf	_DispData+6,3	;volatile
  6474  1630  1526               	bsf	_DispData+6,2	;volatile
  6475                           
  6476                           ;display.c: 625: break;
  6477  1631  2ECE               	goto	l15610
  6478  1632                     l3978:	
  6479                           ;display.c: 627: case 12: (DispData[4] |= 0x10);;
  6480                           
  6481  1632  1624               	bsf	_DispData+4,4	;volatile
  6482                           
  6483                           ;display.c: 628: break;
  6484  1633  2ECE               	goto	l15610
  6485  1634                     l3979:	
  6486                           ;display.c: 630: case 11: (DispData[4] |= 0x04);;
  6487                           
  6488  1634  1524               	bsf	_DispData+4,2	;volatile
  6489                           
  6490                           ;display.c: 631: break;
  6491  1635  2ECE               	goto	l15610
  6492  1636                     l3980:	
  6493                           ;display.c: 633: case 10: (DispData[4] |= 0x20);;
  6494                           
  6495  1636  16A4               	bsf	_DispData+4,5	;volatile
  6496                           
  6497                           ;display.c: 634: break;
  6498  1637  2ECE               	goto	l15610
  6499  1638                     l3981:	
  6500                           ;display.c: 636: case 9: (DispData[4] |= 0x08);;
  6501                           
  6502  1638  15A4               	bsf	_DispData+4,3	;volatile
  6503                           
  6504                           ;display.c: 637: break;
  6505  1639  2ECE               	goto	l15610
  6506  163A                     l3982:	
  6507                           ;display.c: 639: case 8: (DispData[5] |= 0x10);;
  6508                           
  6509  163A  1625               	bsf	_DispData+5,4	;volatile
  6510                           
  6511                           ;display.c: 640: break;
  6512  163B  2ECE               	goto	l15610
  6513  163C                     l3983:	
  6514                           ;display.c: 642: case 7: (DispData[5] |= 0x04);;
  6515                           
  6516  163C  1525               	bsf	_DispData+5,2	;volatile
  6517                           
  6518                           ;display.c: 643: break;
  6519  163D  2ECE               	goto	l15610
  6520  163E                     l3984:	
  6521                           ;display.c: 645: case 6: (DispData[5] |= 0x20);;
  6522                           
  6523  163E  16A5               	bsf	_DispData+5,5	;volatile
  6524                           
  6525                           ;display.c: 646: break;
  6526  163F  2ECE               	goto	l15610
  6527  1640                     l3985:	
  6528                           ;display.c: 648: case 5: (DispData[5] |= 0x08);;
  6529                           
  6530  1640  15A5               	bsf	_DispData+5,3	;volatile
  6531                           
  6532                           ;display.c: 649: break;
  6533  1641  2ECE               	goto	l15610
  6534  1642                     l3986:	
  6535                           ;display.c: 651: case 4: (DispData[4] |= 0x40);;
  6536                           
  6537  1642  1724               	bsf	_DispData+4,6	;volatile
  6538                           
  6539                           ;display.c: 652: break;
  6540  1643  2ECE               	goto	l15610
  6541  1644                     l3987:	
  6542                           ;display.c: 654: case 3: (DispData[5] |= 0x01);;
  6543                           
  6544  1644  1425               	bsf	_DispData+5,0	;volatile
  6545                           
  6546                           ;display.c: 655: break;
  6547  1645  2ECE               	goto	l15610
  6548  1646                     l3988:	
  6549                           ;display.c: 657: case 2: (DispData[5] |= 0x40);;
  6550                           
  6551  1646  1725               	bsf	_DispData+5,6	;volatile
  6552                           
  6553                           ;display.c: 658: break;
  6554  1647  2ECE               	goto	l15610
  6555  1648                     l3989:	
  6556                           ;display.c: 660: case 1: (DispData[4] |= 0x01);;
  6557                           
  6558  1648  1424               	bsf	_DispData+4,0	;volatile
  6559                           
  6560                           ;display.c: 661: break;
  6561  1649  2ECE               	goto	l15610
  6562  164A                     l3990:	
  6563                           ;display.c: 663: case 0:
  6564                           
  6565                           
  6566                           ;display.c: 664: (DispData[4] |= 0x01);(DispData[5] |= 0x40);(DispData[5] |= 0x01);(Disp
      +                          Data[4] |= 0x40);(DispData[5] |= 0x08);(DispData[5] |= 0x20);(DispData[5] |= 0x04);(Disp
      +                          Data[5] |= 0x10);(DispData[4] |= 0x08);(DispData[4] |= 0x20);(DispData[4] |= 0x04);(Disp
      +                          Dat
  6567  164A  1424               	bsf	_DispData+4,0	;volatile
  6568  164B  1725               	bsf	_DispData+5,6	;volatile
  6569  164C  1425               	bsf	_DispData+5,0	;volatile
  6570  164D  1724               	bsf	_DispData+4,6	;volatile
  6571  164E  15A5               	bsf	_DispData+5,3	;volatile
  6572  164F  16A5               	bsf	_DispData+5,5	;volatile
  6573  1650  1525               	bsf	_DispData+5,2	;volatile
  6574  1651  1625               	bsf	_DispData+5,4	;volatile
  6575  1652  15A4               	bsf	_DispData+4,3	;volatile
  6576  1653  16A4               	bsf	_DispData+4,5	;volatile
  6577  1654  1524               	bsf	_DispData+4,2	;volatile
  6578  1655  1624               	bsf	_DispData+4,4	;volatile
  6579  1656  14A4               	bsf	_DispData+4,1	;volatile
  6580  1657  15A6               	bsf	_DispData+6,3	;volatile
  6581  1658  1526               	bsf	_DispData+6,2	;volatile
  6582  1659  17A5               	bsf	_DispData+5,7	;volatile
  6583  165A  1626               	bsf	_DispData+6,4	;volatile
  6584  165B  17A6               	bsf	_DispData+6,7	;volatile
  6585  165C  17A4               	bsf	_DispData+4,7	;volatile
  6586  165D  14A6               	bsf	_DispData+6,1	;volatile
  6587  165E  14A5               	bsf	_DispData+5,1	;volatile
  6588  165F  14A5               	bsf	_DispData+5,1	;volatile
  6589  1660  14A5               	bsf	_DispData+5,1	;volatile
  6590                           
  6591                           ;display.c: 665: if(FactoryTestData == 0)
  6592  1661  0841               	movf	_FactoryTestData,w	;volatile
  6593  1662  1D03               	btfss	3,2
  6594  1663  2ECE               	goto	l15610
  6595                           
  6596                           ;display.c: 666: {
  6597                           ;display.c: 667: DispData[0] = SEG_MATH_TAB[10];
  6598  1664  3082               	movlw	low ((_SEG_MATH_TAB+10)| (0+32768))
  6599  1665  0084               	movwf	4
  6600  1666  3099               	movlw	high ((_SEG_MATH_TAB+10)| (0+32768))
  6601  1667  00FF               	movwf	127
  6602  1668  160A  158A  2000  160A  118A  	fcall	stringtab
  6603  166D  00A0               	movwf	_DispData	;volatile
  6604                           
  6605                           ;display.c: 668: DispData[1] = SEG_MATH_TAB[0];
  6606  166E  3078               	movlw	low (_SEG_MATH_TAB| (0+32768))
  6607  166F  0084               	movwf	4
  6608  1670  3099               	movlw	high (_SEG_MATH_TAB| (0+32768))
  6609  1671  00FF               	movwf	127
  6610  1672  160A  158A  2000  160A  118A  	fcall	stringtab
  6611  1677  00A1               	movwf	_DispData+1	;volatile
  6612                           
  6613                           ;display.c: 669: DispData[2] = SEG_MATH_TAB[0];
  6614  1678  3078               	movlw	low (_SEG_MATH_TAB| (0+32768))
  6615  1679  0084               	movwf	4
  6616  167A  3099               	movlw	high (_SEG_MATH_TAB| (0+32768))
  6617  167B  00FF               	movwf	127
  6618  167C  160A  158A  2000  160A  118A  	fcall	stringtab
  6619  1681  00A2               	movwf	_DispData+2	;volatile
  6620                           
  6621                           ;display.c: 670: DispData[3] = SEG_MATH_TAB[8];
  6622  1682  3080               	movlw	low ((_SEG_MATH_TAB+8)| (0+32768))
  6623  1683  0084               	movwf	4
  6624  1684  3099               	movlw	high ((_SEG_MATH_TAB+8)| (0+32768))
  6625  1685  00FF               	movwf	127
  6626  1686  160A  158A  2000  160A  118A  	fcall	stringtab
  6627  168B  00A3               	movwf	_DispData+3	;volatile
  6628  168C  2ECE               	goto	l15610
  6629  168D                     l15608:	
  6630  168D  0841               	movf	_FactoryTestData,w	;volatile
  6631                           
  6632                           ; Switch size 1, requested type "space"
  6633                           ; Number of cases is 21, Range of values is 0 to 20
  6634                           ; switch strategies available:
  6635                           ; Name         Instructions Cycles
  6636                           ; simple_byte           64    33 (average)
  6637                           ; direct_byte           71     8 (fixed)
  6638                           ; jumptable            260     6 (fixed)
  6639                           ;	Chosen strategy is simple_byte
  6640  168E  3A00               	xorlw	0	; case 0
  6641  168F  1903               	skipnz
  6642  1690  2E4A               	goto	l3990
  6643  1691  3A01               	xorlw	1	; case 1
  6644  1692  1903               	skipnz
  6645  1693  2E48               	goto	l3989
  6646  1694  3A03               	xorlw	3	; case 2
  6647  1695  1903               	skipnz
  6648  1696  2E46               	goto	l3988
  6649  1697  3A01               	xorlw	1	; case 3
  6650  1698  1903               	skipnz
  6651  1699  2E44               	goto	l3987
  6652  169A  3A07               	xorlw	7	; case 4
  6653  169B  1903               	skipnz
  6654  169C  2E42               	goto	l3986
  6655  169D  3A01               	xorlw	1	; case 5
  6656  169E  1903               	skipnz
  6657  169F  2E40               	goto	l3985
  6658  16A0  3A03               	xorlw	3	; case 6
  6659  16A1  1903               	skipnz
  6660  16A2  2E3E               	goto	l3984
  6661  16A3  3A01               	xorlw	1	; case 7
  6662  16A4  1903               	skipnz
  6663  16A5  2E3C               	goto	l3983
  6664  16A6  3A0F               	xorlw	15	; case 8
  6665  16A7  1903               	skipnz
  6666  16A8  2E3A               	goto	l3982
  6667  16A9  3A01               	xorlw	1	; case 9
  6668  16AA  1903               	skipnz
  6669  16AB  2E38               	goto	l3981
  6670  16AC  3A03               	xorlw	3	; case 10
  6671  16AD  1903               	skipnz
  6672  16AE  2E36               	goto	l3980
  6673  16AF  3A01               	xorlw	1	; case 11
  6674  16B0  1903               	skipnz
  6675  16B1  2E34               	goto	l3979
  6676  16B2  3A07               	xorlw	7	; case 12
  6677  16B3  1903               	skipnz
  6678  16B4  2E32               	goto	l3978
  6679  16B5  3A01               	xorlw	1	; case 13
  6680  16B6  1903               	skipnz
  6681  16B7  2E2E               	goto	l3977
  6682  16B8  3A03               	xorlw	3	; case 14
  6683  16B9  1903               	skipnz
  6684  16BA  2E2A               	goto	l3976
  6685  16BB  3A01               	xorlw	1	; case 15
  6686  16BC  1903               	skipnz
  6687  16BD  2E26               	goto	l3975
  6688  16BE  3A1F               	xorlw	31	; case 16
  6689  16BF  1903               	skipnz
  6690  16C0  2E25               	goto	l3974
  6691  16C1  3A01               	xorlw	1	; case 17
  6692  16C2  1903               	skipnz
  6693  16C3  2ECE               	goto	l15610
  6694  16C4  3A03               	xorlw	3	; case 18
  6695  16C5  1903               	skipnz
  6696  16C6  2ECE               	goto	l15610
  6697  16C7  3A01               	xorlw	1	; case 19
  6698  16C8  1903               	skipnz
  6699  16C9  2D8C               	goto	l3965
  6700  16CA  3A07               	xorlw	7	; case 20
  6701  16CB  1903               	skipnz
  6702  16CC  2D3D               	goto	l3961
  6703  16CD  2ECE               	goto	l15610
  6704  16CE                     l15610:	
  6705                           
  6706                           ;display.c: 677: if(FactoryTestData >= 2 && FactoryTestData <= 15)
  6707  16CE  3002               	movlw	2
  6708  16CF  0241               	subwf	_FactoryTestData,w	;volatile
  6709  16D0  1C03               	skipc
  6710  16D1  0008               	return
  6711  16D2  3010               	movlw	16
  6712  16D3  0241               	subwf	_FactoryTestData,w	;volatile
  6713  16D4  1803               	skipnc
  6714  16D5  0008               	return
  6715                           
  6716                           ;display.c: 678: {
  6717                           ;display.c: 679: DispData[0] = SEG_MATH_TAB[1];
  6718  16D6  3079               	movlw	low ((_SEG_MATH_TAB+1)| (0+32768))
  6719  16D7  0084               	movwf	4
  6720  16D8  3099               	movlw	high ((_SEG_MATH_TAB+1)| (0+32768))
  6721  16D9  00FF               	movwf	127
  6722  16DA  160A  158A  2000  160A  118A  	fcall	stringtab
  6723  16DF  00A0               	movwf	_DispData	;volatile
  6724                           
  6725                           ;display.c: 680: DispData[1] = SEG_MATH_TAB[2];
  6726  16E0  307A               	movlw	low ((_SEG_MATH_TAB+2)| (0+32768))
  6727  16E1  0084               	movwf	4
  6728  16E2  3099               	movlw	high ((_SEG_MATH_TAB+2)| (0+32768))
  6729  16E3  00FF               	movwf	127
  6730  16E4  160A  158A  2000  160A  118A  	fcall	stringtab
  6731  16E9  00A1               	movwf	_DispData+1	;volatile
  6732                           
  6733                           ;display.c: 681: DispData[2] = SEG_MATH_TAB[3];
  6734  16EA  307B               	movlw	low ((_SEG_MATH_TAB+3)| (0+32768))
  6735  16EB  0084               	movwf	4
  6736  16EC  3099               	movlw	high ((_SEG_MATH_TAB+3)| (0+32768))
  6737  16ED  00FF               	movwf	127
  6738  16EE  160A  158A  2000  160A  118A  	fcall	stringtab
  6739  16F3  00A2               	movwf	_DispData+2	;volatile
  6740                           
  6741                           ;display.c: 682: DispData[3] = SEG_MATH_TAB[4];
  6742  16F4  307C               	movlw	low ((_SEG_MATH_TAB+4)| (0+32768))
  6743  16F5  0084               	movwf	4
  6744  16F6  3099               	movlw	high ((_SEG_MATH_TAB+4)| (0+32768))
  6745  16F7  00FF               	movwf	127
  6746  16F8  160A  158A  2000   	fcall	stringtab
  6747  16FB  00A3               	movwf	_DispData+3	;volatile
  6748                           
  6749                           ;display.c: 683: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  6750  16FC  17A2               	bsf	_DispData+2,7	;volatile
  6751  16FD  17A1               	bsf	_DispData+1,7	;volatile
  6752  16FE  0008               	return
  6753  16FF                     __end_of_Factory_Show:	
  6754  16FF                     __ptext29:	
  6755 ;; *************** function ___lbmod *****************
  6756 ;; Defined at:
  6757 ;;		line 4 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\lbmod.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  dividend        1    wreg     unsigned char 
  6760 ;;  divisor         1    0[BANK0 ] unsigned char 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  dividend        1    2[BANK0 ] unsigned char 
  6763 ;;  rem             1    4[BANK0 ] unsigned char 
  6764 ;;  counter         1    3[BANK0 ] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      unsigned char 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0
  6769 ;; Tracked objects:
  6770 ;;		On entry : 300/0
  6771 ;;		On exit  : 300/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6774 ;;      Params:         0       1       0       0       0
  6775 ;;      Locals:         0       3       0       0       0
  6776 ;;      Temps:          0       1       0       0       0
  6777 ;;      Totals:         0       5       0       0       0
  6778 ;;Total ram usage:        5 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    2
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		_DIG_Show_Time
  6785 ;;		_Fun_Choose_Show
  6786 ;;		_Work_Mode_Show
  6787 ;;		_Error_Show
  6788 ;;		_Test_Mode_Show
  6789 ;;		_Factory_Show
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           
  6794                           ;psect for function ___lbmod
  6795  16FF                     ___lbmod:	
  6796                           
  6797                           ;incstack = 0
  6798                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  6799                           ;___lbmod@dividend stored from wreg
  6800  16FF  00DC               	movwf	___lbmod@dividend
  6801  1700  3008               	movlw	8
  6802  1701  00DD               	movwf	___lbmod@counter
  6803  1702  01DE               	clrf	___lbmod@rem
  6804  1703                     l12038:	
  6805  1703  085C               	movf	___lbmod@dividend,w
  6806  1704  00DB               	movwf	??___lbmod
  6807  1705  3007               	movlw	7
  6808  1706  1003               	clrc
  6809  1707                     L41:	
  6810  1707  0CDB               	rrf	??___lbmod,f
  6811  1708  3EFF               	addlw	-1
  6812  1709  1003               	clrc
  6813  170A  1D03               	skipz
  6814  170B  2F07               	goto	L41
  6815  170C  0D5E               	rlf	___lbmod@rem,w
  6816  170D  045B               	iorwf	??___lbmod,w
  6817  170E  00DE               	movwf	___lbmod@rem
  6818  170F  1003               	clrc
  6819  1710  0DDC               	rlf	___lbmod@dividend,f
  6820  1711  085A               	movf	___lbmod@divisor,w
  6821  1712  025E               	subwf	___lbmod@rem,w
  6822  1713  1C03               	skipc
  6823  1714  2F17               	goto	l12046
  6824  1715  085A               	movf	___lbmod@divisor,w
  6825  1716  02DE               	subwf	___lbmod@rem,f
  6826  1717                     l12046:	
  6827  1717  0BDD               	decfsz	___lbmod@counter,f
  6828  1718  2F03               	goto	l12038
  6829  1719  085E               	movf	___lbmod@rem,w
  6830  171A  0008               	return
  6831  171B                     __end_of___lbmod:	
  6832  171B                     __ptext27:	
  6833 ;; *************** function ___lbdiv *****************
  6834 ;; Defined at:
  6835 ;;		line 4 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\lbdiv.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;  dividend        1    wreg     unsigned char 
  6838 ;;  divisor         1    0[BANK0 ] unsigned char 
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  dividend        1    1[BANK0 ] unsigned char 
  6841 ;;  quotient        1    3[BANK0 ] unsigned char 
  6842 ;;  counter         1    2[BANK0 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      unsigned char 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0
  6847 ;; Tracked objects:
  6848 ;;		On entry : 300/0
  6849 ;;		On exit  : 300/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6852 ;;      Params:         0       1       0       0       0
  6853 ;;      Locals:         0       3       0       0       0
  6854 ;;      Temps:          0       0       0       0       0
  6855 ;;      Totals:         0       4       0       0       0
  6856 ;;Total ram usage:        4 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    2
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_DIG_Show_Time
  6863 ;;		_Fun_Choose_Show
  6864 ;;		_Work_Mode_Show
  6865 ;;		_Test_Mode_Show
  6866 ;;		_Factory_Show
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function ___lbdiv
  6872  171B                     ___lbdiv:	
  6873                           
  6874                           ;incstack = 0
  6875                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  6876                           ;___lbdiv@dividend stored from wreg
  6877  171B  00DB               	movwf	___lbdiv@dividend
  6878  171C  01DD               	clrf	___lbdiv@quotient
  6879  171D  085A               	movf	___lbdiv@divisor,w
  6880  171E  1903               	btfsc	3,2
  6881  171F  2F34               	goto	l15180
  6882  1720  01DC               	clrf	___lbdiv@counter
  6883  1721                     l15166:	
  6884  1721  0ADC               	incf	___lbdiv@counter,f
  6885  1722  1BDA               	btfsc	___lbdiv@divisor,7
  6886  1723  2F27               	goto	l9906
  6887  1724  1003               	clrc
  6888  1725  0DDA               	rlf	___lbdiv@divisor,f
  6889  1726  2F21               	goto	l15166
  6890  1727                     l9906:	
  6891  1727  1003               	clrc
  6892  1728  0DDD               	rlf	___lbdiv@quotient,f
  6893  1729  085A               	movf	___lbdiv@divisor,w
  6894  172A  025B               	subwf	___lbdiv@dividend,w
  6895  172B  1C03               	skipc
  6896  172C  2F31               	goto	L40
  6897  172D  085A               	movf	___lbdiv@divisor,w
  6898  172E  02DB               	subwf	___lbdiv@dividend,f
  6899  172F  145D               	bsf	___lbdiv@quotient,0
  6900  1730  1003               	clrc
  6901  1731                     L40:	
  6902  1731  0CDA               	rrf	___lbdiv@divisor,f
  6903  1732  0BDC               	decfsz	___lbdiv@counter,f
  6904  1733  2F27               	goto	l9906
  6905  1734                     l15180:	
  6906  1734  085D               	movf	___lbdiv@quotient,w
  6907  1735  0008               	return
  6908  1736                     __end_of___lbdiv:	
  6909  1736                     __ptext14:	
  6910 ;; *************** function ___wmul *****************
  6911 ;; Defined at:
  6912 ;;		line 15 in file "D:\PROGRA~2\CMS_ID~1.12\data\sources\common\Umul16.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6915 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  product         2    4[BANK0 ] unsigned int 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  2    0[BANK0 ] unsigned int 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0
  6922 ;; Tracked objects:
  6923 ;;		On entry : 300/0
  6924 ;;		On exit  : 300/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6927 ;;      Params:         0       4       0       0       0
  6928 ;;      Locals:         0       2       0       0       0
  6929 ;;      Temps:          0       0       0       0       0
  6930 ;;      Totals:         0       6       0       0       0
  6931 ;;Total ram usage:        6 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    2
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_Work_Mode_Show
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function ___wmul
  6943  1736                     ___wmul:	
  6944                           
  6945                           ;incstack = 0
  6946                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6947  1736  01DE               	clrf	___wmul@product
  6948  1737  01DF               	clrf	___wmul@product+1
  6949  1738                     l16680:	
  6950  1738  1C5A               	btfss	___wmul@multiplier,0
  6951  1739  2F40               	goto	l16684
  6952  173A  085C               	movf	___wmul@multiplicand,w
  6953  173B  07DE               	addwf	___wmul@product,f
  6954  173C  1803               	skipnc
  6955  173D  0ADF               	incf	___wmul@product+1,f
  6956  173E  085D               	movf	___wmul@multiplicand+1,w
  6957  173F  07DF               	addwf	___wmul@product+1,f
  6958  1740                     l16684:	
  6959  1740  1003               	clrc
  6960  1741  0DDC               	rlf	___wmul@multiplicand,f
  6961  1742  0DDD               	rlf	___wmul@multiplicand+1,f
  6962  1743  1003               	clrc
  6963  1744  0CDB               	rrf	___wmul@multiplier+1,f
  6964  1745  0CDA               	rrf	___wmul@multiplier,f
  6965  1746  085A               	movf	___wmul@multiplier,w
  6966  1747  045B               	iorwf	___wmul@multiplier+1,w
  6967  1748  1D03               	btfss	3,2
  6968  1749  2F38               	goto	l16680
  6969  174A  085F               	movf	___wmul@product+1,w
  6970  174B  00DB               	movwf	?___wmul+1
  6971  174C  085E               	movf	___wmul@product,w
  6972  174D  00DA               	movwf	?___wmul
  6973  174E  0008               	return
  6974  174F                     __end_of___wmul:	
  6975  174F                     __ptext25:	
  6976 ;; *************** function _DIG_Show_Time *****************
  6977 ;; Defined at:
  6978 ;;		line 48 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\display.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  hour            1    wreg     unsigned char 
  6981 ;;  min             1    5[BANK0 ] unsigned char 
  6982 ;;  point           1    6[BANK0 ] unsigned char 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  hour            1    7[BANK0 ] unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  1    wreg      void 
  6987 ;; Registers used:
  6988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 300/0
  6991 ;;		On exit  : 300/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6994 ;;      Params:         0       2       0       0       0
  6995 ;;      Locals:         0       1       0       0       0
  6996 ;;      Temps:          0       0       0       0       0
  6997 ;;      Totals:         0       3       0       0       0
  6998 ;;Total ram usage:        3 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    3
  7001 ;; This function calls:
  7002 ;;		___lbdiv
  7003 ;;		___lbmod
  7004 ;; This function is called by:
  7005 ;;		_Fun_Choose_Show
  7006 ;;		_Work_Mode_Show
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           
  7011                           ;psect for function _DIG_Show_Time
  7012  174F                     _DIG_Show_Time:	
  7013                           
  7014                           ;incstack = 0
  7015                           ; Regs used in _DIG_Show_Time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7016                           ;DIG_Show_Time@hour stored from wreg
  7017  174F  00E1               	movwf	DIG_Show_Time@hour
  7018                           
  7019                           ;display.c: 50: if(hour >= 10)
  7020  1750  300A               	movlw	10
  7021  1751  0261               	subwf	DIG_Show_Time@hour,w
  7022  1752  1C03               	skipc
  7023  1753  2F61               	goto	l15188
  7024                           
  7025                           ;display.c: 51: {
  7026                           ;display.c: 52: DispData[0] |= SEG_MATH_TAB[hour/10];
  7027  1754  300A               	movlw	10
  7028  1755  00DA               	movwf	___lbdiv@divisor
  7029  1756  0861               	movf	DIG_Show_Time@hour,w
  7030  1757  271B  160A  118A   	fcall	___lbdiv
  7031  175A  2792               	fcall	PL6	;call to abstracted procedure
  7032  175B  160A  158A  2000  160A  118A  	fcall	stringtab
  7033  1760  04A0               	iorwf	_DispData,f	;volatile
  7034  1761                     l15188:	
  7035                           
  7036                           ;display.c: 53: }
  7037                           ;display.c: 56: if(WorkStage == 1)
  7038  1761  0B3F               	decfsz	_WorkStage,w	;volatile
  7039  1762  2F64               	goto	l15196
  7040  1763  2F67               	goto	L25
  7041  1764                     l15196:	
  7042                           ;display.c: 59: if(point)
  7043                           
  7044                           ;display.c: 57: {
  7045                           ;display.c: 58: DispData[1] |= SEG_MATH_TAB[hour%10];
  7046                           
  7047                           
  7048                           ;display.c: 64: else
  7049                           ;display.c: 65: {
  7050                           ;display.c: 66: if(hour > 0)
  7051  1764  0861               	movf	DIG_Show_Time@hour,w
  7052  1765  1903               	btfsc	3,2
  7053  1766  2F79               	goto	l15204
  7054  1767                     L25:	
  7055                           
  7056                           ;display.c: 67: {
  7057                           ;display.c: 68: DispData[1] |= SEG_MATH_TAB[hour%10];
  7058  1767  300A               	movlw	10
  7059  1768  00DA               	movwf	___lbmod@divisor
  7060  1769  0861               	movf	DIG_Show_Time@hour,w
  7061  176A  26FF  160A  118A   	fcall	___lbmod
  7062  176D  2792               	fcall	PL6	;call to abstracted procedure
  7063  176E  160A  158A  2000  160A  118A  	fcall	stringtab
  7064  1773  04A1               	iorwf	_DispData+1,f	;volatile
  7065                           
  7066                           ;display.c: 69: if(point)
  7067  1774  0860               	movf	DIG_Show_Time@point,w
  7068  1775  1903               	btfsc	3,2
  7069  1776  2F79               	goto	l15204
  7070                           
  7071                           ;display.c: 60: {
  7072                           ;display.c: 61: {DispData[2] |= 0x80; DispData[1] |= 0x80;};
  7073  1777  17A2               	bsf	_DispData+2,7	;volatile
  7074  1778  17A1               	bsf	_DispData+1,7	;volatile
  7075  1779                     l15204:	
  7076                           
  7077                           ;display.c: 72: }
  7078                           ;display.c: 73: }
  7079                           ;display.c: 74: }
  7080                           ;display.c: 76: DispData[2] |= SEG_MATH_TAB[min/10];
  7081  1779  300A               	movlw	10
  7082  177A  00DA               	movwf	___lbdiv@divisor
  7083  177B  085F               	movf	DIG_Show_Time@min,w
  7084  177C  271B  160A  118A   	fcall	___lbdiv
  7085  177F  2792               	fcall	PL6	;call to abstracted procedure
  7086  1780  160A  158A  2000  160A  118A  	fcall	stringtab
  7087  1785  04A2               	iorwf	_DispData+2,f	;volatile
  7088                           
  7089                           ;display.c: 77: DispData[3] |= SEG_MATH_TAB[min%10];
  7090  1786  300A               	movlw	10
  7091  1787  00DA               	movwf	___lbmod@divisor
  7092  1788  085F               	movf	DIG_Show_Time@min,w
  7093  1789  26FF  160A  118A   	fcall	___lbmod
  7094  178C  2792               	fcall	PL6	;call to abstracted procedure
  7095  178D  160A  158A  2000   	fcall	stringtab
  7096  1790  04A3               	iorwf	_DispData+3,f	;volatile
  7097  1791  0008               	return
  7098  1792                     __end_of_DIG_Show_Time:	
  7099  1792                     PL6:	
  7100  1792  3E78               	addlw	low (_SEG_MATH_TAB| (0+32768))
  7101  1793  0084               	movwf	4
  7102  1794  3099               	movlw	high (_SEG_MATH_TAB| (0+32768))
  7103  1795  1803               	skipnc
  7104  1796  3E01               	addlw	1
  7105  1797  00FF               	movwf	127
  7106  1798  0008               	return
  7107  1799                     __end_ofPL6:	
  7108  1799                     PL12:	
  7109  1799  01E3               	clrf	??_Work_Mode_Show+1
  7110  179A  1003               	clrc
  7111  179B  0DE2               	rlf	??_Work_Mode_Show,f
  7112  179C  0DE3               	rlf	??_Work_Mode_Show+1,f
  7113  179D  083D               	movf	_WorkTimeM,w	;volatile
  7114  179E  00E4               	movwf	??_Work_Mode_Show+2
  7115  179F  01E5               	clrf	??_Work_Mode_Show+3
  7116  17A0  1003               	clrc
  7117  17A1  0DE4               	rlf	??_Work_Mode_Show+2,f
  7118  17A2  0DE5               	rlf	??_Work_Mode_Show+3,f
  7119  17A3  1003               	clrc
  7120  17A4  0DE4               	rlf	??_Work_Mode_Show+2,f
  7121  17A5  0DE5               	rlf	??_Work_Mode_Show+3,f
  7122  17A6  0865               	movf	??_Work_Mode_Show+3,w
  7123  17A7  3A80               	xorlw	128
  7124  17A8  00E6               	movwf	??_Work_Mode_Show+4
  7125  17A9  0863               	movf	??_Work_Mode_Show+1,w
  7126  17AA  3A80               	xorlw	128
  7127  17AB  0266               	subwf	??_Work_Mode_Show+4,w
  7128  17AC  1D03               	skipz
  7129  17AD  2FB0               	goto	u8535
  7130  17AE  0862               	movf	??_Work_Mode_Show,w
  7131  17AF  0264               	subwf	??_Work_Mode_Show+2,w
  7132  17B0                     u8535:	
  7133  17B0  1C03               	skipc
  7134  17B1  2FB5               	goto	l16770
  7135  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  7136  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  7137  17B4  1626               	bsf	_DispData+6,4	;volatile
  7138  17B5                     l16770:	
  7139  17B5  1283               	bcf	3,5	;RP0=0, select bank0
  7140  17B6  1303               	bcf	3,6	;RP1=0, select bank0
  7141  17B7  0008               	return
  7142  17B8                     __end_ofPL12:	
  7143  17B8                     PL16:	
  7144  17B8  3E44               	addlw	low (_HOT_RUN_TAB| (0+32768))
  7145  17B9  0084               	movwf	4
  7146  17BA  3099               	movlw	high (_HOT_RUN_TAB| (0+32768))
  7147  17BB  1803               	skipnc
  7148  17BC  3E01               	addlw	1
  7149  17BD  00FF               	movwf	127
  7150  17BE  0008               	return
  7151  17BF                     __end_ofPL16:	
  7152  17BF                     PL18:	
  7153  17BF  3EA0               	addlw	(low (_Fc_ID| 0))& (0+255)
  7154  17C0  0084               	movwf	4
  7155  17C1  1383               	bcf	3,7	;select IRP bank1
  7156  17C2  0800               	movf	0,w
  7157  17C3  390F               	andlw	15
  7158  17C4  0008               	return
  7159  17C5                     __end_ofPL18:	
  7160  17C5                     PL20:	
  7161  17C5  00E2               	movwf	??_Work_Mode_Show
  7162  17C6  01E3               	clrf	??_Work_Mode_Show+1
  7163  17C7  1003               	clrc
  7164  17C8  0DE2               	rlf	??_Work_Mode_Show,f
  7165  17C9  0DE3               	rlf	??_Work_Mode_Show+1,f
  7166  17CA  1003               	clrc
  7167  17CB  0DE2               	rlf	??_Work_Mode_Show,f
  7168  17CC  0DE3               	rlf	??_Work_Mode_Show+1,f
  7169  17CD  0863               	movf	??_Work_Mode_Show+1,w
  7170  17CE  3A80               	xorlw	128
  7171  17CF  00E4               	movwf	??_Work_Mode_Show+2
  7172  17D0  0008               	return
  7173  17D1                     __end_ofPL20:	
  7174  17D1                     PL22:	
  7175  17D1  3EA0               	addlw	(low (_Fc_ID| 0))& (0+255)
  7176  17D2  0084               	movwf	4
  7177  17D3  1383               	bcf	3,7	;select IRP bank1
  7178  17D4  0E00               	swapf	0,w
  7179  17D5  390F               	andlw	15
  7180  17D6  0008               	return
  7181  17D7                     __end_ofPL22:	
  7182  17D7                     PL24:	
  7183  17D7  01DD               	clrf	___awdiv@dividend+1
  7184  17D8  07DC               	addwf	___awdiv@dividend,f
  7185  17D9  1803               	skipnc
  7186  17DA  0ADD               	incf	___awdiv@dividend+1,f
  7187  17DB  303C               	movlw	60
  7188  17DC  00DA               	movwf	___awdiv@divisor
  7189  17DD  01DB               	clrf	___awdiv@divisor+1
  7190  17DE  0008               	return
  7191  17DF                     __end_ofPL24:	
  7192  17DF                     PL26:	
  7193  17DF  01DD               	clrf	___awmod@dividend+1
  7194  17E0  07DC               	addwf	___awmod@dividend,f
  7195  17E1  1803               	skipnc
  7196  17E2  0ADD               	incf	___awmod@dividend+1,f
  7197  17E3  303C               	movlw	60
  7198  17E4  00DA               	movwf	___awmod@divisor
  7199  17E5  01DB               	clrf	___awmod@divisor+1
  7200  17E6  0008               	return
  7201  17E7                     __end_ofPL26:	
  7202  17E7                     PL28:	
  7203  17E7  085A               	movf	?___awdiv,w
  7204  17E8  00B8               	movwf	_HourBuf	;volatile
  7205  17E9  3064               	movlw	100
  7206  17EA  00DA               	movwf	___awmod@divisor
  7207  17EB  01DB               	clrf	___awmod@divisor+1
  7208  17EC  1003               	clrc
  7209  17ED  0008               	return
  7210  17EE                     __end_ofPL28:	
  7211  17EE                     PL32:	
  7212  17EE  3000               	movlw	0
  7213  17EF  1803               	skipnc
  7214  17F0  3001               	movlw	1
  7215  17F1  00DC               	movwf	___awdiv@dividend
  7216  17F2  01DD               	clrf	___awdiv@dividend+1
  7217  17F3  0008               	return
  7218  17F4                     __end_ofPL32:	
  7219  17F4                     PL34:	
  7220  17F4  04A2               	iorwf	_DispData+2,f	;volatile
  7221  17F5  0832               	movf	_HorseCount,w	;volatile
  7222  17F6  00DF               	movwf	??_Factory_Show
  7223  17F7  3001               	movlw	1
  7224  17F8  1003               	clrc
  7225  17F9  0008               	return
  7226  17FA                     __end_ofPL34:	
  7227  17FA                     PL36:	
  7228  17FA  3000               	movlw	0
  7229  17FB  1803               	skipnc
  7230  17FC  3001               	movlw	1
  7231  17FD  00DC               	movwf	___awmod@dividend
  7232  17FE  01DD               	clrf	___awmod@dividend+1
  7233  17FF  0008               	return
  7234  1800                     __end_ofPL36:	
  7235                           
  7236                           	psect	text51
  7237  03E8                     __ptext51:	
  7238 ;; *************** function _Error_Deal *****************
  7239 ;; Defined at:
  7240 ;;		line 9 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\error.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;		None
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      void 
  7247 ;; Registers used:
  7248 ;;		wreg, status,2, status,0
  7249 ;; Tracked objects:
  7250 ;;		On entry : 300/0
  7251 ;;		On exit  : 200/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7254 ;;      Params:         0       0       0       0       0
  7255 ;;      Locals:         0       0       0       0       0
  7256 ;;      Temps:          0       0       0       0       0
  7257 ;;      Totals:         0       0       0       0       0
  7258 ;;Total ram usage:        0 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:    2
  7261 ;; This function calls:
  7262 ;;		Nothing
  7263 ;; This function is called by:
  7264 ;;		_main
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _Error_Deal
  7270  03E8                     _Error_Deal:	
  7271                           
  7272                           ;error.c: 11: static v_uint16 E3_delaycount = 0;
  7273                           ;error.c: 13: if(SysStatus == 3 || SysStatus == 4 || (SysStatus == 5 && FactoryTestData 
      +                          >= 19))
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _Error_Deal: [wreg+status,2+status,0]
  7277  03E8  3003               	movlw	3
  7278  03E9  066A               	xorwf	_SysStatus,w	;volatile
  7279  03EA  3004               	movlw	4
  7280  03EB  1903               	btfsc	3,2
  7281  03EC  2BF9               	goto	L72
  7282  03ED  066A               	xorwf	_SysStatus,w	;volatile
  7283  03EE  1903               	btfsc	3,2
  7284  03EF  2BF8               	goto	l14268
  7285  03F0  3005               	movlw	5
  7286  03F1  066A               	xorwf	_SysStatus,w	;volatile
  7287  03F2  1D03               	btfss	3,2
  7288  03F3  2C63               	goto	l14336
  7289  03F4  3013               	movlw	19
  7290  03F5  0241               	subwf	_FactoryTestData,w	;volatile
  7291  03F6  1C03               	skipc
  7292  03F7  2C63               	goto	l14336
  7293  03F8                     l14268:	
  7294                           
  7295                           ;error.c: 14: {
  7296                           ;error.c: 16: if(ErrorCode == 4)
  7297  03F8  3004               	movlw	4
  7298  03F9                     L72:	
  7299  03F9  0658               	xorwf	_ErrorCode,w	;volatile
  7300  03FA  1903               	btfsc	3,2
  7301  03FB  0008               	return
  7302                           
  7303                           ;error.c: 19: }
  7304                           ;error.c: 22: if(Ad_Bot <= 94 && b_PressureOn == 1)
  7305  03FC  305F               	movlw	95
  7306  03FD  024F               	subwf	_Ad_Bot,w	;volatile
  7307  03FE  1C03               	btfss	3,0
  7308  03FF  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7309  0400  2C12               	goto	l14284
  7310                           
  7311                           ;error.c: 23: {
  7312                           ;error.c: 24: if(++E3_delaycount >= 1250)
  7313  0401  1683               	bsf	3,5	;RP0=1, select bank1
  7314  0402  0AAC               	incf	Error_Deal@E3_delaycount^(0+128),f	;volatile
  7315  0403  1903               	skipnz
  7316  0404  0AAD               	incf	(Error_Deal@E3_delaycount+1)^(0+128),f	;volatile
  7317  0405  3004               	movlw	4
  7318  0406  022D               	subwf	(Error_Deal@E3_delaycount+1)^(0+128),w	;volatile
  7319  0407  30E2               	movlw	226
  7320  0408  1903               	skipnz
  7321  0409  022C               	subwf	Error_Deal@E3_delaycount^(0+128),w	;volatile
  7322  040A  1C03               	skipc
  7323  040B  0008               	return
  7324                           
  7325                           ;error.c: 25: {
  7326                           ;error.c: 26: E3_delaycount = 0;
  7327  040C  01AC               	clrf	Error_Deal@E3_delaycount^(0+128)	;volatile
  7328  040D  01AD               	clrf	(Error_Deal@E3_delaycount+1)^(0+128)	;volatile
  7329                           
  7330                           ;error.c: 27: ErrorCode = 3;
  7331  040E  3003               	movlw	3
  7332  040F  1283               	bcf	3,5	;RP0=0, select bank0
  7333  0410  00D8               	movwf	_ErrorCode	;volatile
  7334  0411  0008               	return
  7335  0412                     l14284:	
  7336                           
  7337                           ;error.c: 30: }
  7338                           ;error.c: 31: E3_delaycount = 0;
  7339  0412  1683               	bsf	3,5	;RP0=1, select bank1
  7340  0413  01AC               	clrf	Error_Deal@E3_delaycount^(0+128)	;volatile
  7341  0414  01AD               	clrf	(Error_Deal@E3_delaycount+1)^(0+128)	;volatile
  7342                           
  7343                           ;error.c: 34: if((b_LidClosed == 0) && ((SysStatus == 3) || (SysStatus == 5 && FactoryTe
      +                          stData >= 19)))
  7344  0415  1BF2               	btfsc	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
  7345  0416  2C2B               	goto	l14300
  7346  0417  3003               	movlw	3
  7347  0418  1283               	bcf	3,5	;RP0=0, select bank0
  7348  0419  066A               	xorwf	_SysStatus,w	;volatile
  7349  041A  1903               	btfsc	3,2
  7350  041B  2C24               	goto	l14294
  7351  041C  3005               	movlw	5
  7352  041D  066A               	xorwf	_SysStatus,w	;volatile
  7353  041E  1D03               	btfss	3,2
  7354  041F  2C2B               	goto	l14300
  7355  0420  3013               	movlw	19
  7356  0421  0241               	subwf	_FactoryTestData,w	;volatile
  7357  0422  1C03               	skipc
  7358  0423  2C2B               	goto	l14300
  7359  0424                     l14294:	
  7360                           
  7361                           ;error.c: 35: {
  7362                           ;error.c: 37: if(!(ChooseFun == 14))
  7363  0424  300E               	movlw	14
  7364  0425  063C               	xorwf	_ChooseFun,w	;volatile
  7365  0426  1903               	btfsc	3,2
  7366  0427  2C2B               	goto	l14300
  7367                           
  7368                           ;error.c: 38: {
  7369                           ;error.c: 39: ErrorCode = 7;
  7370  0428  3007               	movlw	7
  7371  0429  00D8               	movwf	_ErrorCode	;volatile
  7372  042A  0008               	return
  7373  042B                     l14300:	
  7374                           
  7375                           ;error.c: 41: }
  7376                           ;error.c: 42: }
  7377                           ;error.c: 45: if(AC_Vol_Rms >= 265)
  7378  042B  3001               	movlw	1
  7379  042C  1283               	bcf	3,5	;RP0=0, select bank0
  7380  042D  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  7381  042E  3009               	movlw	9
  7382  042F  1903               	skipnz
  7383  0430  0267               	subwf	_AC_Vol_Rms,w	;volatile
  7384  0431  1C03               	skipc
  7385  0432  2C36               	goto	l14306
  7386                           
  7387                           ;error.c: 46: {
  7388                           ;error.c: 47: ErrorCode = 8;
  7389  0433  3008               	movlw	8
  7390  0434  00D8               	movwf	_ErrorCode	;volatile
  7391  0435  0008               	return
  7392  0436                     l14306:	
  7393                           
  7394                           ;error.c: 49: }
  7395                           ;error.c: 52: if(AC_Vol_Rms <= 155 && AC_Vol_Rms >= 85)
  7396  0436  3000               	movlw	0
  7397  0437  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  7398  0438  309C               	movlw	156
  7399  0439  1903               	skipnz
  7400  043A  0267               	subwf	_AC_Vol_Rms,w	;volatile
  7401  043B  1803               	skipnc
  7402  043C  2C47               	goto	l14314
  7403  043D  3000               	movlw	0
  7404  043E  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  7405  043F  3055               	movlw	85
  7406  0440  1903               	skipnz
  7407  0441  0267               	subwf	_AC_Vol_Rms,w	;volatile
  7408  0442  1C03               	skipc
  7409  0443  2C47               	goto	l14314
  7410                           
  7411                           ;error.c: 53: {
  7412                           ;error.c: 54: ErrorCode = 9;
  7413  0444  3009               	movlw	9
  7414  0445  00D8               	movwf	_ErrorCode	;volatile
  7415  0446  0008               	return
  7416  0447                     l14314:	
  7417                           
  7418                           ;error.c: 56: }
  7419                           ;error.c: 59: if(Ad_Bot < 2)
  7420  0447  3002               	movlw	2
  7421  0448  024F               	subwf	_Ad_Bot,w	;volatile
  7422  0449  1803               	skipnc
  7423  044A  2C4E               	goto	l14320
  7424                           
  7425                           ;error.c: 60: {
  7426                           ;error.c: 61: ErrorCode = 1;
  7427  044B  3001               	movlw	1
  7428  044C  00D8               	movwf	_ErrorCode	;volatile
  7429  044D  0008               	return
  7430  044E                     l14320:	
  7431                           
  7432                           ;error.c: 63: }
  7433                           ;error.c: 66: if(Ad_Bot >= 252)
  7434  044E  30FC               	movlw	252
  7435  044F  024F               	subwf	_Ad_Bot,w	;volatile
  7436  0450  1C03               	skipc
  7437  0451  2C55               	goto	l14326
  7438                           
  7439                           ;error.c: 67: {
  7440                           ;error.c: 68: ErrorCode = 2;
  7441  0452  3002               	movlw	2
  7442  0453  00D8               	movwf	_ErrorCode	;volatile
  7443  0454  0008               	return
  7444  0455                     l14326:	
  7445                           
  7446                           ;error.c: 70: }
  7447                           ;error.c: 75: if(SysStatus == 3 && WorkStage == 2 && WorkTimeH >= 1)
  7448  0455  3003               	movlw	3
  7449  0456  066A               	xorwf	_SysStatus,w	;volatile
  7450  0457  1D03               	btfss	3,2
  7451  0458  2C63               	goto	l14336
  7452  0459  3002               	movlw	2
  7453  045A  063F               	xorwf	_WorkStage,w	;volatile
  7454  045B  1D03               	btfss	3,2
  7455  045C  2C63               	goto	l14336
  7456  045D  082E               	movf	_WorkTimeH,w	;volatile
  7457  045E  1903               	btfsc	3,2
  7458  045F  2C63               	goto	l14336
  7459                           
  7460                           ;error.c: 76: {
  7461                           ;error.c: 77: ErrorCode = 4;
  7462  0460  3004               	movlw	4
  7463  0461  00D8               	movwf	_ErrorCode	;volatile
  7464  0462  0008               	return
  7465  0463                     l14336:	
  7466                           
  7467                           ;error.c: 79: }
  7468                           ;error.c: 80: }
  7469                           ;error.c: 81: ErrorCode = 0;
  7470  0463  01D8               	clrf	_ErrorCode	;volatile
  7471                           
  7472                           ;error.c: 82: E3_delaycount = 0;
  7473  0464  1683               	bsf	3,5	;RP0=1, select bank1
  7474  0465  01AC               	clrf	Error_Deal@E3_delaycount^(0+128)	;volatile
  7475  0466  01AD               	clrf	(Error_Deal@E3_delaycount+1)^(0+128)	;volatile
  7476  0467  0008               	return
  7477  0468                     __end_of_Error_Deal:	
  7478                           
  7479                           	psect	text58
  7480  0800                     __ptext58:	
  7481 ;; *************** function _KeepWarmHeat *****************
  7482 ;; Defined at:
  7483 ;;		line 634 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      void 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2, status,0, pclath, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 200/0
  7494 ;;		On exit  : 300/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7497 ;;      Params:         0       0       0       0       0
  7498 ;;      Locals:         0       0       0       0       0
  7499 ;;      Temps:          0       0       0       0       0
  7500 ;;      Totals:         0       0       0       0       0
  7501 ;;Total ram usage:        0 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    3
  7504 ;; This function calls:
  7505 ;;		_BotHeatOff
  7506 ;;		_BotHeatOn
  7507 ;;		_Heat_Time_Select
  7508 ;; This function is called by:
  7509 ;;		_Cook_Task
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           
  7514                           ;psect for function _KeepWarmHeat
  7515  0800                     _KeepWarmHeat:	
  7516  0800                     l15348:	
  7517                           ;incstack = 0
  7518                           ; Regs used in _KeepWarmHeat: [wreg+status,2+status,0+pclath+cstack]
  7519                           
  7520                           
  7521                           ;cook.c: 636: if(b_PressureOn == 1 || Ad_Bot >= 89)
  7522  0800  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7523  0801  2807               	goto	l15352
  7524  0802  3059               	movlw	89
  7525  0803  1283               	bcf	3,5	;RP0=0, select bank0
  7526  0804  024F               	subwf	_Ad_Bot,w	;volatile
  7527  0805  1C03               	skipc
  7528  0806  2808               	goto	l15354
  7529  0807                     l15352:	
  7530                           
  7531                           ;cook.c: 637: {
  7532                           ;cook.c: 638: BotHeatOff();
  7533  0807  2B67               	ljmp	l12070
  7534  0808                     l15354:	
  7535                           ;cook.c: 639: }
  7536                           
  7537                           
  7538                           ;cook.c: 640: else if(Ad_Bot <= 80)
  7539  0808  3051               	movlw	81
  7540  0809  024F               	subwf	_Ad_Bot,w	;volatile
  7541  080A  1803               	skipnc
  7542  080B  0008               	return
  7543                           
  7544                           ;cook.c: 641: {
  7545                           ;cook.c: 642: if(Ad_Bot >= 70)
  7546  080C  3046               	movlw	70
  7547  080D  024F               	subwf	_Ad_Bot,w	;volatile
  7548  080E  1C03               	skipc
  7549  080F  2814               	goto	l15360
  7550                           
  7551                           ;cook.c: 643: {
  7552                           ;cook.c: 644: Heat_Time_Select(10, 22);
  7553  0810  3016               	movlw	22
  7554  0811  00DA               	movwf	Heat_Time_Select@offtm
  7555  0812  300A               	movlw	10
  7556  0813  2B4B               	ljmp	_Heat_Time_Select
  7557  0814                     l15360:	
  7558                           ;cook.c: 645: }
  7559                           
  7560                           
  7561                           ;cook.c: 646: else if(Ad_Bot <= 65)
  7562  0814  3042               	movlw	66
  7563  0815  024F               	subwf	_Ad_Bot,w	;volatile
  7564  0816  1803               	skipnc
  7565  0817  0008               	return
  7566                           
  7567                           ;cook.c: 647: {
  7568                           ;cook.c: 648: BotHeatOn();
  7569  0818  2B6C               	ljmp	l12066
  7570  0819                     __end_of_KeepWarmHeat:	
  7571  0819                     __ptext59:	
  7572 ;; *************** function _FactoryTest *****************
  7573 ;; Defined at:
  7574 ;;		line 77 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;		None
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 300/0
  7585 ;;		On exit  : 300/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7588 ;;      Params:         0       0       0       0       0
  7589 ;;      Locals:         0       0       0       0       0
  7590 ;;      Temps:          0       0       0       0       0
  7591 ;;      Totals:         0       0       0       0       0
  7592 ;;Total ram usage:        0 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    3
  7595 ;; This function calls:
  7596 ;;		_BotHeatOff
  7597 ;;		_BotHeatOn
  7598 ;;		_ShortTimeOn
  7599 ;; This function is called by:
  7600 ;;		_Cook_Task
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function _FactoryTest
  7606  0819                     _FactoryTest:	
  7607  0819                     l12248:	
  7608                           ;incstack = 0
  7609                           ; Regs used in _FactoryTest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7610                           
  7611                           
  7612                           ;cook.c: 80: if(b_Auto_test == 1)
  7613  0819  1DF1               	btfss	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
  7614  081A  281C               	goto	l1854
  7615  081B                     l12250:	
  7616                           
  7617                           ;cook.c: 81: {
  7618                           ;cook.c: 82: BotHeatOn();
  7619  081B  2B6C               	ljmp	l12066
  7620  081C                     l1854:	
  7621                           
  7622                           ;cook.c: 85: }
  7623                           ;cook.c: 87: if(b_BotTempOut == 1)
  7624  081C  1971               	btfsc	_b_BotTempOut/(0+8),_b_BotTempOut& (0+7)	;volatile
  7625  081D  2840               	goto	l12254
  7626                           
  7627                           ;cook.c: 91: }
  7628                           ;cook.c: 93: if(Ad_Bot >= 204)
  7629  081E  30CC               	movlw	204
  7630  081F  024F               	subwf	_Ad_Bot,w	;volatile
  7631  0820  1803               	btfsc	3,0
  7632  0821  282E               	goto	l12260
  7633  0822  0842               	movf	_WorkStep,w	;volatile
  7634                           
  7635                           ; Switch size 1, requested type "space"
  7636                           ; Number of cases is 3, Range of values is 0 to 2
  7637                           ; switch strategies available:
  7638                           ; Name         Instructions Cycles
  7639                           ; simple_byte           10     6 (average)
  7640                           ; direct_byte           17     8 (fixed)
  7641                           ; jumptable            260     6 (fixed)
  7642                           ;	Chosen strategy is simple_byte
  7643  0823  3A00               	xorlw	0	; case 0
  7644  0824  1903               	skipnz
  7645  0825  2831               	goto	l12266
  7646  0826  3A01               	xorlw	1	; case 1
  7647  0827  1903               	skipnz
  7648  0828  2834               	goto	l1861
  7649  0829  3A03               	xorlw	3	; case 2
  7650  082A  1903               	skipnz
  7651  082B  283E               	goto	l1863
  7652  082C  2840               	goto	l12254
  7653  082D  0008               	return
  7654  082E                     l12260:	
  7655                           
  7656                           ;cook.c: 94: {
  7657                           ;cook.c: 95: BotHeatOff();
  7658  082E  2367               	fcall	_BotHeatOff
  7659                           
  7660                           ;cook.c: 96: b_BotTempOut = 1;
  7661  082F  1571               	bsf	_b_BotTempOut/(0+8),_b_BotTempOut& (0+7)	;volatile
  7662  0830  0008               	return
  7663  0831                     l12266:	
  7664                           
  7665                           ;cook.c: 103: ShortTimeOn();
  7666  0831  2363               	fcall	_ShortTimeOn
  7667                           
  7668                           ;cook.c: 104: WorkStep++;
  7669  0832  0AC2               	incf	_WorkStep,f	;volatile
  7670                           
  7671                           ;cook.c: 105: break;
  7672  0833  0008               	return
  7673  0834                     l1861:	
  7674                           ;cook.c: 106: case 1:
  7675                           
  7676                           
  7677                           ;cook.c: 107: if(b_PressureOn)
  7678  0834  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7679  0835  281B               	goto	l12250
  7680                           
  7681                           ;cook.c: 108: {
  7682                           ;cook.c: 109: FactoryTestData = 20;
  7683  0836  3014               	movlw	20
  7684  0837  00C1               	movwf	_FactoryTestData	;volatile
  7685                           
  7686                           ;cook.c: 110: CountDownTime = 1;
  7687  0838  3001               	movlw	1
  7688  0839  00C0               	movwf	_CountDownTime	;volatile
  7689                           
  7690                           ;cook.c: 111: BotHeatOff();
  7691  083A  2367  120A  158A   	fcall	_BotHeatOff
  7692  083D  2831               	goto	l12266
  7693  083E                     l1863:	
  7694                           ;cook.c: 118: case 2:
  7695                           
  7696                           
  7697                           ;cook.c: 119: if(b_PressureOn)
  7698  083E  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7699  083F  281B               	goto	l12250
  7700  0840                     l12254:	
  7701                           
  7702                           ;cook.c: 88: {
  7703                           ;cook.c: 89: BotHeatOff();
  7704  0840  2B67               	ljmp	l12070
  7705  0841                     __end_of_FactoryTest:	
  7706  0841                     __ptext52:	
  7707 ;; *************** function _Cook_Task *****************
  7708 ;; Defined at:
  7709 ;;		line 658 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;		None
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;		None
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      void 
  7716 ;; Registers used:
  7717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 200/0
  7720 ;;		On exit  : 300/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7723 ;;      Params:         0       0       0       0       0
  7724 ;;      Locals:         0       0       0       0       0
  7725 ;;      Temps:          0       0       0       0       0
  7726 ;;      Totals:         0       0       0       0       0
  7727 ;;Total ram usage:        0 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:    4
  7730 ;; This function calls:
  7731 ;;		_BotHeatOff
  7732 ;;		_BotHeatOn
  7733 ;;		_CakeHeat
  7734 ;;		_FactoryTest
  7735 ;;		_KeepWarmHeat
  7736 ;;		_OpenCook
  7737 ;;		_PressureHeat
  7738 ;;		_ReheatCook
  7739 ;;		_RiceHeat
  7740 ;; This function is called by:
  7741 ;;		_main
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           
  7746                           ;psect for function _Cook_Task
  7747  0841                     _Cook_Task:	
  7748                           
  7749                           ;cook.c: 661: if(ErrorCode != 0)
  7750                           
  7751                           ;incstack = 0
  7752                           ; Regs used in _Cook_Task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7753  0841  1283               	bcf	3,5	;RP0=0, select bank0
  7754  0842  0858               	movf	_ErrorCode,w	;volatile
  7755  0843  1903               	btfsc	3,2
  7756  0844  2846               	goto	l15814
  7757  0845                     l15810:	
  7758                           
  7759                           ;cook.c: 662: {
  7760                           ;cook.c: 663: BotHeatOff();
  7761  0845  2B67               	ljmp	l12070
  7762  0846                     l15814:	
  7763                           
  7764                           ;cook.c: 665: }
  7765                           ;cook.c: 668: if((SysStatus == 3 || SysStatus == 4) && Ad_Bot <= 114 && b_PressureOn == 
      +                          1)
  7766  0846  3003               	movlw	3
  7767  0847  066A               	xorwf	_SysStatus,w	;volatile
  7768  0848  1903               	btfsc	3,2
  7769  0849  284E               	goto	l15818
  7770  084A  3004               	movlw	4
  7771  084B  066A               	xorwf	_SysStatus,w	;volatile
  7772  084C  1D03               	btfss	3,2
  7773  084D  2880               	goto	l15868
  7774  084E                     l15818:	
  7775  084E  3073               	movlw	115
  7776  084F  024F               	subwf	_Ad_Bot,w	;volatile
  7777  0850  1C03               	btfss	3,0
  7778  0851  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7779  0852  2880               	goto	l15868
  7780                           
  7781                           ;cook.c: 669: {
  7782                           ;cook.c: 670: BotHeatOn();
  7783  0853  2B6C               	ljmp	l12066
  7784  0854                     l15826:	
  7785                           
  7786                           ;cook.c: 678: if(FactoryTestData == 19 || FactoryTestData == 20)
  7787  0854  3013               	movlw	19
  7788  0855  0641               	xorwf	_FactoryTestData,w	;volatile
  7789  0856  1903               	btfsc	3,2
  7790  0857  285C               	goto	l15830
  7791  0858  3014               	movlw	20
  7792  0859  0641               	xorwf	_FactoryTestData,w	;volatile
  7793  085A  1D03               	btfss	3,2
  7794  085B  2845               	goto	l15810
  7795  085C                     l15830:	
  7796                           
  7797                           ;cook.c: 679: {
  7798                           ;cook.c: 680: FactoryTest();
  7799  085C  2819               	ljmp	l12248
  7800  085D                     l15834:	
  7801                           ;cook.c: 681: }
  7802                           
  7803                           
  7804                           ;cook.c: 689: if(WorkStage == 2 || WorkStage == 3 )
  7805  085D  3002               	movlw	2
  7806  085E  063F               	xorwf	_WorkStage,w	;volatile
  7807  085F  1903               	btfsc	3,2
  7808  0860  2865               	goto	l15838
  7809  0861  3003               	movlw	3
  7810  0862  063F               	xorwf	_WorkStage,w	;volatile
  7811  0863  1D03               	btfss	3,2
  7812  0864  2845               	goto	l15810
  7813  0865                     l15838:	
  7814                           
  7815                           ;cook.c: 690: {
  7816                           ;cook.c: 691: if(ChooseFun == 1 || ChooseFun == 2)
  7817  0865  033C               	decf	_ChooseFun,w	;volatile
  7818  0866  1903               	btfsc	3,2
  7819  0867  286C               	goto	l15842
  7820  0868  3002               	movlw	2
  7821  0869  063C               	xorwf	_ChooseFun,w	;volatile
  7822  086A  1D03               	btfss	3,2
  7823  086B  286D               	goto	l15844
  7824  086C                     l15842:	
  7825                           
  7826                           ;cook.c: 692: {
  7827                           ;cook.c: 693: RiceHeat();
  7828  086C  2A78               	ljmp	l12290
  7829  086D                     l15844:	
  7830                           ;cook.c: 694: }
  7831                           
  7832                           
  7833                           ;cook.c: 695: else if(ChooseFun == 14)
  7834  086D  300E               	movlw	14
  7835  086E  063C               	xorwf	_ChooseFun,w	;volatile
  7836  086F  1D03               	btfss	3,2
  7837  0870  2874               	goto	l15850
  7838                           
  7839                           ;cook.c: 696: {
  7840                           ;cook.c: 697: WorkStep = 2;
  7841  0871  3002               	movlw	2
  7842  0872  00C2               	movwf	_WorkStep	;volatile
  7843                           
  7844                           ;cook.c: 698: OpenCook();
  7845  0873  2952               	ljmp	l12522
  7846  0874                     l15850:	
  7847                           ;cook.c: 699: }
  7848                           
  7849                           
  7850                           ;cook.c: 700: else if(ChooseFun == 13)
  7851  0874  300D               	movlw	13
  7852  0875  063C               	xorwf	_ChooseFun,w	;volatile
  7853  0876  1D03               	btfss	3,2
  7854  0877  2879               	goto	l15854
  7855                           
  7856                           ;cook.c: 701: {
  7857                           ;cook.c: 702: ReheatCook();
  7858  0878  288C               	ljmp	l12656
  7859  0879                     l15854:	
  7860                           ;cook.c: 703: }
  7861                           
  7862                           
  7863                           ;cook.c: 704: else if(ChooseFun == 12)
  7864  0879  300C               	movlw	12
  7865  087A  063C               	xorwf	_ChooseFun,w	;volatile
  7866  087B  1D03               	btfss	3,2
  7867  087C  287E               	goto	l15858
  7868                           
  7869                           ;cook.c: 705: {
  7870                           ;cook.c: 706: CakeHeat();
  7871  087D  28DD               	ljmp	l12586
  7872  087E                     l15858:	
  7873                           ;cook.c: 707: }
  7874                           
  7875                           
  7876                           ;cook.c: 708: else
  7877                           ;cook.c: 709: {
  7878                           ;cook.c: 710: PressureHeat();
  7879  087E  29B9               	ljmp	l12410
  7880  087F                     l15862:	
  7881                           
  7882                           ;cook.c: 721: KeepWarmHeat();
  7883  087F  2800               	ljmp	l15348
  7884  0880                     l15868:	
  7885                           ;cook.c: 722: break;
  7886                           
  7887  0880  086A               	movf	_SysStatus,w	;volatile
  7888                           
  7889                           ; Switch size 1, requested type "space"
  7890                           ; Number of cases is 3, Range of values is 3 to 5
  7891                           ; switch strategies available:
  7892                           ; Name         Instructions Cycles
  7893                           ; simple_byte           10     6 (average)
  7894                           ; direct_byte           20    11 (fixed)
  7895                           ; jumptable            263     9 (fixed)
  7896                           ;	Chosen strategy is simple_byte
  7897  0881  3A03               	xorlw	3	; case 3
  7898  0882  1903               	skipnz
  7899  0883  285D               	goto	l15834
  7900  0884  3A07               	xorlw	7	; case 4
  7901  0885  1903               	skipnz
  7902  0886  287F               	goto	l15862
  7903  0887  3A01               	xorlw	1	; case 5
  7904  0888  1903               	skipnz
  7905  0889  2854               	goto	l15826
  7906  088A  2845               	goto	l15810
  7907  088B  0008               	return
  7908  088C                     __end_of_Cook_Task:	
  7909  088C                     __ptext54:	
  7910 ;; *************** function _ReheatCook *****************
  7911 ;; Defined at:
  7912 ;;		line 563 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 300/0
  7923 ;;		On exit  : 300/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7926 ;;      Params:         0       0       0       0       0
  7927 ;;      Locals:         0       0       0       0       0
  7928 ;;      Temps:          0       0       0       0       0
  7929 ;;      Totals:         0       0       0       0       0
  7930 ;;Total ram usage:        0 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    3
  7933 ;; This function calls:
  7934 ;;		_BotHeatOff
  7935 ;;		_BotHeatOn
  7936 ;;		_Heat_Time_Select
  7937 ;;		_ShortTimeOn
  7938 ;; This function is called by:
  7939 ;;		_Cook_Task
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _ReheatCook
  7945  088C                     _ReheatCook:	
  7946  088C                     l12656:	
  7947                           ;incstack = 0
  7948                           ; Regs used in _ReheatCook: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7949                           
  7950                           
  7951                           ;cook.c: 565: if((b_PressureOn || WorkTimeM >= 30) && WorkStage != 3)
  7952  088C  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  7953  088D  2892               	goto	l12660
  7954  088E  301E               	movlw	30
  7955  088F  023D               	subwf	_WorkTimeM,w	;volatile
  7956  0890  1C03               	skipc
  7957  0891  289D               	goto	l12710
  7958  0892                     l12660:	
  7959  0892  3003               	movlw	3
  7960  0893  063F               	xorwf	_WorkStage,w	;volatile
  7961  0894  1903               	btfsc	3,2
  7962  0895  289D               	goto	l12710
  7963                           
  7964                           ;cook.c: 566: {
  7965                           ;cook.c: 567: WorkStage = 3;
  7966  0896  3003               	movlw	3
  7967  0897  00BF               	movwf	_WorkStage	;volatile
  7968                           
  7969                           ;cook.c: 568: WorkStep = 2;
  7970  0898  3002               	movlw	2
  7971  0899  00C2               	movwf	_WorkStep	;volatile
  7972                           
  7973                           ;cook.c: 569: ShortTimeOn();
  7974  089A  2363  120A  158A   	fcall	_ShortTimeOn
  7975  089D                     l12710:	
  7976  089D  0842               	movf	_WorkStep,w	;volatile
  7977                           
  7978                           ; Switch size 1, requested type "space"
  7979                           ; Number of cases is 3, Range of values is 0 to 2
  7980                           ; switch strategies available:
  7981                           ; Name         Instructions Cycles
  7982                           ; simple_byte           10     6 (average)
  7983                           ; direct_byte           17     8 (fixed)
  7984                           ; jumptable            260     6 (fixed)
  7985                           ;	Chosen strategy is simple_byte
  7986  089E  3A00               	xorlw	0	; case 0
  7987  089F  1903               	skipnz
  7988  08A0  28A9               	goto	l12666
  7989  08A1  3A01               	xorlw	1	; case 1
  7990  08A2  1903               	skipnz
  7991  08A3  28B4               	goto	l12674
  7992  08A4  3A03               	xorlw	3	; case 2
  7993  08A5  1903               	skipnz
  7994  08A6  28CF               	goto	l2032
  7995  08A7  28BB               	goto	l12678
  7996  08A8  0008               	return
  7997  08A9                     l12666:	
  7998                           
  7999                           ;cook.c: 575: if(Ad_Bot >= 163)
  8000  08A9  30A3               	movlw	163
  8001  08AA  024F               	subwf	_Ad_Bot,w	;volatile
  8002  08AB  1C03               	skipc
  8003  08AC  28B3               	goto	l12672
  8004  08AD                     l12668:	
  8005                           
  8006                           ;cook.c: 576: {
  8007                           ;cook.c: 577: BotHeatOff();
  8008  08AD  2367  120A  158A   	fcall	_BotHeatOff
  8009                           
  8010                           ;cook.c: 578: ShortTimeOn();
  8011  08B0  2363               	fcall	_ShortTimeOn
  8012                           
  8013                           ;cook.c: 579: WorkStep++;
  8014  08B1  0AC2               	incf	_WorkStep,f	;volatile
  8015                           
  8016                           ;cook.c: 580: break;
  8017  08B2  0008               	return
  8018  08B3                     l12672:	
  8019                           
  8020                           ;cook.c: 581: }
  8021                           ;cook.c: 582: BotHeatOn();
  8022  08B3  2B6C               	ljmp	l12066
  8023  08B4                     l12674:	
  8024                           ;cook.c: 583: break;
  8025                           
  8026                           
  8027                           ;cook.c: 586: if(ShortCntM==0 && ShortCntL< 30)
  8028  08B4  0843               	movf	_ShortCntM,w	;volatile
  8029  08B5  1D03               	btfss	3,2
  8030  08B6  28BC               	goto	l12680
  8031  08B7  301E               	movlw	30
  8032  08B8  0244               	subwf	_ShortCntL,w	;volatile
  8033  08B9  1803               	skipnc
  8034  08BA  28BC               	goto	l12680
  8035  08BB                     l12678:	
  8036                           
  8037                           ;cook.c: 587: {
  8038                           ;cook.c: 588: BotHeatOff();
  8039  08BB  2B67               	ljmp	l12070
  8040  08BC                     l12680:	
  8041                           ;cook.c: 589: break;
  8042                           
  8043                           
  8044                           ;cook.c: 590: }
  8045                           ;cook.c: 592: if(ShortCntM >= 5)
  8046  08BC  3005               	movlw	5
  8047  08BD  0243               	subwf	_ShortCntM,w	;volatile
  8048  08BE  1C03               	skipc
  8049  08BF  28C3               	goto	l12690
  8050                           
  8051                           ;cook.c: 593: {
  8052                           ;cook.c: 594: WorkStage = 3;
  8053  08C0  3003               	movlw	3
  8054  08C1  00BF               	movwf	_WorkStage	;volatile
  8055  08C2  28AD               	goto	l12668
  8056  08C3                     l12690:	
  8057                           ;cook.c: 596: ShortTimeOn();
  8058                           
  8059                           ;cook.c: 595: BotHeatOff();
  8060                           
  8061                           
  8062                           ;cook.c: 599: }
  8063                           ;cook.c: 601: if(Ad_Bot>180)
  8064  08C3  30B5               	movlw	181
  8065  08C4  024F               	subwf	_Ad_Bot,w	;volatile
  8066  08C5  1803               	btfsc	3,0
  8067  08C6  28BB               	goto	l12678
  8068                           
  8069                           ;cook.c: 605: }
  8070                           ;cook.c: 606: if(Ad_Bot<=177)
  8071  08C7  30B2               	movlw	178
  8072  08C8  024F               	subwf	_Ad_Bot,w	;volatile
  8073  08C9  1803               	skipnc
  8074  08CA  0008               	return
  8075                           
  8076                           ;cook.c: 607: {
  8077                           ;cook.c: 608: Heat_Time_Select(24, 6);
  8078  08CB  3006               	movlw	6
  8079  08CC  00DA               	movwf	Heat_Time_Select@offtm
  8080  08CD  3018               	movlw	24
  8081  08CE  2B4B               	ljmp	_Heat_Time_Select
  8082  08CF                     l2032:	
  8083                           ;cook.c: 612: case 2 :
  8084                           
  8085                           
  8086                           ;cook.c: 614: if(b_PressureOn == 1 || Ad_Bot >= 180)
  8087  08CF  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8088  08D0  28BB               	goto	l12678
  8089  08D1  30B4               	movlw	180
  8090  08D2  024F               	subwf	_Ad_Bot,w	;volatile
  8091  08D3  1803               	btfsc	3,0
  8092  08D4  28BB               	goto	l12678
  8093                           
  8094                           ;cook.c: 618: else if(Ad_Bot <= 177)
  8095  08D5  30B2               	movlw	178
  8096  08D6  024F               	subwf	_Ad_Bot,w	;volatile
  8097  08D7  1803               	skipnc
  8098  08D8  0008               	return
  8099                           
  8100                           ;cook.c: 619: {
  8101                           ;cook.c: 620: Heat_Time_Select(8, 10);
  8102  08D9  300A               	movlw	10
  8103  08DA  00DA               	movwf	Heat_Time_Select@offtm
  8104  08DB  3008               	movlw	8
  8105  08DC  2B4B               	ljmp	_Heat_Time_Select
  8106  08DD                     __end_of_ReheatCook:	
  8107  08DD                     __ptext60:	
  8108 ;; *************** function _CakeHeat *****************
  8109 ;; Defined at:
  8110 ;;		line 491 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 300/0
  8121 ;;		On exit  : 300/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8124 ;;      Params:         0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0
  8127 ;;      Totals:         0       0       0       0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    3
  8131 ;; This function calls:
  8132 ;;		_BotHeatOff
  8133 ;;		_BotHeatOn
  8134 ;;		_Heat_Time_Select
  8135 ;;		_ShortTimeOn
  8136 ;; This function is called by:
  8137 ;;		_Cook_Task
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           
  8142                           ;psect for function _CakeHeat
  8143  08DD                     _CakeHeat:	
  8144  08DD                     l12586:	
  8145                           ;incstack = 0
  8146                           ; Regs used in _CakeHeat: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8147                           
  8148                           
  8149                           ;cook.c: 493: if(((WorkTimeM >= 30) || Ad_Bot >= 204 || b_PressureOn) && WorkStage != 3)
  8150  08DD  301E               	movlw	30
  8151  08DE  023D               	subwf	_WorkTimeM,w	;volatile
  8152  08DF  1803               	skipnc
  8153  08E0  28E7               	goto	l12592
  8154  08E1  30CC               	movlw	204
  8155  08E2  024F               	subwf	_Ad_Bot,w	;volatile
  8156  08E3  1803               	skipnc
  8157  08E4  28E7               	goto	l12592
  8158  08E5  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8159  08E6  28F4               	goto	l12654
  8160  08E7                     l12592:	
  8161  08E7  3003               	movlw	3
  8162  08E8  063F               	xorwf	_WorkStage,w	;volatile
  8163  08E9  1903               	btfsc	3,2
  8164  08EA  28F4               	goto	l12654
  8165                           
  8166                           ;cook.c: 494: {
  8167                           ;cook.c: 495: WorkStage = 3;
  8168  08EB  3003               	movlw	3
  8169  08EC  00BF               	movwf	_WorkStage	;volatile
  8170                           
  8171                           ;cook.c: 496: WorkStep = 3;
  8172  08ED  00C2               	movwf	_WorkStep	;volatile
  8173                           
  8174                           ;cook.c: 497: ShortTimeOn();
  8175  08EE  2363  120A  158A   	fcall	_ShortTimeOn
  8176                           
  8177                           ;cook.c: 499: TotalTimeSave = WorkTimeM + CountDownTime;
  8178  08F1  0840               	movf	_CountDownTime,w	;volatile
  8179  08F2  073D               	addwf	_WorkTimeM,w	;volatile
  8180  08F3  00BE               	movwf	_TotalTimeSave	;volatile
  8181  08F4                     l12654:	
  8182  08F4  0842               	movf	_WorkStep,w	;volatile
  8183                           
  8184                           ; Switch size 1, requested type "space"
  8185                           ; Number of cases is 4, Range of values is 0 to 3
  8186                           ; switch strategies available:
  8187                           ; Name         Instructions Cycles
  8188                           ; simple_byte           13     7 (average)
  8189                           ; direct_byte           20     8 (fixed)
  8190                           ; jumptable            260     6 (fixed)
  8191                           ;	Chosen strategy is simple_byte
  8192  08F5  3A00               	xorlw	0	; case 0
  8193  08F6  1903               	skipnz
  8194  08F7  2903               	goto	l12600
  8195  08F8  3A01               	xorlw	1	; case 1
  8196  08F9  1903               	skipnz
  8197  08FA  2906               	goto	l12604
  8198  08FB  3A03               	xorlw	3	; case 2
  8199  08FC  1903               	skipnz
  8200  08FD  2913               	goto	l12614
  8201  08FE  3A01               	xorlw	1	; case 3
  8202  08FF  1903               	skipnz
  8203  0900  293B               	goto	l2008
  8204  0901  2941               	goto	l12640
  8205  0902  0008               	return
  8206  0903                     l12600:	
  8207                           
  8208                           ;cook.c: 504: ShortTimeOn();
  8209  0903  2363               	fcall	_ShortTimeOn
  8210                           
  8211                           ;cook.c: 505: WorkStep++;
  8212  0904  0AC2               	incf	_WorkStep,f	;volatile
  8213                           
  8214                           ;cook.c: 506: break;
  8215  0905  0008               	return
  8216  0906                     l12604:	
  8217                           
  8218                           ;cook.c: 508: if(Ad_Bot >= 154 || ShortCntM >= 15)
  8219  0906  309A               	movlw	154
  8220  0907  024F               	subwf	_Ad_Bot,w	;volatile
  8221  0908  1803               	skipnc
  8222  0909  290E               	goto	l12608
  8223  090A  300F               	movlw	15
  8224  090B  0243               	subwf	_ShortCntM,w	;volatile
  8225  090C  1C03               	skipc
  8226  090D  2912               	goto	l12612
  8227  090E                     l12608:	
  8228                           
  8229                           ;cook.c: 509: {
  8230                           ;cook.c: 510: BotHeatOff();
  8231  090E  2367  120A  158A   	fcall	_BotHeatOff
  8232  0911  2903               	goto	l12600
  8233  0912                     l12612:	
  8234                           ;cook.c: 511: ShortTimeOn();
  8235                           
  8236                           
  8237                           ;cook.c: 514: }
  8238                           ;cook.c: 515: BotHeatOn();
  8239  0912  2B6C               	ljmp	l12066
  8240  0913                     l12614:	
  8241                           ;cook.c: 516: break;
  8242                           
  8243                           
  8244                           ;cook.c: 518: if(Ad_Bot >= 204 || ShortCntM >= 15)
  8245  0913  30CC               	movlw	204
  8246  0914  024F               	subwf	_Ad_Bot,w	;volatile
  8247  0915  1803               	skipnc
  8248  0916  291B               	goto	l12618
  8249  0917  300F               	movlw	15
  8250  0918  0243               	subwf	_ShortCntM,w	;volatile
  8251  0919  1C03               	skipc
  8252  091A  2923               	goto	l12626
  8253  091B                     l12618:	
  8254                           
  8255                           ;cook.c: 519: {
  8256                           ;cook.c: 520: WorkStage = 3;
  8257  091B  3003               	movlw	3
  8258  091C  00BF               	movwf	_WorkStage	;volatile
  8259                           
  8260                           ;cook.c: 521: WorkStep++;
  8261  091D  0AC2               	incf	_WorkStep,f	;volatile
  8262                           
  8263                           ;cook.c: 522: BotHeatOff();
  8264  091E  2367               	fcall	_BotHeatOff
  8265                           
  8266                           ;cook.c: 524: TotalTimeSave = WorkTimeM + CountDownTime;
  8267  091F  0840               	movf	_CountDownTime,w	;volatile
  8268  0920  073D               	addwf	_WorkTimeM,w	;volatile
  8269  0921  00BE               	movwf	_TotalTimeSave	;volatile
  8270                           
  8271                           ;cook.c: 525: break;
  8272  0922  0008               	return
  8273  0923                     l12626:	
  8274                           
  8275                           ;cook.c: 526: }
  8276                           ;cook.c: 527: if(Ad_Bot <= 186)
  8277  0923  30BB               	movlw	187
  8278  0924  024F               	subwf	_Ad_Bot,w	;volatile
  8279  0925  1803               	skipnc
  8280  0926  292B               	goto	l12630
  8281                           
  8282                           ;cook.c: 528: {
  8283                           ;cook.c: 529: Heat_Time_Select(12, 8);
  8284  0927  3008               	movlw	8
  8285  0928  00DA               	movwf	Heat_Time_Select@offtm
  8286  0929  300C               	movlw	12
  8287  092A  2B4B               	ljmp	_Heat_Time_Select
  8288  092B                     l12630:	
  8289                           ;cook.c: 530: }
  8290                           
  8291                           
  8292                           ;cook.c: 531: else if(Ad_Bot <= 197)
  8293  092B  30C6               	movlw	198
  8294  092C  024F               	subwf	_Ad_Bot,w	;volatile
  8295  092D  1803               	skipnc
  8296  092E  2933               	goto	l12634
  8297                           
  8298                           ;cook.c: 532: {
  8299                           ;cook.c: 533: Heat_Time_Select(7, 13);
  8300  092F  300D               	movlw	13
  8301  0930  00DA               	movwf	Heat_Time_Select@offtm
  8302  0931  3007               	movlw	7
  8303  0932  2B4B               	ljmp	_Heat_Time_Select
  8304  0933                     l12634:	
  8305                           ;cook.c: 534: }
  8306                           
  8307                           
  8308                           ;cook.c: 535: else if(Ad_Bot <= 204)
  8309  0933  30CD               	movlw	205
  8310  0934  024F               	subwf	_Ad_Bot,w	;volatile
  8311  0935  1803               	skipnc
  8312  0936  0008               	return
  8313                           
  8314                           ;cook.c: 536: {
  8315                           ;cook.c: 537: Heat_Time_Select(5, 15);
  8316  0937  300F               	movlw	15
  8317  0938  00DA               	movwf	Heat_Time_Select@offtm
  8318  0939  3005               	movlw	5
  8319  093A  2B4B               	ljmp	_Heat_Time_Select
  8320  093B                     l2008:	
  8321                           ;cook.c: 540: case 3:
  8322                           
  8323                           ;cook.c: 538: }
  8324                           ;cook.c: 539: break;
  8325                           
  8326                           
  8327                           ;cook.c: 541: if(b_PressureOn || Ad_Bot >= 201)
  8328  093B  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8329  093C  2941               	goto	l12640
  8330  093D  30C9               	movlw	201
  8331  093E  024F               	subwf	_Ad_Bot,w	;volatile
  8332  093F  1C03               	skipc
  8333  0940  2942               	goto	l12642
  8334  0941                     l12640:	
  8335                           
  8336                           ;cook.c: 542: {
  8337                           ;cook.c: 543: BotHeatOff();
  8338  0941  2B67               	ljmp	l12070
  8339  0942                     l12642:	
  8340                           ;cook.c: 544: }
  8341                           
  8342                           
  8343                           ;cook.c: 545: else if(Ad_Bot <= 186)
  8344  0942  30BB               	movlw	187
  8345  0943  024F               	subwf	_Ad_Bot,w	;volatile
  8346  0944  1803               	skipnc
  8347  0945  294A               	goto	l12646
  8348                           
  8349                           ;cook.c: 546: {
  8350                           ;cook.c: 547: Heat_Time_Select(7, 13);
  8351  0946  300D               	movlw	13
  8352  0947  00DA               	movwf	Heat_Time_Select@offtm
  8353  0948  3007               	movlw	7
  8354  0949  2B4B               	ljmp	_Heat_Time_Select
  8355  094A                     l12646:	
  8356                           ;cook.c: 548: }
  8357                           
  8358                           
  8359                           ;cook.c: 549: else if(Ad_Bot <= 197)
  8360  094A  30C6               	movlw	198
  8361  094B  024F               	subwf	_Ad_Bot,w	;volatile
  8362  094C  1803               	skipnc
  8363  094D  0008               	return
  8364                           
  8365                           ;cook.c: 550: {
  8366                           ;cook.c: 551: Heat_Time_Select(5, 15);
  8367  094E  300F               	movlw	15
  8368  094F  00DA               	movwf	Heat_Time_Select@offtm
  8369  0950  3005               	movlw	5
  8370  0951  2B4B               	ljmp	_Heat_Time_Select
  8371  0952                     __end_of_CakeHeat:	
  8372  0952                     __ptext57:	
  8373 ;; *************** function _OpenCook *****************
  8374 ;; Defined at:
  8375 ;;		line 403 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;		None
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 300/0
  8386 ;;		On exit  : 300/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8389 ;;      Params:         0       0       0       0       0
  8390 ;;      Locals:         0       0       0       0       0
  8391 ;;      Temps:          0       0       0       0       0
  8392 ;;      Totals:         0       0       0       0       0
  8393 ;;Total ram usage:        0 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    3
  8396 ;; This function calls:
  8397 ;;		_BotHeatOff
  8398 ;;		_BotHeatOn
  8399 ;;		_Heat_Time_Select
  8400 ;;		_ShortTimeOn
  8401 ;; This function is called by:
  8402 ;;		_Cook_Task
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _OpenCook
  8408  0952                     _OpenCook:	
  8409  0952                     l12522:	
  8410                           ;incstack = 0
  8411                           ; Regs used in _OpenCook: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8412                           
  8413                           
  8414                           ;cook.c: 405: if((b_PressureOn || WorkTimeM >= 30) && WorkStage != 3)
  8415  0952  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8416  0953  2958               	goto	l12526
  8417  0954  301E               	movlw	30
  8418  0955  023D               	subwf	_WorkTimeM,w	;volatile
  8419  0956  1C03               	skipc
  8420  0957  29AD               	goto	l12584
  8421  0958                     l12526:	
  8422  0958  3003               	movlw	3
  8423  0959  063F               	xorwf	_WorkStage,w	;volatile
  8424  095A  1903               	btfsc	3,2
  8425  095B  29AD               	goto	l12584
  8426                           
  8427                           ;cook.c: 406: {
  8428                           ;cook.c: 407: WorkStage = 3;
  8429  095C  3003               	movlw	3
  8430  095D  00BF               	movwf	_WorkStage	;volatile
  8431                           
  8432                           ;cook.c: 408: WorkStep = 2;
  8433  095E  3002               	movlw	2
  8434  095F  00C2               	movwf	_WorkStep	;volatile
  8435                           
  8436                           ;cook.c: 409: ShortTimeOn();
  8437  0960  2363  120A  158A   	fcall	_ShortTimeOn
  8438  0963  29AD               	goto	l12584
  8439  0964                     l12532:	
  8440                           
  8441                           ;cook.c: 416: if(Ad_Bot >= 163)
  8442  0964  30A3               	movlw	163
  8443  0965  024F               	subwf	_Ad_Bot,w	;volatile
  8444  0966  1C03               	skipc
  8445  0967  296F               	goto	l12540
  8446                           
  8447                           ;cook.c: 417: {
  8448                           ;cook.c: 418: BotHeatOff();
  8449  0968  2367  120A  158A   	fcall	_BotHeatOff
  8450                           
  8451                           ;cook.c: 419: ShortTimeOn();
  8452  096B  2363               	fcall	_ShortTimeOn
  8453                           
  8454                           ;cook.c: 420: WorkStep++;
  8455  096C  0AC2               	incf	_WorkStep,f	;volatile
  8456                           
  8457                           ;cook.c: 421: b_Opencook_OK = 0;
  8458  096D  10F1               	bcf	_b_Opencook_OK/(0+8),_b_Opencook_OK& (0+7)	;volatile
  8459                           
  8460                           ;cook.c: 422: break;
  8461  096E  0008               	return
  8462  096F                     l12540:	
  8463                           
  8464                           ;cook.c: 423: }
  8465                           ;cook.c: 424: BotHeatOn();
  8466  096F  2B6C               	ljmp	l12066
  8467  0970                     l12542:	
  8468                           ;cook.c: 425: break;
  8469                           
  8470                           
  8471                           ;cook.c: 427: if(ShortCntM >= 5 || Ad_Bot >= 204)
  8472  0970  3005               	movlw	5
  8473  0971  0243               	subwf	_ShortCntM,w	;volatile
  8474  0972  1803               	skipnc
  8475  0973  2978               	goto	l12546
  8476  0974  30CC               	movlw	204
  8477  0975  024F               	subwf	_Ad_Bot,w	;volatile
  8478  0976  1C03               	skipc
  8479  0977  2983               	goto	l12554
  8480  0978                     l12546:	
  8481                           
  8482                           ;cook.c: 428: {
  8483                           ;cook.c: 429: WorkStage = 3;
  8484  0978  3003               	movlw	3
  8485  0979  00BF               	movwf	_WorkStage	;volatile
  8486                           
  8487                           ;cook.c: 430: BotHeatOff();
  8488  097A  2367  120A  158A   	fcall	_BotHeatOff
  8489                           
  8490                           ;cook.c: 431: ShortTimeOn();
  8491  097D  2363               	fcall	_ShortTimeOn
  8492                           
  8493                           ;cook.c: 432: WorkStep++;
  8494  097E  0AC2               	incf	_WorkStep,f	;volatile
  8495                           
  8496                           ;cook.c: 434: TotalTimeSave = WorkTimeM + CountDownTime;
  8497  097F  0840               	movf	_CountDownTime,w	;volatile
  8498  0980  073D               	addwf	_WorkTimeM,w	;volatile
  8499  0981  00BE               	movwf	_TotalTimeSave	;volatile
  8500                           
  8501                           ;cook.c: 435: break;
  8502  0982  0008               	return
  8503  0983                     l12554:	
  8504                           
  8505                           ;cook.c: 436: }
  8506                           ;cook.c: 437: Heat_Time_Select(24, 6);
  8507  0983  3006               	movlw	6
  8508  0984  00DA               	movwf	Heat_Time_Select@offtm
  8509  0985  3018               	movlw	24
  8510  0986  2B4B               	ljmp	_Heat_Time_Select
  8511  0987                     l1974:	
  8512                           ;cook.c: 439: case 2:
  8513                           
  8514                           ;cook.c: 438: break;
  8515                           
  8516                           
  8517                           ;cook.c: 441: if(b_PressureOn)
  8518  0987  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8519  0988  298A               	goto	l1975
  8520  0989                     l12556:	
  8521                           
  8522                           ;cook.c: 442: {
  8523                           ;cook.c: 443: BotHeatOff();
  8524  0989  2B67               	ljmp	l12070
  8525  098A                     l1975:	
  8526                           ;cook.c: 444: break;
  8527                           
  8528                           
  8529                           ;cook.c: 445: }
  8530                           ;cook.c: 447: if(b_Opencook_OK == 0 && Ad_Bot >= 204)
  8531  098A  18F1               	btfsc	_b_Opencook_OK/(0+8),_b_Opencook_OK& (0+7)	;volatile
  8532  098B  2993               	goto	l1976
  8533  098C  30CC               	movlw	204
  8534  098D  024F               	subwf	_Ad_Bot,w	;volatile
  8535  098E  1C03               	skipc
  8536  098F  2993               	goto	l1976
  8537                           
  8538                           ;cook.c: 448: {
  8539                           ;cook.c: 449: BotHeatOff();
  8540  0990  2367               	fcall	_BotHeatOff
  8541                           
  8542                           ;cook.c: 450: b_Opencook_OK = 1;
  8543  0991  14F1               	bsf	_b_Opencook_OK/(0+8),_b_Opencook_OK& (0+7)	;volatile
  8544                           
  8545                           ;cook.c: 451: break;
  8546  0992  0008               	return
  8547  0993                     l1976:	
  8548                           
  8549                           ;cook.c: 452: }
  8550                           ;cook.c: 454: if(b_Opencook_OK)
  8551  0993  1CF1               	btfss	_b_Opencook_OK/(0+8),_b_Opencook_OK& (0+7)	;volatile
  8552  0994  29A0               	goto	l12572
  8553                           
  8554                           ;cook.c: 455: {
  8555                           ;cook.c: 456: if(Ad_Bot >= 179)
  8556  0995  30B3               	movlw	179
  8557  0996  024F               	subwf	_Ad_Bot,w	;volatile
  8558  0997  1803               	btfsc	3,0
  8559  0998  2989               	goto	l12556
  8560                           
  8561                           ;cook.c: 460: else if(Ad_Bot <= 171)
  8562  0999  30AC               	movlw	172
  8563  099A  024F               	subwf	_Ad_Bot,w	;volatile
  8564  099B  1803               	skipnc
  8565  099C  0008               	return
  8566                           
  8567                           ;cook.c: 461: {
  8568                           ;cook.c: 462: Heat_Time_Select(15, 15);
  8569  099D  300F               	movlw	15
  8570  099E  00DA               	movwf	Heat_Time_Select@offtm
  8571  099F  2B4B               	ljmp	_Heat_Time_Select
  8572  09A0                     l12572:	
  8573                           
  8574                           ;cook.c: 465: else
  8575                           ;cook.c: 466: {
  8576                           ;cook.c: 468: if(Ad_Bot >= 179)
  8577  09A0  30B3               	movlw	179
  8578  09A1  024F               	subwf	_Ad_Bot,w	;volatile
  8579  09A2  1C03               	skipc
  8580  09A3  29A8               	goto	l12576
  8581                           
  8582                           ;cook.c: 469: {
  8583                           ;cook.c: 470: Heat_Time_Select(24, 6);
  8584  09A4  3006               	movlw	6
  8585  09A5  00DA               	movwf	Heat_Time_Select@offtm
  8586  09A6  3018               	movlw	24
  8587  09A7  2B4B               	ljmp	_Heat_Time_Select
  8588  09A8                     l12576:	
  8589                           ;cook.c: 471: }
  8590                           
  8591                           
  8592                           ;cook.c: 472: else if(Ad_Bot <= 171)
  8593  09A8  30AC               	movlw	172
  8594  09A9  024F               	subwf	_Ad_Bot,w	;volatile
  8595  09AA  1803               	skipnc
  8596  09AB  0008               	return
  8597  09AC  296F               	goto	l12540
  8598  09AD                     l12584:	
  8599                           ;cook.c: 475: }
  8600                           ;cook.c: 476: }
  8601                           ;cook.c: 477: break;
  8602                           
  8603  09AD  0842               	movf	_WorkStep,w	;volatile
  8604                           
  8605                           ; Switch size 1, requested type "space"
  8606                           ; Number of cases is 3, Range of values is 0 to 2
  8607                           ; switch strategies available:
  8608                           ; Name         Instructions Cycles
  8609                           ; simple_byte           10     6 (average)
  8610                           ; direct_byte           17     8 (fixed)
  8611                           ; jumptable            260     6 (fixed)
  8612                           ;	Chosen strategy is simple_byte
  8613  09AE  3A00               	xorlw	0	; case 0
  8614  09AF  1903               	skipnz
  8615  09B0  2964               	goto	l12532
  8616  09B1  3A01               	xorlw	1	; case 1
  8617  09B2  1903               	skipnz
  8618  09B3  2970               	goto	l12542
  8619  09B4  3A03               	xorlw	3	; case 2
  8620  09B5  1903               	skipnz
  8621  09B6  2987               	goto	l1974
  8622  09B7  2989               	goto	l12556
  8623  09B8  0008               	return
  8624  09B9                     __end_of_OpenCook:	
  8625  09B9                     __ptext55:	
  8626 ;; *************** function _PressureHeat *****************
  8627 ;; Defined at:
  8628 ;;		line 275 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;		None
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 300/0
  8639 ;;		On exit  : 300/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8642 ;;      Params:         0       0       0       0       0
  8643 ;;      Locals:         0       0       0       0       0
  8644 ;;      Temps:          0       0       0       0       0
  8645 ;;      Totals:         0       0       0       0       0
  8646 ;;Total ram usage:        0 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    3
  8649 ;; This function calls:
  8650 ;;		_BotHeatOff
  8651 ;;		_BotHeatOn
  8652 ;;		_Cancel
  8653 ;;		_Heat_Time_Select
  8654 ;;		_ShortTimeOn
  8655 ;; This function is called by:
  8656 ;;		_Cook_Task
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _PressureHeat
  8662  09B9                     _PressureHeat:	
  8663  09B9                     l12410:	
  8664                           ;incstack = 0
  8665                           ; Regs used in _PressureHeat: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8666                           
  8667                           
  8668                           ;cook.c: 278: if((b_PressureOn == 1) && WorkStage != 3)
  8669  09B9  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8670  09BA  29C9               	goto	l12420
  8671  09BB  3003               	movlw	3
  8672  09BC  063F               	xorwf	_WorkStage,w	;volatile
  8673  09BD  1903               	btfsc	3,2
  8674  09BE  29C9               	goto	l12420
  8675                           
  8676                           ;cook.c: 279: {
  8677                           ;cook.c: 280: WorkStage = 3;
  8678  09BF  3003               	movlw	3
  8679  09C0  00BF               	movwf	_WorkStage	;volatile
  8680                           
  8681                           ;cook.c: 281: WorkStep = 5;
  8682  09C1  3005               	movlw	5
  8683  09C2  00C2               	movwf	_WorkStep	;volatile
  8684                           
  8685                           ;cook.c: 282: ShortTimeOn();
  8686  09C3  2363  120A  158A   	fcall	_ShortTimeOn
  8687                           
  8688                           ;cook.c: 284: TotalTimeSave = WorkTimeM + CountDownTime;
  8689  09C6  0840               	movf	_CountDownTime,w	;volatile
  8690  09C7  073D               	addwf	_WorkTimeM,w	;volatile
  8691  09C8  00BE               	movwf	_TotalTimeSave	;volatile
  8692  09C9                     l12420:	
  8693                           
  8694                           ;cook.c: 285: }
  8695                           ;cook.c: 287: if(Ad_Bot >= 213)
  8696  09C9  30D5               	movlw	213
  8697  09CA  024F               	subwf	_Ad_Bot,w	;volatile
  8698  09CB  1C03               	skipc
  8699  09CC  2A63               	goto	l12520
  8700                           
  8701                           ;cook.c: 288: {
  8702                           ;cook.c: 289: BotHeatOff();
  8703  09CD  2367  120A  158A   	fcall	_BotHeatOff
  8704                           
  8705                           ;cook.c: 290: Cancel();
  8706  09D0  2577  120A  158A   	fcall	_Cancel
  8707                           
  8708                           ;cook.c: 291: {{BuzCnt = 5; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
  8709  09D3  3005               	movlw	5
  8710  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  8711  09D5  00D7               	movwf	_BuzCnt	;volatile
  8712  09D6  3019               	movlw	25
  8713  09D7  2F88               	ljmp	PL2	;call to abstracted procedure
  8714  09D8                     l12428:	
  8715                           
  8716                           ;cook.c: 299: if(Ad_Bot >= 145)
  8717  09D8  3091               	movlw	145
  8718  09D9  024F               	subwf	_Ad_Bot,w	;volatile
  8719  09DA  1C03               	skipc
  8720  09DB  29E2               	goto	l12434
  8721                           
  8722                           ;cook.c: 300: {
  8723                           ;cook.c: 301: BotHeatOff();
  8724  09DC  2367  120A  158A   	fcall	_BotHeatOff
  8725  09DF                     l12438:	
  8726                           ;cook.c: 302: ShortTimeOn();
  8727                           
  8728                           
  8729                           ;cook.c: 311: {
  8730                           ;cook.c: 312: ShortTimeOn();
  8731  09DF  2363               	fcall	_ShortTimeOn
  8732  09E0                     l12432:	
  8733                           
  8734                           ;cook.c: 303: WorkStep++;
  8735  09E0  0AC2               	incf	_WorkStep,f	;volatile
  8736                           
  8737                           ;cook.c: 304: break;
  8738  09E1  0008               	return
  8739  09E2                     l12434:	
  8740                           
  8741                           ;cook.c: 305: }
  8742                           ;cook.c: 306: BotHeatOn();
  8743  09E2  2B6C               	ljmp	l12066
  8744  09E3                     l12436:	
  8745                           ;cook.c: 307: break;
  8746                           
  8747                           
  8748                           ;cook.c: 310: if(ShortCntM >= 2)
  8749  09E3  3002               	movlw	2
  8750  09E4  0243               	subwf	_ShortCntM,w	;volatile
  8751  09E5  1803               	btfsc	3,0
  8752  09E6  29DF               	goto	l12438
  8753  09E7                     l12442:	
  8754                           
  8755                           ;cook.c: 315: }
  8756                           ;cook.c: 316: BotHeatOff();
  8757  09E7  2B67               	ljmp	l12070
  8758  09E8                     l12444:	
  8759                           ;cook.c: 317: break;
  8760                           
  8761                           
  8762                           ;cook.c: 319: if(Ad_Bot >= 186)
  8763  09E8  30BA               	movlw	186
  8764  09E9  024F               	subwf	_Ad_Bot,w	;volatile
  8765  09EA  1C03               	skipc
  8766  09EB  29E2               	goto	l12434
  8767  09EC                     l12446:	
  8768                           
  8769                           ;cook.c: 320: {
  8770                           ;cook.c: 321: ShortTimeOn();
  8771  09EC  2363  120A  158A   	fcall	_ShortTimeOn
  8772                           
  8773                           ;cook.c: 322: BotHeatOff();
  8774  09EF  2367  120A  158A   	fcall	_BotHeatOff
  8775  09F2  29E0               	goto	l12432
  8776  09F3                     l12452:	
  8777                           
  8778                           ;cook.c: 329: if(Ad_Bot <= 183)
  8779  09F3  30B8               	movlw	184
  8780  09F4  024F               	subwf	_Ad_Bot,w	;volatile
  8781  09F5  1803               	skipnc
  8782  09F6  29FB               	goto	l12458
  8783                           
  8784                           ;cook.c: 330: {
  8785                           ;cook.c: 331: ShortTimeOn();
  8786  09F7  2363               	fcall	_ShortTimeOn
  8787                           
  8788                           ;cook.c: 332: WorkStep = 2;
  8789  09F8  3002               	movlw	2
  8790  09F9  00C2               	movwf	_WorkStep	;volatile
  8791                           
  8792                           ;cook.c: 333: break;
  8793  09FA  0008               	return
  8794  09FB                     l12458:	
  8795                           
  8796                           ;cook.c: 334: }
  8797                           ;cook.c: 336: if(Ad_Bot >= 197)
  8798  09FB  30C5               	movlw	197
  8799  09FC  024F               	subwf	_Ad_Bot,w	;volatile
  8800  09FD  1803               	btfsc	3,0
  8801  09FE  29EC               	goto	l12446
  8802  09FF  0869               	movf	_Vrms_Level,w	;volatile
  8803                           
  8804                           ; Switch size 1, requested type "space"
  8805                           ; Number of cases is 4, Range of values is 1 to 4
  8806                           ; switch strategies available:
  8807                           ; Name         Instructions Cycles
  8808                           ; simple_byte           13     7 (average)
  8809                           ; direct_byte           23    11 (fixed)
  8810                           ; jumptable            263     9 (fixed)
  8811                           ;	Chosen strategy is simple_byte
  8812  0A00  3A01               	xorlw	1	; case 1
  8813  0A01  1903               	skipnz
  8814  0A02  29E2               	goto	l12434
  8815  0A03  3A03               	xorlw	3	; case 2
  8816  0A04  1903               	skipnz
  8817  0A05  2A0D               	goto	l12466
  8818  0A06  3A01               	xorlw	1	; case 3
  8819  0A07  1903               	skipnz
  8820  0A08  2A11               	goto	l12468
  8821  0A09  3A07               	xorlw	7	; case 4
  8822  0A0A  1903               	skipnz
  8823  0A0B  2A15               	goto	l12470
  8824  0A0C  2A19               	goto	l12472
  8825  0A0D                     l12466:	
  8826  0A0D  3003               	movlw	3
  8827  0A0E  00DA               	movwf	Heat_Time_Select@offtm
  8828  0A0F  3011               	movlw	17
  8829  0A10  2B4B               	ljmp	_Heat_Time_Select
  8830  0A11                     l12468:	
  8831  0A11  3006               	movlw	6
  8832  0A12  00DA               	movwf	Heat_Time_Select@offtm
  8833  0A13  300E               	movlw	14
  8834  0A14  2B4B               	ljmp	_Heat_Time_Select
  8835  0A15                     l12470:	
  8836  0A15  3008               	movlw	8
  8837  0A16  00DA               	movwf	Heat_Time_Select@offtm
  8838  0A17  300C               	movlw	12
  8839  0A18  2B4B               	ljmp	_Heat_Time_Select
  8840  0A19                     l12472:	
  8841  0A19  3006               	movlw	6
  8842  0A1A  00DA               	movwf	Heat_Time_Select@offtm
  8843  0A1B  300E               	movlw	14
  8844  0A1C  2B4B               	ljmp	_Heat_Time_Select
  8845  0A1D                     l12478:	
  8846                           
  8847                           ;cook.c: 355: if(Ad_Bot <= 193)
  8848  0A1D  30C2               	movlw	194
  8849  0A1E  024F               	subwf	_Ad_Bot,w	;volatile
  8850  0A1F  1803               	skipnc
  8851  0A20  2A3A               	goto	l12496
  8852                           
  8853                           ;cook.c: 356: {
  8854                           ;cook.c: 357: ShortTimeOn();
  8855  0A21  2363  120A  158A   	fcall	_ShortTimeOn
  8856                           
  8857                           ;cook.c: 358: BotHeatOff();
  8858  0A24  2367               	fcall	_BotHeatOff
  8859                           
  8860                           ;cook.c: 359: WorkStep = 3;
  8861  0A25  3003               	movlw	3
  8862  0A26  00C2               	movwf	_WorkStep	;volatile
  8863                           
  8864                           ;cook.c: 360: break;
  8865  0A27  0008               	return
  8866  0A28                     l12484:	
  8867  0A28  3004               	movlw	4
  8868  0A29  00DA               	movwf	Heat_Time_Select@offtm
  8869  0A2A  3010               	movlw	16
  8870  0A2B  2B4B               	ljmp	_Heat_Time_Select
  8871  0A2C                     l12486:	
  8872  0A2C  3008               	movlw	8
  8873  0A2D  00DA               	movwf	Heat_Time_Select@offtm
  8874  0A2E  300C               	movlw	12
  8875  0A2F  2B4B               	ljmp	_Heat_Time_Select
  8876  0A30                     l12488:	
  8877  0A30  300A               	movlw	10
  8878  0A31  00DA               	movwf	Heat_Time_Select@offtm
  8879  0A32  2B4B               	ljmp	_Heat_Time_Select
  8880  0A33                     l12490:	
  8881  0A33  300C               	movlw	12
  8882  0A34  00DA               	movwf	Heat_Time_Select@offtm
  8883  0A35  3008               	movlw	8
  8884  0A36  2B4B               	ljmp	_Heat_Time_Select
  8885  0A37                     l12492:	
  8886  0A37  300A               	movlw	10
  8887  0A38  00DA               	movwf	Heat_Time_Select@offtm
  8888  0A39  2B4B               	ljmp	_Heat_Time_Select
  8889  0A3A                     l12496:	
  8890  0A3A  0869               	movf	_Vrms_Level,w	;volatile
  8891                           
  8892                           ; Switch size 1, requested type "space"
  8893                           ; Number of cases is 4, Range of values is 1 to 4
  8894                           ; switch strategies available:
  8895                           ; Name         Instructions Cycles
  8896                           ; simple_byte           13     7 (average)
  8897                           ; direct_byte           23    11 (fixed)
  8898                           ; jumptable            263     9 (fixed)
  8899                           ;	Chosen strategy is simple_byte
  8900  0A3B  3A01               	xorlw	1	; case 1
  8901  0A3C  1903               	skipnz
  8902  0A3D  2A28               	goto	l12484
  8903  0A3E  3A03               	xorlw	3	; case 2
  8904  0A3F  1903               	skipnz
  8905  0A40  2A2C               	goto	l12486
  8906  0A41  3A01               	xorlw	1	; case 3
  8907  0A42  1903               	skipnz
  8908  0A43  2A30               	goto	l12488
  8909  0A44  3A07               	xorlw	7	; case 4
  8910  0A45  1903               	skipnz
  8911  0A46  2A33               	goto	l12490
  8912  0A47  2A37               	goto	l12492
  8913  0A48                     l12498:	
  8914                           
  8915                           ;cook.c: 375: if(ChooseFun == 3 || ChooseFun == 4 || ChooseFun == 9)
  8916  0A48  3003               	movlw	3
  8917  0A49  063C               	xorwf	_ChooseFun,w	;volatile
  8918  0A4A  1903               	btfsc	3,2
  8919  0A4B  2A54               	goto	l12504
  8920  0A4C  3004               	movlw	4
  8921  0A4D  063C               	xorwf	_ChooseFun,w	;volatile
  8922  0A4E  3009               	movlw	9
  8923  0A4F  1903               	btfsc	3,2
  8924  0A50  2A55               	goto	L74
  8925  0A51  063C               	xorwf	_ChooseFun,w	;volatile
  8926  0A52  1D03               	btfss	3,2
  8927  0A53  2A58               	goto	l1951
  8928  0A54                     l12504:	
  8929                           
  8930                           ;cook.c: 376: {
  8931                           ;cook.c: 377: if(CountDownTime <= 8)
  8932  0A54  3009               	movlw	9
  8933  0A55                     L74:	
  8934  0A55  0240               	subwf	_CountDownTime,w	;volatile
  8935  0A56  1C03               	btfss	3,0
  8936  0A57  29E7               	goto	l12442
  8937  0A58                     l1951:	
  8938                           
  8939                           ;cook.c: 381: }
  8940                           ;cook.c: 382: }
  8941                           ;cook.c: 384: if(b_PressureOn == 1 || Ad_Bot >= 183)
  8942  0A58  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  8943  0A59  29E7               	goto	l12442
  8944  0A5A  30B7               	movlw	183
  8945  0A5B  024F               	subwf	_Ad_Bot,w	;volatile
  8946  0A5C  1803               	btfsc	3,0
  8947  0A5D  29E7               	goto	l12442
  8948                           
  8949                           ;cook.c: 388: else if(Ad_Bot <= 179)
  8950  0A5E  30B4               	movlw	180
  8951  0A5F  024F               	subwf	_Ad_Bot,w	;volatile
  8952  0A60  1803               	skipnc
  8953  0A61  0008               	return
  8954  0A62  29E2               	goto	l12434
  8955  0A63                     l12520:	
  8956  0A63  0842               	movf	_WorkStep,w	;volatile
  8957                           
  8958                           ; Switch size 1, requested type "space"
  8959                           ; Number of cases is 6, Range of values is 0 to 5
  8960                           ; switch strategies available:
  8961                           ; Name         Instructions Cycles
  8962                           ; simple_byte           19    10 (average)
  8963                           ; direct_byte           26     8 (fixed)
  8964                           ; jumptable            260     6 (fixed)
  8965                           ;	Chosen strategy is simple_byte
  8966  0A64  3A00               	xorlw	0	; case 0
  8967  0A65  1903               	skipnz
  8968  0A66  29D8               	goto	l12428
  8969  0A67  3A01               	xorlw	1	; case 1
  8970  0A68  1903               	skipnz
  8971  0A69  29E3               	goto	l12436
  8972  0A6A  3A03               	xorlw	3	; case 2
  8973  0A6B  1903               	skipnz
  8974  0A6C  29E8               	goto	l12444
  8975  0A6D  3A01               	xorlw	1	; case 3
  8976  0A6E  1903               	skipnz
  8977  0A6F  29F3               	goto	l12452
  8978  0A70  3A07               	xorlw	7	; case 4
  8979  0A71  1903               	skipnz
  8980  0A72  2A1D               	goto	l12478
  8981  0A73  3A01               	xorlw	1	; case 5
  8982  0A74  1903               	skipnz
  8983  0A75  2A48               	goto	l12498
  8984  0A76  29E7               	goto	l12442
  8985  0A77  0008               	return
  8986  0A78                     __end_of_PressureHeat:	
  8987  0A78                     __ptext53:	
  8988 ;; *************** function _RiceHeat *****************
  8989 ;; Defined at:
  8990 ;;		line 139 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;		None
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;		None
  8995 ;; Return value:  Size  Location     Type
  8996 ;;                  1    wreg      void 
  8997 ;; Registers used:
  8998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8999 ;; Tracked objects:
  9000 ;;		On entry : 300/0
  9001 ;;		On exit  : 300/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9004 ;;      Params:         0       0       0       0       0
  9005 ;;      Locals:         0       0       0       0       0
  9006 ;;      Temps:          0       0       0       0       0
  9007 ;;      Totals:         0       0       0       0       0
  9008 ;;Total ram usage:        0 bytes
  9009 ;; Hardware stack levels used:    1
  9010 ;; Hardware stack levels required when called:    3
  9011 ;; This function calls:
  9012 ;;		_BotHeatOff
  9013 ;;		_BotHeatOn
  9014 ;;		_Heat_Time_Select
  9015 ;;		_ShortTimeOn
  9016 ;; This function is called by:
  9017 ;;		_Cook_Task
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021                           
  9022                           ;psect for function _RiceHeat
  9023  0A78                     _RiceHeat:	
  9024  0A78                     l12290:	
  9025                           ;incstack = 0
  9026                           ; Regs used in _RiceHeat: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9027                           
  9028                           
  9029                           ;cook.c: 142: if((b_PressureOn == 1 || Ad_Bot >= 213) && WorkStage != 3)
  9030  0A78  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  9031  0A79  2A7E               	goto	l12294
  9032  0A7A  30D5               	movlw	213
  9033  0A7B  024F               	subwf	_Ad_Bot,w	;volatile
  9034  0A7C  1C03               	skipc
  9035  0A7D  2A8C               	goto	l12408
  9036  0A7E                     l12294:	
  9037  0A7E  3003               	movlw	3
  9038  0A7F  063F               	xorwf	_WorkStage,w	;volatile
  9039  0A80  1903               	btfsc	3,2
  9040  0A81  2A8C               	goto	l12408
  9041                           
  9042                           ;cook.c: 143: {
  9043                           ;cook.c: 144: WorkStage = 3;
  9044  0A82  3003               	movlw	3
  9045  0A83  00BF               	movwf	_WorkStage	;volatile
  9046                           
  9047                           ;cook.c: 145: WorkStep = 5;
  9048  0A84  3005               	movlw	5
  9049  0A85  00C2               	movwf	_WorkStep	;volatile
  9050                           
  9051                           ;cook.c: 146: ShortTimeOn();
  9052  0A86  2363  120A  158A   	fcall	_ShortTimeOn
  9053                           
  9054                           ;cook.c: 148: TotalTimeSave = WorkTimeM + CountDownTime;
  9055  0A89  0840               	movf	_CountDownTime,w	;volatile
  9056  0A8A  073D               	addwf	_WorkTimeM,w	;volatile
  9057  0A8B  00BE               	movwf	_TotalTimeSave	;volatile
  9058  0A8C                     l12408:	
  9059  0A8C  0842               	movf	_WorkStep,w	;volatile
  9060                           
  9061                           ; Switch size 1, requested type "space"
  9062                           ; Number of cases is 6, Range of values is 0 to 5
  9063                           ; switch strategies available:
  9064                           ; Name         Instructions Cycles
  9065                           ; simple_byte           19    10 (average)
  9066                           ; direct_byte           26     8 (fixed)
  9067                           ; jumptable            260     6 (fixed)
  9068                           ;	Chosen strategy is simple_byte
  9069  0A8D  3A00               	xorlw	0	; case 0
  9070  0A8E  1903               	skipnz
  9071  0A8F  2AA1               	goto	l12302
  9072  0A90  3A01               	xorlw	1	; case 1
  9073  0A91  1903               	skipnz
  9074  0A92  2AB6               	goto	l12314
  9075  0A93  3A03               	xorlw	3	; case 2
  9076  0A94  1903               	skipnz
  9077  0A95  2ABB               	goto	l12322
  9078  0A96  3A01               	xorlw	1	; case 3
  9079  0A97  1903               	skipnz
  9080  0A98  2AC6               	goto	l12330
  9081  0A99  3A07               	xorlw	7	; case 4
  9082  0A9A  1903               	skipnz
  9083  0A9B  2AF0               	goto	l12356
  9084  0A9C  3A01               	xorlw	1	; case 5
  9085  0A9D  1903               	skipnz
  9086  0A9E  2B1B               	goto	l12376
  9087  0A9F  2ABA               	goto	l12320
  9088  0AA0  0008               	return
  9089  0AA1                     l12302:	
  9090                           
  9091                           ;cook.c: 155: if(Ad_Bot >= 145)
  9092  0AA1  3091               	movlw	145
  9093  0AA2  024F               	subwf	_Ad_Bot,w	;volatile
  9094  0AA3  1C03               	skipc
  9095  0AA4  2AB5               	goto	l12312
  9096                           
  9097                           ;cook.c: 156: {
  9098                           ;cook.c: 158: if(AC_Vol_Rms >= 205)
  9099  0AA5  3000               	movlw	0
  9100  0AA6  0268               	subwf	_AC_Vol_Rms+1,w	;volatile
  9101  0AA7  30CD               	movlw	205
  9102  0AA8  1903               	skipnz
  9103  0AA9  0267               	subwf	_AC_Vol_Rms,w	;volatile
  9104  0AAA  1C03               	skipc
  9105  0AAB  2AB2               	goto	l12310
  9106                           
  9107                           ;cook.c: 159: {
  9108                           ;cook.c: 160: BotHeatOff();
  9109  0AAC  2367  120A  158A   	fcall	_BotHeatOff
  9110  0AAF                     l12316:	
  9111                           ;cook.c: 161: ShortTimeOn();
  9112                           
  9113                           
  9114                           ;cook.c: 175: {
  9115                           ;cook.c: 176: ShortTimeOn();
  9116  0AAF  2363               	fcall	_ShortTimeOn
  9117  0AB0                     l12308:	
  9118                           
  9119                           ;cook.c: 162: WorkStep++;
  9120  0AB0  0AC2               	incf	_WorkStep,f	;volatile
  9121                           
  9122                           ;cook.c: 163: }
  9123  0AB1  0008               	return
  9124  0AB2                     l12310:	
  9125                           
  9126                           ;cook.c: 164: else
  9127                           ;cook.c: 165: {
  9128                           ;cook.c: 166: WorkStep = 2;
  9129  0AB2  3002               	movlw	2
  9130  0AB3  00C2               	movwf	_WorkStep	;volatile
  9131  0AB4  0008               	return
  9132  0AB5                     l12312:	
  9133                           
  9134                           ;cook.c: 169: }
  9135                           ;cook.c: 170: BotHeatOn();
  9136  0AB5  2B6C               	ljmp	l12066
  9137  0AB6                     l12314:	
  9138                           ;cook.c: 171: break;
  9139                           
  9140                           
  9141                           ;cook.c: 174: if(ShortCntM >= 2)
  9142  0AB6  3002               	movlw	2
  9143  0AB7  0243               	subwf	_ShortCntM,w	;volatile
  9144  0AB8  1803               	btfsc	3,0
  9145  0AB9  2AAF               	goto	l12316
  9146  0ABA                     l12320:	
  9147                           
  9148                           ;cook.c: 179: }
  9149                           ;cook.c: 180: BotHeatOff();
  9150  0ABA  2B67               	ljmp	l12070
  9151  0ABB                     l12322:	
  9152                           ;cook.c: 181: break;
  9153                           
  9154                           
  9155                           ;cook.c: 183: if(Ad_Bot >= 197)
  9156  0ABB  30C5               	movlw	197
  9157  0ABC  024F               	subwf	_Ad_Bot,w	;volatile
  9158  0ABD  1C03               	skipc
  9159  0ABE  2AB5               	goto	l12312
  9160  0ABF                     l12324:	
  9161                           
  9162                           ;cook.c: 184: {
  9163                           ;cook.c: 185: ShortTimeOn();
  9164  0ABF  2363  120A  158A   	fcall	_ShortTimeOn
  9165                           
  9166                           ;cook.c: 186: BotHeatOff();
  9167  0AC2  2367  120A  158A   	fcall	_BotHeatOff
  9168  0AC5  2AB0               	goto	l12308
  9169  0AC6                     l12330:	
  9170                           
  9171                           ;cook.c: 193: if(Ad_Bot <= 192)
  9172  0AC6  30C1               	movlw	193
  9173  0AC7  024F               	subwf	_Ad_Bot,w	;volatile
  9174  0AC8  1803               	skipnc
  9175  0AC9  2ACE               	goto	l12336
  9176                           
  9177                           ;cook.c: 194: {
  9178                           ;cook.c: 195: ShortTimeOn();
  9179  0ACA  2363  120A  158A   	fcall	_ShortTimeOn
  9180  0ACD  2AB2               	goto	l12310
  9181  0ACE                     l12336:	
  9182                           
  9183                           ;cook.c: 198: }
  9184                           ;cook.c: 199: if(Ad_Bot >= 204)
  9185  0ACE  30CC               	movlw	204
  9186  0ACF  024F               	subwf	_Ad_Bot,w	;volatile
  9187  0AD0  1803               	btfsc	3,0
  9188  0AD1  2ABF               	goto	l12324
  9189  0AD2  0869               	movf	_Vrms_Level,w	;volatile
  9190                           
  9191                           ; Switch size 1, requested type "space"
  9192                           ; Number of cases is 4, Range of values is 1 to 4
  9193                           ; switch strategies available:
  9194                           ; Name         Instructions Cycles
  9195                           ; simple_byte           13     7 (average)
  9196                           ; direct_byte           23    11 (fixed)
  9197                           ; jumptable            263     9 (fixed)
  9198                           ;	Chosen strategy is simple_byte
  9199  0AD3  3A01               	xorlw	1	; case 1
  9200  0AD4  1903               	skipnz
  9201  0AD5  2AB5               	goto	l12312
  9202  0AD6  3A03               	xorlw	3	; case 2
  9203  0AD7  1903               	skipnz
  9204  0AD8  2AE0               	goto	l12344
  9205  0AD9  3A01               	xorlw	1	; case 3
  9206  0ADA  1903               	skipnz
  9207  0ADB  2AE4               	goto	l12346
  9208  0ADC  3A07               	xorlw	7	; case 4
  9209  0ADD  1903               	skipnz
  9210  0ADE  2AE8               	goto	l12348
  9211  0ADF  2AEC               	goto	l12350
  9212  0AE0                     l12344:	
  9213  0AE0  3003               	movlw	3
  9214  0AE1  00DA               	movwf	Heat_Time_Select@offtm
  9215  0AE2  3011               	movlw	17
  9216  0AE3  2B4B               	ljmp	_Heat_Time_Select
  9217  0AE4                     l12346:	
  9218  0AE4  3006               	movlw	6
  9219  0AE5  00DA               	movwf	Heat_Time_Select@offtm
  9220  0AE6  300E               	movlw	14
  9221  0AE7  2B4B               	ljmp	_Heat_Time_Select
  9222  0AE8                     l12348:	
  9223  0AE8  3008               	movlw	8
  9224  0AE9  00DA               	movwf	Heat_Time_Select@offtm
  9225  0AEA  300C               	movlw	12
  9226  0AEB  2B4B               	ljmp	_Heat_Time_Select
  9227  0AEC                     l12350:	
  9228  0AEC  3006               	movlw	6
  9229  0AED  00DA               	movwf	Heat_Time_Select@offtm
  9230  0AEE  300E               	movlw	14
  9231  0AEF  2B4B               	ljmp	_Heat_Time_Select
  9232  0AF0                     l12356:	
  9233                           
  9234                           ;cook.c: 218: if(Ad_Bot <= 200)
  9235  0AF0  30C9               	movlw	201
  9236  0AF1  024F               	subwf	_Ad_Bot,w	;volatile
  9237  0AF2  1803               	skipnc
  9238  0AF3  2B0D               	goto	l12374
  9239                           
  9240                           ;cook.c: 219: {
  9241                           ;cook.c: 220: ShortTimeOn();
  9242  0AF4  2363  120A  158A   	fcall	_ShortTimeOn
  9243                           
  9244                           ;cook.c: 221: BotHeatOff();
  9245  0AF7  2367               	fcall	_BotHeatOff
  9246                           
  9247                           ;cook.c: 222: WorkStep = 3;
  9248  0AF8  3003               	movlw	3
  9249  0AF9  00C2               	movwf	_WorkStep	;volatile
  9250                           
  9251                           ;cook.c: 223: break;
  9252  0AFA  0008               	return
  9253  0AFB                     l12362:	
  9254  0AFB  3004               	movlw	4
  9255  0AFC  00DA               	movwf	Heat_Time_Select@offtm
  9256  0AFD  3010               	movlw	16
  9257  0AFE  2B4B               	ljmp	_Heat_Time_Select
  9258  0AFF                     l12364:	
  9259  0AFF  3008               	movlw	8
  9260  0B00  00DA               	movwf	Heat_Time_Select@offtm
  9261  0B01  300C               	movlw	12
  9262  0B02  2B4B               	ljmp	_Heat_Time_Select
  9263  0B03                     l12366:	
  9264  0B03  300A               	movlw	10
  9265  0B04  00DA               	movwf	Heat_Time_Select@offtm
  9266  0B05  2B4B               	ljmp	_Heat_Time_Select
  9267  0B06                     l12368:	
  9268  0B06  300C               	movlw	12
  9269  0B07  00DA               	movwf	Heat_Time_Select@offtm
  9270  0B08  3008               	movlw	8
  9271  0B09  2B4B               	ljmp	_Heat_Time_Select
  9272  0B0A                     l12370:	
  9273  0B0A  300A               	movlw	10
  9274  0B0B  00DA               	movwf	Heat_Time_Select@offtm
  9275  0B0C  2B4B               	ljmp	_Heat_Time_Select
  9276  0B0D                     l12374:	
  9277  0B0D  0869               	movf	_Vrms_Level,w	;volatile
  9278                           
  9279                           ; Switch size 1, requested type "space"
  9280                           ; Number of cases is 4, Range of values is 1 to 4
  9281                           ; switch strategies available:
  9282                           ; Name         Instructions Cycles
  9283                           ; simple_byte           13     7 (average)
  9284                           ; direct_byte           23    11 (fixed)
  9285                           ; jumptable            263     9 (fixed)
  9286                           ;	Chosen strategy is simple_byte
  9287  0B0E  3A01               	xorlw	1	; case 1
  9288  0B0F  1903               	skipnz
  9289  0B10  2AFB               	goto	l12362
  9290  0B11  3A03               	xorlw	3	; case 2
  9291  0B12  1903               	skipnz
  9292  0B13  2AFF               	goto	l12364
  9293  0B14  3A01               	xorlw	1	; case 3
  9294  0B15  1903               	skipnz
  9295  0B16  2B03               	goto	l12366
  9296  0B17  3A07               	xorlw	7	; case 4
  9297  0B18  1903               	skipnz
  9298  0B19  2B06               	goto	l12368
  9299  0B1A  2B0A               	goto	l12370
  9300  0B1B                     l12376:	
  9301                           
  9302                           ;cook.c: 238: if(ChooseFun == 1)
  9303  0B1B  0B3C               	decfsz	_ChooseFun,w	;volatile
  9304  0B1C  2B21               	goto	l1902
  9305                           
  9306                           ;cook.c: 239: {
  9307                           ;cook.c: 240: if(CountDownTime <= 5)
  9308  0B1D  3006               	movlw	6
  9309  0B1E  0240               	subwf	_CountDownTime,w	;volatile
  9310  0B1F  1C03               	btfss	3,0
  9311  0B20  2ABA               	goto	l12320
  9312  0B21                     l1902:	
  9313                           
  9314                           ;cook.c: 244: }
  9315                           ;cook.c: 245: }
  9316                           ;cook.c: 248: if(b_PressureOn == 1 || Ad_Bot >= 179)
  9317  0B21  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
  9318  0B22  2ABA               	goto	l12320
  9319  0B23  30B3               	movlw	179
  9320  0B24  024F               	subwf	_Ad_Bot,w	;volatile
  9321  0B25  1803               	btfsc	3,0
  9322  0B26  2ABA               	goto	l12320
  9323                           
  9324                           ;cook.c: 252: else if(Ad_Bot <= 174)
  9325  0B27  30AF               	movlw	175
  9326  0B28  024F               	subwf	_Ad_Bot,w	;volatile
  9327  0B29  1803               	skipnc
  9328  0B2A  0008               	return
  9329  0B2B  0869               	movf	_Vrms_Level,w	;volatile
  9330                           
  9331                           ; Switch size 1, requested type "space"
  9332                           ; Number of cases is 4, Range of values is 1 to 4
  9333                           ; switch strategies available:
  9334                           ; Name         Instructions Cycles
  9335                           ; simple_byte           13     7 (average)
  9336                           ; direct_byte           23    11 (fixed)
  9337                           ; jumptable            263     9 (fixed)
  9338                           ;	Chosen strategy is simple_byte
  9339  0B2C  3A01               	xorlw	1	; case 1
  9340  0B2D  1903               	skipnz
  9341  0B2E  2B39               	goto	l12390
  9342  0B2F  3A03               	xorlw	3	; case 2
  9343  0B30  1903               	skipnz
  9344  0B31  2B3D               	goto	l12392
  9345  0B32  3A01               	xorlw	1	; case 3
  9346  0B33  1903               	skipnz
  9347  0B34  2B41               	goto	l12394
  9348  0B35  3A07               	xorlw	7	; case 4
  9349  0B36  1903               	skipnz
  9350  0B37  2B44               	goto	l12396
  9351  0B38  2B48               	goto	l12398
  9352  0B39                     l12390:	
  9353  0B39  3004               	movlw	4
  9354  0B3A  00DA               	movwf	Heat_Time_Select@offtm
  9355  0B3B  3010               	movlw	16
  9356  0B3C  2B4B               	ljmp	_Heat_Time_Select
  9357  0B3D                     l12392:	
  9358  0B3D  3008               	movlw	8
  9359  0B3E  00DA               	movwf	Heat_Time_Select@offtm
  9360  0B3F  300C               	movlw	12
  9361  0B40  2B4B               	ljmp	_Heat_Time_Select
  9362  0B41                     l12394:	
  9363  0B41  300A               	movlw	10
  9364  0B42  00DA               	movwf	Heat_Time_Select@offtm
  9365  0B43  2B4B               	ljmp	_Heat_Time_Select
  9366  0B44                     l12396:	
  9367  0B44  300C               	movlw	12
  9368  0B45  00DA               	movwf	Heat_Time_Select@offtm
  9369  0B46  3008               	movlw	8
  9370  0B47  2B4B               	ljmp	_Heat_Time_Select
  9371  0B48                     l12398:	
  9372  0B48  300A               	movlw	10
  9373  0B49  00DA               	movwf	Heat_Time_Select@offtm
  9374  0B4A  2B4B               	ljmp	_Heat_Time_Select
  9375  0B4B                     __end_of_RiceHeat:	
  9376  0B4B                     __ptext62:	
  9377 ;; *************** function _Heat_Time_Select *****************
  9378 ;; Defined at:
  9379 ;;		line 11 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  ontm            1    wreg     unsigned char 
  9382 ;;  offtm           1    0[BANK0 ] unsigned char 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  ontm            1    1[BANK0 ] unsigned char 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0
  9389 ;; Tracked objects:
  9390 ;;		On entry : 300/0
  9391 ;;		On exit  : 300/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9394 ;;      Params:         0       1       0       0       0
  9395 ;;      Locals:         0       1       0       0       0
  9396 ;;      Temps:          0       0       0       0       0
  9397 ;;      Totals:         0       2       0       0       0
  9398 ;;Total ram usage:        2 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    2
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_RiceHeat
  9405 ;;		_PressureHeat
  9406 ;;		_OpenCook
  9407 ;;		_CakeHeat
  9408 ;;		_ReheatCook
  9409 ;;		_KeepWarmHeat
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           
  9414                           ;psect for function _Heat_Time_Select
  9415  0B4B                     _Heat_Time_Select:	
  9416                           
  9417                           ;incstack = 0
  9418                           ; Regs used in _Heat_Time_Select: [wreg+status,2+status,0]
  9419                           ;Heat_Time_Select@ontm stored from wreg
  9420  0B4B  00DB               	movwf	Heat_Time_Select@ontm
  9421                           
  9422                           ;cook.c: 14: if(ontm > 63)
  9423  0B4C  3040               	movlw	64
  9424  0B4D  025B               	subwf	Heat_Time_Select@ontm,w
  9425  0B4E  1C03               	skipc
  9426  0B4F  2B52               	goto	l1840
  9427                           
  9428                           ;cook.c: 15: {
  9429                           ;cook.c: 16: ontm = 63;
  9430  0B50  303F               	movlw	63
  9431  0B51  00DB               	movwf	Heat_Time_Select@ontm
  9432  0B52                     l1840:	
  9433                           
  9434                           ;cook.c: 17: }
  9435                           ;cook.c: 19: if(offtm > 63)
  9436  0B52  3040               	movlw	64
  9437  0B53  025A               	subwf	Heat_Time_Select@offtm,w
  9438  0B54  1C03               	skipc
  9439  0B55  2B59               	goto	L75
  9440                           
  9441                           ;cook.c: 20: {
  9442                           ;cook.c: 21: offtm = 63;
  9443  0B56  303F               	movlw	63
  9444  0B57  00DA               	movwf	Heat_Time_Select@offtm
  9445                           
  9446                           ;cook.c: 22: }
  9447                           ;cook.c: 25: RelOnCnt = ontm*2;
  9448  0B58  1003               	clrc
  9449  0B59                     L75:	
  9450  0B59  0D5B               	rlf	Heat_Time_Select@ontm,w
  9451  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  9452  0B5B  00CE               	movwf	_RelOnCnt^(0+128)	;volatile
  9453                           
  9454                           ;cook.c: 26: RelOffCnt = offtm*2;
  9455  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  9456  0B5D  1003               	clrc
  9457  0B5E  0D5A               	rlf	Heat_Time_Select@offtm,w
  9458  0B5F  00C6               	movwf	_RelOffCnt	;volatile
  9459                           
  9460                           ;cook.c: 28: b_BotHeatEn = 1;
  9461  0B60  1771               	bsf	_b_BotHeatEn/(0+8),_b_BotHeatEn& (0+7)	;volatile
  9462                           
  9463                           ;cook.c: 29: b_BotHeatOn = 0;
  9464  0B61  12F1               	bcf	_b_BotHeatOn/(0+8),_b_BotHeatOn& (0+7)	;volatile
  9465  0B62  0008               	return
  9466  0B63                     __end_of_Heat_Time_Select:	
  9467  0B63                     __ptext61:	
  9468 ;; *************** function _ShortTimeOn *****************
  9469 ;; Defined at:
  9470 ;;		line 64 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		status,2
  9479 ;; Tracked objects:
  9480 ;;		On entry : 300/0
  9481 ;;		On exit  : 300/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9484 ;;      Params:         0       0       0       0       0
  9485 ;;      Locals:         0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0
  9487 ;;      Totals:         0       0       0       0       0
  9488 ;;Total ram usage:        0 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    2
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_FactoryTest
  9495 ;;		_RiceHeat
  9496 ;;		_PressureHeat
  9497 ;;		_OpenCook
  9498 ;;		_CakeHeat
  9499 ;;		_ReheatCook
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _ShortTimeOn
  9505  0B63                     _ShortTimeOn:	
  9506                           
  9507                           ;cook.c: 66: b_ShortOn = 1;
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _ShortTimeOn: [status,2]
  9511  0B63  1671               	bsf	_b_ShortOn/(0+8),_b_ShortOn& (0+7)	;volatile
  9512                           
  9513                           ;cook.c: 67: ShortCntL = 0;
  9514  0B64  01C4               	clrf	_ShortCntL	;volatile
  9515                           
  9516                           ;cook.c: 68: ShortCntM = 0;
  9517  0B65  01C3               	clrf	_ShortCntM	;volatile
  9518  0B66  0008               	return
  9519  0B67                     __end_of_ShortTimeOn:	
  9520  0B67                     __ptext64:	
  9521 ;; *************** function _BotHeatOff *****************
  9522 ;; Defined at:
  9523 ;;		line 51 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;		None
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;		None
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  1    wreg      void 
  9530 ;; Registers used:
  9531 ;;		status,2
  9532 ;; Tracked objects:
  9533 ;;		On entry : 200/0
  9534 ;;		On exit  : 300/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9537 ;;      Params:         0       0       0       0       0
  9538 ;;      Locals:         0       0       0       0       0
  9539 ;;      Temps:          0       0       0       0       0
  9540 ;;      Totals:         0       0       0       0       0
  9541 ;;Total ram usage:        0 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    2
  9544 ;; This function calls:
  9545 ;;		Nothing
  9546 ;; This function is called by:
  9547 ;;		_FactoryTest
  9548 ;;		_RiceHeat
  9549 ;;		_PressureHeat
  9550 ;;		_OpenCook
  9551 ;;		_CakeHeat
  9552 ;;		_ReheatCook
  9553 ;;		_KeepWarmHeat
  9554 ;;		_Cook_Task
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _BotHeatOff
  9560  0B67                     _BotHeatOff:	
  9561  0B67                     l12070:	
  9562                           ;incstack = 0
  9563                           ; Regs used in _BotHeatOff: [status,2]
  9564                           
  9565                           
  9566                           ;cook.c: 53: b_BotHeatEn = 0;
  9567  0B67  1371               	bcf	_b_BotHeatEn/(0+8),_b_BotHeatEn& (0+7)	;volatile
  9568                           
  9569                           ;cook.c: 54: b_BotHeatOn = 0;
  9570  0B68  12F1               	bcf	_b_BotHeatOn/(0+8),_b_BotHeatOn& (0+7)	;volatile
  9571                           
  9572                           ;cook.c: 55: HeatCnt500ms = 0;
  9573  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  9574  0B6A  01C5               	clrf	_HeatCnt500ms	;volatile
  9575  0B6B  0008               	return
  9576  0B6C                     __end_of_BotHeatOff:	
  9577  0B6C                     __ptext63:	
  9578 ;; *************** function _BotHeatOn *****************
  9579 ;; Defined at:
  9580 ;;		line 38 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		status,2
  9589 ;; Tracked objects:
  9590 ;;		On entry : 300/0
  9591 ;;		On exit  : 300/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9594 ;;      Params:         0       0       0       0       0
  9595 ;;      Locals:         0       0       0       0       0
  9596 ;;      Temps:          0       0       0       0       0
  9597 ;;      Totals:         0       0       0       0       0
  9598 ;;Total ram usage:        0 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    2
  9601 ;; This function calls:
  9602 ;;		Nothing
  9603 ;; This function is called by:
  9604 ;;		_FactoryTest
  9605 ;;		_RiceHeat
  9606 ;;		_PressureHeat
  9607 ;;		_OpenCook
  9608 ;;		_CakeHeat
  9609 ;;		_ReheatCook
  9610 ;;		_KeepWarmHeat
  9611 ;;		_Cook_Task
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _BotHeatOn
  9617  0B6C                     _BotHeatOn:	
  9618  0B6C                     l12066:	
  9619                           ;incstack = 0
  9620                           ; Regs used in _BotHeatOn: [status,2]
  9621                           
  9622                           
  9623                           ;cook.c: 40: b_BotHeatEn = 0;
  9624  0B6C  1371               	bcf	_b_BotHeatEn/(0+8),_b_BotHeatEn& (0+7)	;volatile
  9625                           
  9626                           ;cook.c: 41: b_BotHeatOn = 1;
  9627  0B6D  16F1               	bsf	_b_BotHeatOn/(0+8),_b_BotHeatOn& (0+7)	;volatile
  9628                           
  9629                           ;cook.c: 42: HeatCnt500ms = 0;
  9630  0B6E  01C5               	clrf	_HeatCnt500ms	;volatile
  9631  0B6F  0008               	return
  9632  0B70                     __end_of_BotHeatOn:	
  9633  0B70                     __ptext1:	
  9634 ;; *************** function _Time_Deal *****************
  9635 ;; Defined at:
  9636 ;;		line 293 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;		None
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  1    wreg      void 
  9643 ;; Registers used:
  9644 ;;		wreg, status,2, status,0, pclath, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 300/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9650 ;;      Params:         0       0       0       0       0
  9651 ;;      Locals:         0       0       0       0       0
  9652 ;;      Temps:          0       0       0       0       0
  9653 ;;      Totals:         0       0       0       0       0
  9654 ;;Total ram usage:        0 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    4
  9657 ;; This function calls:
  9658 ;;		_AutoStartFun
  9659 ;;		_CountDownTimeStart
  9660 ;;		_ErrorTimeStart
  9661 ;;		_KeepWarmTimeStart
  9662 ;;		_PresetTimeStart
  9663 ;;		_Relay_Duty_Control
  9664 ;;		_ShortTime
  9665 ;;		_StandbyTimeStart
  9666 ;;		_WorkTimeStart
  9667 ;; This function is called by:
  9668 ;;		_main
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function _Time_Deal
  9674  0B70                     _Time_Deal:	
  9675                           
  9676                           ;time.c: 295: StandbyTimeStart();
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in _Time_Deal: [wreg+status,2+status,0+pclath+cstack]
  9680  0B70  2760  120A  158A   	fcall	_StandbyTimeStart
  9681                           
  9682                           ;time.c: 296: ErrorTimeStart();
  9683  0B73  26EB  120A  158A   	fcall	_ErrorTimeStart
  9684                           
  9685                           ;time.c: 297: Relay_Duty_Control();
  9686  0B76  2702  120A  158A   	fcall	_Relay_Duty_Control
  9687                           
  9688                           ;time.c: 298: AutoStartFun();
  9689  0B79  238C  120A  158A   	fcall	_AutoStartFun
  9690                           
  9691                           ;time.c: 300: if(ErrorCode != 0)
  9692  0B7C  0858               	movf	_ErrorCode,w	;volatile
  9693  0B7D  1D03               	btfss	3,2
  9694  0B7E  0008               	return
  9695                           
  9696                           ;time.c: 303: }
  9697                           ;time.c: 305: ShortTime();
  9698  0B7F  2750               	fcall	_ShortTime
  9699                           
  9700                           ;time.c: 306: PresetTimeStart();
  9701  0B80  160A  118A  208D  120A  158A  	fcall	_PresetTimeStart
  9702                           
  9703                           ;time.c: 307: CountDownTimeStart();
  9704  0B85  23BB               	fcall	_CountDownTimeStart
  9705                           
  9706                           ;time.c: 308: KeepWarmTimeStart();
  9707  0B86  120A  118A  25A4  120A  158A  	fcall	_KeepWarmTimeStart
  9708                           
  9709                           ;time.c: 309: WorkTimeStart();
  9710  0B8B  2FDB               	ljmp	l13742
  9711  0B8C                     __end_of_Time_Deal:	
  9712  0B8C                     __ptext10:	
  9713 ;; *************** function _AutoStartFun *****************
  9714 ;; Defined at:
  9715 ;;		line 247 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0
  9724 ;; Tracked objects:
  9725 ;;		On entry : 300/0
  9726 ;;		On exit  : 300/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9729 ;;      Params:         0       0       0       0       0
  9730 ;;      Locals:         0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0
  9732 ;;      Totals:         0       0       0       0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    2
  9736 ;; This function calls:
  9737 ;;		Nothing
  9738 ;; This function is called by:
  9739 ;;		_Time_Deal
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _AutoStartFun
  9745  0B8C                     _AutoStartFun:	
  9746                           
  9747                           ;time.c: 249: if(SysStatus == 2)
  9748                           
  9749                           ;incstack = 0
  9750                           ; Regs used in _AutoStartFun: [wreg+status,2+status,0]
  9751  0B8C  3002               	movlw	2
  9752  0B8D  066A               	xorwf	_SysStatus,w	;volatile
  9753  0B8E  1D03               	btfss	3,2
  9754  0B8F  0008               	return
  9755                           
  9756                           ;time.c: 250: {
  9757                           ;time.c: 251: if(KeyFlag == 0x00)
  9758  0B90  082D               	movf	_KeyFlag,w	;volatile
  9759  0B91  1D03               	btfss	3,2
  9760  0B92  2BB9               	goto	l13818
  9761                           
  9762                           ;time.c: 252: {
  9763                           ;time.c: 253: if(++StandbyTimeCnt >= 14)
  9764  0B93  300E               	movlw	14
  9765  0B94  0AD9               	incf	_StandbyTimeCnt,f	;volatile
  9766  0B95  0259               	subwf	_StandbyTimeCnt,w	;volatile
  9767  0B96  1C03               	skipc
  9768  0B97  0008               	return
  9769                           
  9770                           ;time.c: 254: {
  9771                           ;time.c: 255: StandbyTimeCnt = 0;
  9772  0B98  01D9               	clrf	_StandbyTimeCnt	;volatile
  9773                           
  9774                           ;time.c: 256: SysStatus = 3;
  9775  0B99  3003               	movlw	3
  9776  0B9A  00EA               	movwf	_SysStatus	;volatile
  9777                           
  9778                           ;time.c: 257: if(PresetTimeH == 0 && PresetTimeM == 0)
  9779  0B9B  0836               	movf	_PresetTimeH,w	;volatile
  9780  0B9C  1D03               	btfss	3,2
  9781  0B9D  2BA3               	goto	l13794
  9782  0B9E  0835               	movf	_PresetTimeM,w	;volatile
  9783  0B9F  1D03               	btfss	3,2
  9784  0BA0  2BA3               	goto	l13794
  9785                           
  9786                           ;time.c: 258: {
  9787                           ;time.c: 259: WorkStage = 2;
  9788  0BA1  3002               	movlw	2
  9789  0BA2  2BA4               	goto	L4
  9790  0BA3                     l13794:	
  9791                           ;time.c: 260: }
  9792                           
  9793                           
  9794                           ;time.c: 261: else
  9795                           ;time.c: 262: {
  9796                           ;time.c: 263: WorkStage = 1;
  9797  0BA3  3001               	movlw	1
  9798  0BA4                     L4:	
  9799  0BA4  00BF               	movwf	_WorkStage	;volatile
  9800                           
  9801                           ;time.c: 264: }
  9802                           ;time.c: 266: if(ChooseFun == 14)
  9803  0BA5  300E               	movlw	14
  9804  0BA6  063C               	xorwf	_ChooseFun,w	;volatile
  9805  0BA7  1D03               	btfss	3,2
  9806  0BA8  2BAB               	goto	l8634
  9807                           
  9808                           ;time.c: 267: {
  9809                           ;time.c: 268: WorkStage = 3;
  9810  0BA9  3003               	movlw	3
  9811  0BAA  00BF               	movwf	_WorkStage	;volatile
  9812  0BAB                     l8634:	
  9813                           
  9814                           ;time.c: 269: }
  9815                           ;time.c: 270: ChooseFunSave = ChooseFun;
  9816  0BAB  083C               	movf	_ChooseFun,w	;volatile
  9817  0BAC  00FB               	movwf	_ChooseFunSave	;volatile
  9818                           
  9819                           ;time.c: 271: CountDownTimeSave = CountDownTime;
  9820  0BAD  0840               	movf	_CountDownTime,w	;volatile
  9821  0BAE  00B3               	movwf	_CountDownTimeSave	;volatile
  9822                           
  9823                           ;time.c: 272: WorkStep = 0;
  9824  0BAF  01C2               	clrf	_WorkStep	;volatile
  9825                           
  9826                           ;time.c: 273: b_JudgeLidOk = 0;
  9827  0BB0  1170               	bcf	_b_JudgeLidOk/(0+8),_b_JudgeLidOk& (0+7)	;volatile
  9828                           
  9829                           ;time.c: 274: JudgeLidCnt = 0;
  9830  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  9831  0BB2  01C8               	clrf	_JudgeLidCnt^(0+128)	;volatile
  9832                           
  9833                           ;time.c: 275: JudgeLidMin = 0;
  9834  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  9835  0BB4  01AF               	clrf	_JudgeLidMin	;volatile
  9836                           
  9837                           ;time.c: 277: {{BuzCnt = 3; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
  9838  0BB5  3003               	movlw	3
  9839  0BB6  00D7               	movwf	_BuzCnt	;volatile
  9840  0BB7  3019               	movlw	25
  9841  0BB8  2F88               	ljmp	PL2	;call to abstracted procedure
  9842  0BB9                     l13818:	
  9843                           
  9844                           ;time.c: 280: else
  9845                           ;time.c: 281: {
  9846                           ;time.c: 282: StandbyTimeCnt=0;
  9847  0BB9  01D9               	clrf	_StandbyTimeCnt	;volatile
  9848  0BBA  0008               	return
  9849  0BBB                     __end_of_AutoStartFun:	
  9850  0BBB                     __ptext9:	
  9851 ;; *************** function _CountDownTimeStart *****************
  9852 ;; Defined at:
  9853 ;;		line 109 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;                  1    wreg      void 
  9860 ;; Registers used:
  9861 ;;		wreg, status,2, status,0, pclath, cstack
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 300/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9867 ;;      Params:         0       0       0       0       0
  9868 ;;      Locals:         0       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0
  9870 ;;      Totals:         0       0       0       0       0
  9871 ;;Total ram usage:        0 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    3
  9874 ;; This function calls:
  9875 ;;		_Cancel
  9876 ;; This function is called by:
  9877 ;;		_Time_Deal
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           
  9882                           ;psect for function _CountDownTimeStart
  9883  0BBB                     _CountDownTimeStart:	
  9884                           
  9885                           ;time.c: 111: if(SysStatus == 5 && FactoryTestData == 20)
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in _CountDownTimeStart: [wreg+status,2+status,0+pclath+cstack]
  9889  0BBB  3005               	movlw	5
  9890  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  9891  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  9892  0BBE  066A               	xorwf	_SysStatus,w	;volatile
  9893  0BBF  1D03               	btfss	3,2
  9894  0BC0  2BDE               	goto	l13652
  9895  0BC1  3014               	movlw	20
  9896  0BC2  0641               	xorwf	_FactoryTestData,w	;volatile
  9897  0BC3  1D03               	btfss	3,2
  9898  0BC4  2BDE               	goto	l13652
  9899                           
  9900                           ;time.c: 112: {
  9901                           ;time.c: 113: if((++CountTimeS) < 120) return;
  9902  0BC5  3078               	movlw	120
  9903  0BC6  0AAA               	incf	_CountTimeS,f	;volatile
  9904  0BC7  022A               	subwf	_CountTimeS,w	;volatile
  9905  0BC8  1C03               	btfss	3,0
  9906  0BC9  0008               	return
  9907                           
  9908                           ;time.c: 114: CountTimeS = 0;
  9909  0BCA  01AA               	clrf	_CountTimeS	;volatile
  9910                           
  9911                           ;time.c: 116: if(CountDownTime > 0)
  9912  0BCB  0840               	movf	_CountDownTime,w	;volatile
  9913  0BCC  1D03               	btfss	3,2
  9914                           
  9915                           ;time.c: 117: {
  9916                           ;time.c: 118: CountDownTime--;
  9917  0BCD  03C0               	decf	_CountDownTime,f	;volatile
  9918                           
  9919                           ;time.c: 119: }
  9920                           ;time.c: 121: if(CountDownTime == 0)
  9921  0BCE  0840               	movf	_CountDownTime,w	;volatile
  9922  0BCF  1D03               	btfss	3,2
  9923  0BD0  0008               	return
  9924                           
  9925                           ;time.c: 122: {
  9926                           ;time.c: 123: Cancel();
  9927  0BD1  2577  120A  158A   	fcall	_Cancel
  9928                           
  9929                           ;time.c: 124: {{BuzCnt = 5; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
  9930  0BD4  3005               	movlw	5
  9931  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  9932  0BD6  00D7               	movwf	_BuzCnt	;volatile
  9933  0BD7  3019               	movlw	25
  9934  0BD8  00D6               	movwf	_BuzUpTime	;volatile
  9935  0BD9  279A               	fcall	PL10	;call to abstracted procedure
  9936                           
  9937                           ;time.c: 125: ChooseFunSave = 0;
  9938  0BDA  01FB               	clrf	_ChooseFunSave	;volatile
  9939                           
  9940                           ;time.c: 126: SysStatus = 4;
  9941  0BDB  3004               	movlw	4
  9942  0BDC  00EA               	movwf	_SysStatus	;volatile
  9943  0BDD  0008               	return
  9944  0BDE                     l13652:	
  9945                           
  9946                           ;time.c: 129: }
  9947                           ;time.c: 131: if(SysStatus != 3)
  9948  0BDE  3003               	movlw	3
  9949  0BDF  066A               	xorwf	_SysStatus,w	;volatile
  9950  0BE0  1903               	btfsc	3,2
  9951  0BE1  2BE4               	goto	l13658
  9952                           
  9953                           ;time.c: 132: {
  9954                           ;time.c: 133: CountTimeS = 0;
  9955  0BE2  01AA               	clrf	_CountTimeS	;volatile
  9956  0BE3  0008               	return
  9957  0BE4                     l13658:	
  9958                           
  9959                           ;time.c: 135: }
  9960                           ;time.c: 137: if(SysStatus == 3 && WorkStage == 3)
  9961  0BE4  3003               	movlw	3
  9962  0BE5  066A               	xorwf	_SysStatus,w	;volatile
  9963  0BE6  1D03               	btfss	3,2
  9964  0BE7  0008               	return
  9965  0BE8  3003               	movlw	3
  9966  0BE9  063F               	xorwf	_WorkStage,w	;volatile
  9967  0BEA  1D03               	btfss	3,2
  9968  0BEB  0008               	return
  9969                           
  9970                           ;time.c: 138: {
  9971                           ;time.c: 139: if(WorkStage == 3)
  9972  0BEC  3003               	movlw	3
  9973  0BED  063F               	xorwf	_WorkStage,w	;volatile
  9974  0BEE  1D03               	btfss	3,2
  9975  0BEF  2BF9               	goto	l13676
  9976                           
  9977                           ;time.c: 140: {
  9978                           ;time.c: 141: CountTimeS++;
  9979  0BF0  0AAA               	incf	_CountTimeS,f	;volatile
  9980                           
  9981                           ;time.c: 142: if(CountTimeS < 120) return;
  9982  0BF1  3078               	movlw	120
  9983  0BF2  022A               	subwf	_CountTimeS,w	;volatile
  9984  0BF3  1C03               	btfss	3,0
  9985  0BF4  0008               	return
  9986                           
  9987                           ;time.c: 143: CountTimeS = 0;
  9988  0BF5  01AA               	clrf	_CountTimeS	;volatile
  9989                           
  9990                           ;time.c: 145: if(CountDownTime > 0)
  9991  0BF6  0840               	movf	_CountDownTime,w	;volatile
  9992  0BF7  1D03               	btfss	3,2
  9993                           
  9994                           ;time.c: 146: {
  9995                           ;time.c: 147: CountDownTime--;
  9996  0BF8  03C0               	decf	_CountDownTime,f	;volatile
  9997  0BF9                     l13676:	
  9998                           
  9999                           ;time.c: 148: }
 10000                           ;time.c: 149: }
 10001                           ;time.c: 151: if(CountDownTime == 0)
 10002  0BF9  0840               	movf	_CountDownTime,w	;volatile
 10003  0BFA  1D03               	btfss	3,2
 10004  0BFB  0008               	return
 10005                           
 10006                           ;time.c: 152: {
 10007                           ;time.c: 153: Cancel();
 10008  0BFC  2577  120A  158A   	fcall	_Cancel
 10009                           
 10010                           ;time.c: 154: SysStatus = 4;
 10011  0BFF  3004               	movlw	4
 10012  0C00  1283               	bcf	3,5	;RP0=0, select bank0
 10013  0C01  00EA               	movwf	_SysStatus	;volatile
 10014                           
 10015                           ;time.c: 155: b_AutoKeepWarm = 1;
 10016  0C02  1670               	bsf	_b_AutoKeepWarm/(0+8),_b_AutoKeepWarm& (0+7)	;volatile
 10017                           
 10018                           ;time.c: 156: {{BuzCnt = 5; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime
      +                          ; BuzDownTemp = BuzDownTime;};};
 10019  0C03  3005               	movlw	5
 10020  0C04  00D7               	movwf	_BuzCnt	;volatile
 10021  0C05  3019               	movlw	25
 10022  0C06  2F88               	ljmp	PL2	;call to abstracted procedure
 10023  0C07                     __end_of_CountDownTimeStart:	
 10024  0C07                     __ptext32:	
 10025 ;; *************** function _Key_Task *****************
 10026 ;; Defined at:
 10027 ;;		line 432 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;		None
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;		None
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  1    wreg      void 
 10034 ;; Registers used:
 10035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 200/0
 10038 ;;		On exit  : 200/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10041 ;;      Params:         0       0       0       0       0
 10042 ;;      Locals:         0       0       0       0       0
 10043 ;;      Temps:          0       0       0       0       0
 10044 ;;      Totals:         0       0       0       0       0
 10045 ;;Total ram usage:        0 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    4
 10048 ;; This function calls:
 10049 ;;		_MainK_Preset
 10050 ;;		_Maink_Cancel
 10051 ;;		_Maink_Factory
 10052 ;;		_Maink_Fast_Fun
 10053 ;;		_Maink_Test
 10054 ;; This function is called by:
 10055 ;;		_main
 10056 ;; This function uses a non-reentrant model
 10057 ;;
 10058                           
 10059                           
 10060                           ;psect for function _Key_Task
 10061  0C07                     _Key_Task:	
 10062                           
 10063                           ;key.c: 435: if(KeyFlag == 0x00)
 10064                           
 10065                           ;incstack = 0
 10066                           ; Regs used in _Key_Task: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10067  0C07  1283               	bcf	3,5	;RP0=0, select bank0
 10068  0C08  082D               	movf	_KeyFlag,w	;volatile
 10069  0C09  1D03               	btfss	3,2
 10070  0C0A  2C0E               	goto	l5873
 10071                           
 10072                           ;key.c: 436: {
 10073                           ;key.c: 437: LongKeyCount = 0;
 10074  0C0B  1683               	bsf	3,5	;RP0=1, select bank1
 10075  0C0C  01CA               	clrf	_LongKeyCount^(0+128)	;volatile
 10076  0C0D                     l15948:	
 10077                           
 10078                           ;key.c: 438: return;
 10079  0C0D  0008               	return
 10080  0C0E                     l5873:	
 10081                           
 10082                           ;key.c: 439: }
 10083                           ;key.c: 442: if(KeyFlag & 0x04)
 10084  0C0E  1D2D               	btfss	_KeyFlag,2	;volatile
 10085  0C0F  2C38               	goto	l5875
 10086                           
 10087                           ;key.c: 443: {
 10088                           ;key.c: 445: if( b_TestShow == 0 && KeyData == (0x4000 | 0x8000))
 10089  0C10  19F0               	btfsc	_b_TestShow/(0+8),_b_TestShow& (0+7)	;volatile
 10090  0C11  2C1E               	goto	l15970
 10091  0C12  30C0               	movlw	192
 10092  0C13  0628               	xorwf	_KeyData+1,w	;volatile
 10093  0C14  0427               	iorwf	_KeyData,w	;volatile
 10094  0C15  1D03               	btfss	3,2
 10095  0C16  2C1E               	goto	l15970
 10096                           
 10097                           ;key.c: 446: {
 10098                           ;key.c: 447: b_TestShow = 1;
 10099  0C17  15F0               	bsf	_b_TestShow/(0+8),_b_TestShow& (0+7)	;volatile
 10100                           
 10101                           ;key.c: 448: TestShow = 0;
 10102  0C18  01B1               	clrf	_TestShow	;volatile
 10103                           
 10104                           ;key.c: 449: SendShow = 0;
 10105  0C19  01B0               	clrf	_SendShow	;volatile
 10106  0C1A                     l15958:	
 10107                           
 10108                           ;key.c: 450: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10109  0C1A  3001               	movlw	1
 10110  0C1B  00D7               	movwf	_BuzCnt	;volatile
 10111  0C1C  300C               	movlw	12
 10112  0C1D  2F88               	ljmp	PL2	;call to abstracted procedure
 10113  0C1E                     l15970:	
 10114                           
 10115                           ;key.c: 452: }
 10116                           ;key.c: 454: if((SysStatus == 1 || SysStatus == 2) && KeyData == (0x4000 | 0x1000))
 10117  0C1E  036A               	decf	_SysStatus,w	;volatile
 10118  0C1F  1903               	btfsc	3,2
 10119  0C20  2C25               	goto	l15974
 10120  0C21  3002               	movlw	2
 10121  0C22  066A               	xorwf	_SysStatus,w	;volatile
 10122  0C23  1D03               	btfss	3,2
 10123  0C24  2C2E               	goto	l15992
 10124  0C25                     l15974:	
 10125  0C25  3050               	movlw	80
 10126  0C26  0628               	xorwf	_KeyData+1,w	;volatile
 10127  0C27  0427               	iorwf	_KeyData,w	;volatile
 10128  0C28  1D03               	btfss	3,2
 10129  0C29  2C2E               	goto	l15992
 10130                           
 10131                           ;key.c: 455: {
 10132                           ;key.c: 456: SysStatus = 5;
 10133  0C2A  3005               	movlw	5
 10134  0C2B  00EA               	movwf	_SysStatus	;volatile
 10135                           
 10136                           ;key.c: 457: FactoryTestData = 0;
 10137  0C2C  01C1               	clrf	_FactoryTestData	;volatile
 10138  0C2D  2C1A               	goto	l15958
 10139  0C2E                     l15992:	
 10140                           
 10141                           ;key.c: 461: }
 10142                           ;key.c: 463: if(SysStatus == 2 && KeyData == 0x4000)
 10143  0C2E  3002               	movlw	2
 10144  0C2F  066A               	xorwf	_SysStatus,w	;volatile
 10145  0C30  1D03               	btfss	3,2
 10146  0C31  0008               	return
 10147  0C32  3040               	movlw	64
 10148  0C33  0628               	xorwf	_KeyData+1,w	;volatile
 10149  0C34  0427               	iorwf	_KeyData,w	;volatile
 10150  0C35  1D03               	btfss	3,2
 10151  0C36  0008               	return
 10152  0C37                     l15996:	
 10153                           
 10154                           ;key.c: 464: {
 10155                           ;key.c: 465: MainK_Preset();
 10156  0C37  2D15               	ljmp	l13178
 10157  0C38                     l5875:	
 10158                           
 10159                           ;key.c: 470: }
 10160                           ;key.c: 473: if(KeyFlag & 0x01)
 10161  0C38  1C2D               	btfss	_KeyFlag,0	;volatile
 10162  0C39  0008               	return
 10163                           
 10164                           ;key.c: 474: {
 10165                           ;key.c: 475: KeyFlag&=~(1<<(0));
 10166  0C3A  102D               	bcf	_KeyFlag,0	;volatile
 10167                           
 10168                           ;key.c: 477: StandbyTimeCnt = 0;
 10169  0C3B  01D9               	clrf	_StandbyTimeCnt	;volatile
 10170                           
 10171                           ;key.c: 480: if(b_Standby)
 10172  0C3C  1F72               	btfss	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 10173  0C3D  2C43               	goto	l5882
 10174                           
 10175                           ;key.c: 481: {
 10176                           ;key.c: 482: b_Standby = 0;
 10177  0C3E  1372               	bcf	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 10178                           
 10179                           ;key.c: 483: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10180  0C3F  3001               	movlw	1
 10181  0C40  00D7               	movwf	_BuzCnt	;volatile
 10182  0C41  300C               	movlw	12
 10183  0C42  2F88               	ljmp	PL2	;call to abstracted procedure
 10184  0C43                     l5882:	
 10185                           
 10186                           ;key.c: 485: }
 10187                           ;key.c: 488: if(b_TestShow)
 10188  0C43  1DF0               	btfss	_b_TestShow/(0+8),_b_TestShow& (0+7)	;volatile
 10189  0C44  2C8D               	goto	l16018
 10190                           
 10191                           ;key.c: 489: {
 10192                           ;key.c: 493: Fc_ID[0] = Fc_ID_3;
 10193  0C45  30FA               	movlw	250
 10194  0C46  0084               	movwf	4
 10195  0C47  309F               	movlw	159
 10196  0C48  00FF               	movwf	127
 10197  0C49  160A  158A  2000  120A  158A  	fcall	stringtab
 10198  0C4E  1683               	bsf	3,5	;RP0=1, select bank1
 10199  0C4F  00A0               	movwf	_Fc_ID^(0+128)
 10200                           
 10201                           ;key.c: 494: Fc_ID[1] = Fc_ID_4;
 10202  0C50  30FB               	movlw	251
 10203  0C51  0084               	movwf	4
 10204  0C52  309F               	movlw	159
 10205  0C53  1283               	bcf	3,5	;RP0=0, select bank0
 10206  0C54  00FF               	movwf	127
 10207  0C55  160A  158A  2000  120A  158A  	fcall	stringtab
 10208  0C5A  1683               	bsf	3,5	;RP0=1, select bank1
 10209  0C5B  00A1               	movwf	(_Fc_ID^(0+128)+1)
 10210                           
 10211                           ;key.c: 495: Fc_ID[2] = Fc_ID_5;
 10212  0C5C  30FC               	movlw	252
 10213  0C5D  0084               	movwf	4
 10214  0C5E  309F               	movlw	159
 10215  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
 10216  0C60  00FF               	movwf	127
 10217  0C61  160A  158A  2000  120A  158A  	fcall	stringtab
 10218  0C66  1683               	bsf	3,5	;RP0=1, select bank1
 10219  0C67  00A2               	movwf	(_Fc_ID^(0+128)+2)
 10220                           
 10221                           ;key.c: 496: Fc_ID[3] = Fc_ID_6;
 10222  0C68  30FD               	movlw	253
 10223  0C69  0084               	movwf	4
 10224  0C6A  309F               	movlw	159
 10225  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
 10226  0C6C  00FF               	movwf	127
 10227  0C6D  160A  158A  2000  120A  158A  	fcall	stringtab
 10228  0C72  1683               	bsf	3,5	;RP0=1, select bank1
 10229  0C73  00A3               	movwf	(_Fc_ID^(0+128)+3)
 10230                           
 10231                           ;key.c: 497: Fc_ID[4] = Fc_ID_7;
 10232  0C74  30FE               	movlw	254
 10233  0C75  0084               	movwf	4
 10234  0C76  309F               	movlw	159
 10235  0C77  1283               	bcf	3,5	;RP0=0, select bank0
 10236  0C78  00FF               	movwf	127
 10237  0C79  160A  158A  2000  120A  158A  	fcall	stringtab
 10238  0C7E  1683               	bsf	3,5	;RP0=1, select bank1
 10239  0C7F  00A4               	movwf	(_Fc_ID^(0+128)+4)
 10240                           
 10241                           ;key.c: 498: Fc_ID[5] = Fc_ID_8;
 10242  0C80  30FF               	movlw	255
 10243  0C81  0084               	movwf	4
 10244  0C82  309F               	movlw	159
 10245  0C83  1283               	bcf	3,5	;RP0=0, select bank0
 10246  0C84  00FF               	movwf	127
 10247  0C85  160A  158A  2000  120A  158A  	fcall	stringtab
 10248  0C8A  1683               	bsf	3,5	;RP0=1, select bank1
 10249  0C8B  00A5               	movwf	(_Fc_ID^(0+128)+5)
 10250                           
 10251                           ;key.c: 502: Maink_Test();
 10252  0C8C  2EB6               	ljmp	l13272
 10253  0C8D                     l16018:	
 10254                           
 10255                           ;key.c: 504: }
 10256                           ;key.c: 506: if(SysStatus == 5)
 10257  0C8D  3005               	movlw	5
 10258  0C8E  066A               	xorwf	_SysStatus,w	;volatile
 10259  0C8F  1D03               	btfss	3,2
 10260  0C90  2C92               	goto	l16024
 10261                           
 10262                           ;key.c: 507: {
 10263                           ;key.c: 508: Maink_Factory();
 10264  0C91  2D9B               	ljmp	l13308
 10265  0C92                     l16024:	
 10266                           
 10267                           ;key.c: 510: }
 10268                           ;key.c: 511: if(KeyData == 0x1000)
 10269  0C92  3010               	movlw	16
 10270  0C93  0628               	xorwf	_KeyData+1,w	;volatile
 10271  0C94  0427               	iorwf	_KeyData,w	;volatile
 10272  0C95  1D03               	btfss	3,2
 10273  0C96  2C98               	goto	l16030
 10274                           
 10275                           ;key.c: 512: {
 10276                           ;key.c: 513: Maink_Cancel();
 10277  0C97  2D5C               	ljmp	l13142
 10278  0C98                     l16030:	
 10279                           
 10280                           ;key.c: 515: }
 10281                           ;key.c: 516: if(SysStatus==1 || SysStatus==2)
 10282  0C98  036A               	decf	_SysStatus,w	;volatile
 10283  0C99  1903               	btfsc	3,2
 10284  0C9A  2CBD               	goto	l16094
 10285  0C9B  3002               	movlw	2
 10286  0C9C  066A               	xorwf	_SysStatus,w	;volatile
 10287  0C9D  1D03               	btfss	3,2
 10288  0C9E  0008               	return
 10289  0C9F  2CBD               	goto	l16094
 10290  0CA0                     l16034:	
 10291  0CA0  3001               	movlw	1
 10292  0CA1                     L42:	
 10293  0CA1  00BC               	movwf	_ChooseFun	;volatile
 10294  0CA2  2E7C               	ljmp	l15632
 10295  0CA3                     l16038:	
 10296  0CA3  3002               	movlw	2
 10297  0CA4  2CA1               	goto	L42
 10298  0CA5                     l16042:	
 10299  0CA5  3003               	movlw	3
 10300  0CA6  2CA1               	goto	L42
 10301  0CA7                     l16046:	
 10302  0CA7  3004               	movlw	4
 10303  0CA8  2CA1               	goto	L42
 10304  0CA9                     l16050:	
 10305  0CA9  3005               	movlw	5
 10306  0CAA  2CA1               	goto	L42
 10307  0CAB                     l16054:	
 10308  0CAB  3006               	movlw	6
 10309  0CAC  2CA1               	goto	L42
 10310  0CAD                     l16058:	
 10311  0CAD  3007               	movlw	7
 10312  0CAE  2CA1               	goto	L42
 10313  0CAF                     l16062:	
 10314  0CAF  3008               	movlw	8
 10315  0CB0  2CA1               	goto	L42
 10316  0CB1                     l16066:	
 10317  0CB1  3009               	movlw	9
 10318  0CB2  2CA1               	goto	L42
 10319  0CB3                     l16070:	
 10320  0CB3  300A               	movlw	10
 10321  0CB4  2CA1               	goto	L42
 10322  0CB5                     l16074:	
 10323  0CB5  300B               	movlw	11
 10324  0CB6  2CA1               	goto	L42
 10325  0CB7                     l16078:	
 10326  0CB7  300C               	movlw	12
 10327  0CB8  2CA1               	goto	L42
 10328  0CB9                     l16084:	
 10329  0CB9  300D               	movlw	13
 10330  0CBA  2CA1               	goto	L42
 10331  0CBB                     l16088:	
 10332  0CBB  300E               	movlw	14
 10333  0CBC  2CA1               	goto	L42
 10334  0CBD                     l16094:	
 10335                           
 10336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
 10337                           ; Switch size 1, requested type "space"
 10338                           ; Number of cases is 8, Range of values is 0 to 128
 10339                           ; switch strategies available:
 10340                           ; Name         Instructions Cycles
 10341                           ; simple_byte           25    13 (average)
 10342                           ; jumptable            260     6 (fixed)
 10343                           ;	Chosen strategy is simple_byte
 10344  0CBD  0828               	movf	_KeyData+1,w	;volatile
 10345  0CBE  3A00               	xorlw	0	; case 0
 10346  0CBF  1903               	skipnz
 10347  0CC0  2CD7               	goto	l17502
 10348  0CC1  3A01               	xorlw	1	; case 1
 10349  0CC2  1903               	skipnz
 10350  0CC3  2CF1               	goto	l17504
 10351  0CC4  3A03               	xorlw	3	; case 2
 10352  0CC5  1903               	skipnz
 10353  0CC6  2CF6               	goto	l17506
 10354  0CC7  3A06               	xorlw	6	; case 4
 10355  0CC8  1903               	skipnz
 10356  0CC9  2CFB               	goto	l17508
 10357  0CCA  3A0C               	xorlw	12	; case 8
 10358  0CCB  1903               	skipnz
 10359  0CCC  2D00               	goto	l17510
 10360  0CCD  3A28               	xorlw	40	; case 32
 10361  0CCE  1903               	skipnz
 10362  0CCF  2D05               	goto	l17512
 10363  0CD0  3A60               	xorlw	96	; case 64
 10364  0CD1  1903               	skipnz
 10365  0CD2  2D0A               	goto	l17514
 10366  0CD3  3AC0               	xorlw	192	; case 128
 10367  0CD4  1903               	skipnz
 10368  0CD5  2D0F               	goto	l17516
 10369  0CD6  2C0D               	goto	l15948
 10370  0CD7                     l17502:	
 10371                           
 10372                           ; Switch size 1, requested type "space"
 10373                           ; Number of cases is 8, Range of values is 1 to 128
 10374                           ; switch strategies available:
 10375                           ; Name         Instructions Cycles
 10376                           ; simple_byte           25    13 (average)
 10377                           ; jumptable            263     9 (fixed)
 10378                           ;	Chosen strategy is simple_byte
 10379  0CD7  0827               	movf	_KeyData,w	;volatile
 10380  0CD8  3A01               	xorlw	1	; case 1
 10381  0CD9  1903               	skipnz
 10382  0CDA  2CA7               	goto	l16046
 10383  0CDB  3A03               	xorlw	3	; case 2
 10384  0CDC  1903               	skipnz
 10385  0CDD  2CA5               	goto	l16042
 10386  0CDE  3A06               	xorlw	6	; case 4
 10387  0CDF  1903               	skipnz
 10388  0CE0  2CA3               	goto	l16038
 10389  0CE1  3A0C               	xorlw	12	; case 8
 10390  0CE2  1903               	skipnz
 10391  0CE3  2CA0               	goto	l16034
 10392  0CE4  3A18               	xorlw	24	; case 16
 10393  0CE5  1903               	skipnz
 10394  0CE6  2CAF               	goto	l16062
 10395  0CE7  3A30               	xorlw	48	; case 32
 10396  0CE8  1903               	skipnz
 10397  0CE9  2CAD               	goto	l16058
 10398  0CEA  3A60               	xorlw	96	; case 64
 10399  0CEB  1903               	skipnz
 10400  0CEC  2CAB               	goto	l16054
 10401  0CED  3AC0               	xorlw	192	; case 128
 10402  0CEE  1903               	skipnz
 10403  0CEF  2CA9               	goto	l16050
 10404  0CF0  2C0D               	goto	l15948
 10405  0CF1                     l17504:	
 10406                           
 10407                           ; Switch size 1, requested type "space"
 10408                           ; Number of cases is 1, Range of values is 0 to 0
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            4     3 (average)
 10412                           ; direct_byte           11     8 (fixed)
 10413                           ; jumptable            260     6 (fixed)
 10414                           ;	Chosen strategy is simple_byte
 10415  0CF1  0827               	movf	_KeyData,w	;volatile
 10416  0CF2  3A00               	xorlw	0	; case 0
 10417  0CF3  1903               	skipnz
 10418  0CF4  2CB7               	goto	l16078
 10419  0CF5  2C0D               	goto	l15948
 10420  0CF6                     l17506:	
 10421                           
 10422                           ; Switch size 1, requested type "space"
 10423                           ; Number of cases is 1, Range of values is 0 to 0
 10424                           ; switch strategies available:
 10425                           ; Name         Instructions Cycles
 10426                           ; simple_byte            4     3 (average)
 10427                           ; direct_byte           11     8 (fixed)
 10428                           ; jumptable            260     6 (fixed)
 10429                           ;	Chosen strategy is simple_byte
 10430  0CF6  0827               	movf	_KeyData,w	;volatile
 10431  0CF7  3A00               	xorlw	0	; case 0
 10432  0CF8  1903               	skipnz
 10433  0CF9  2CB5               	goto	l16074
 10434  0CFA  2C0D               	goto	l15948
 10435  0CFB                     l17508:	
 10436                           
 10437                           ; Switch size 1, requested type "space"
 10438                           ; Number of cases is 1, Range of values is 0 to 0
 10439                           ; switch strategies available:
 10440                           ; Name         Instructions Cycles
 10441                           ; simple_byte            4     3 (average)
 10442                           ; direct_byte           11     8 (fixed)
 10443                           ; jumptable            260     6 (fixed)
 10444                           ;	Chosen strategy is simple_byte
 10445  0CFB  0827               	movf	_KeyData,w	;volatile
 10446  0CFC  3A00               	xorlw	0	; case 0
 10447  0CFD  1903               	skipnz
 10448  0CFE  2CB3               	goto	l16070
 10449  0CFF  2C0D               	goto	l15948
 10450  0D00                     l17510:	
 10451                           
 10452                           ; Switch size 1, requested type "space"
 10453                           ; Number of cases is 1, Range of values is 0 to 0
 10454                           ; switch strategies available:
 10455                           ; Name         Instructions Cycles
 10456                           ; simple_byte            4     3 (average)
 10457                           ; direct_byte           11     8 (fixed)
 10458                           ; jumptable            260     6 (fixed)
 10459                           ;	Chosen strategy is simple_byte
 10460  0D00  0827               	movf	_KeyData,w	;volatile
 10461  0D01  3A00               	xorlw	0	; case 0
 10462  0D02  1903               	skipnz
 10463  0D03  2CB1               	goto	l16066
 10464  0D04  2C0D               	goto	l15948
 10465  0D05                     l17512:	
 10466                           
 10467                           ; Switch size 1, requested type "space"
 10468                           ; Number of cases is 1, Range of values is 0 to 0
 10469                           ; switch strategies available:
 10470                           ; Name         Instructions Cycles
 10471                           ; simple_byte            4     3 (average)
 10472                           ; direct_byte           11     8 (fixed)
 10473                           ; jumptable            260     6 (fixed)
 10474                           ;	Chosen strategy is simple_byte
 10475  0D05  0827               	movf	_KeyData,w	;volatile
 10476  0D06  3A00               	xorlw	0	; case 0
 10477  0D07  1903               	skipnz
 10478  0D08  2CBB               	goto	l16088
 10479  0D09  2C0D               	goto	l15948
 10480  0D0A                     l17514:	
 10481                           
 10482                           ; Switch size 1, requested type "space"
 10483                           ; Number of cases is 1, Range of values is 0 to 0
 10484                           ; switch strategies available:
 10485                           ; Name         Instructions Cycles
 10486                           ; simple_byte            4     3 (average)
 10487                           ; direct_byte           11     8 (fixed)
 10488                           ; jumptable            260     6 (fixed)
 10489                           ;	Chosen strategy is simple_byte
 10490  0D0A  0827               	movf	_KeyData,w	;volatile
 10491  0D0B  3A00               	xorlw	0	; case 0
 10492  0D0C  1903               	skipnz
 10493  0D0D  2C37               	goto	l15996
 10494  0D0E  2C0D               	goto	l15948
 10495  0D0F                     l17516:	
 10496                           
 10497                           ; Switch size 1, requested type "space"
 10498                           ; Number of cases is 1, Range of values is 0 to 0
 10499                           ; switch strategies available:
 10500                           ; Name         Instructions Cycles
 10501                           ; simple_byte            4     3 (average)
 10502                           ; direct_byte           11     8 (fixed)
 10503                           ; jumptable            260     6 (fixed)
 10504                           ;	Chosen strategy is simple_byte
 10505  0D0F  0827               	movf	_KeyData,w	;volatile
 10506  0D10  3A00               	xorlw	0	; case 0
 10507  0D11  1903               	skipnz
 10508  0D12  2CB9               	goto	l16084
 10509  0D13  2C0D               	goto	l15948
 10510  0D14  0008               	return
 10511  0D15                     __end_of_Key_Task:	
 10512  0D15                     __ptext37:	
 10513 ;; *************** function _MainK_Preset *****************
 10514 ;; Defined at:
 10515 ;;		line 96 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;		None
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;		None
 10520 ;; Return value:  Size  Location     Type
 10521 ;;                  1    wreg      void 
 10522 ;; Registers used:
 10523 ;;		wreg, status,2, status,0
 10524 ;; Tracked objects:
 10525 ;;		On entry : 200/0
 10526 ;;		On exit  : 200/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10529 ;;      Params:         0       0       0       0       0
 10530 ;;      Locals:         0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0
 10532 ;;      Totals:         0       0       0       0       0
 10533 ;;Total ram usage:        0 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    2
 10536 ;; This function calls:
 10537 ;;		Nothing
 10538 ;; This function is called by:
 10539 ;;		_Key_Task
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           
 10544                           ;psect for function _MainK_Preset
 10545  0D15                     _MainK_Preset:	
 10546  0D15                     l13178:	
 10547                           ;incstack = 0
 10548                           ; Regs used in _MainK_Preset: [wreg+status,2+status,0]
 10549                           
 10550                           
 10551                           ;key.c: 98: if(SysStatus == 2)
 10552  0D15  3002               	movlw	2
 10553  0D16  1283               	bcf	3,5	;RP0=0, select bank0
 10554  0D17  066A               	xorwf	_SysStatus,w	;volatile
 10555  0D18  1D03               	btfss	3,2
 10556  0D19  0008               	return
 10557                           
 10558                           ;key.c: 99: {
 10559                           ;key.c: 100: if(ChooseFun == 12 || ChooseFun == 14)
 10560  0D1A  300C               	movlw	12
 10561  0D1B  063C               	xorwf	_ChooseFun,w	;volatile
 10562  0D1C  1903               	btfsc	3,2
 10563  0D1D  0008               	return
 10564  0D1E  300E               	movlw	14
 10565  0D1F  063C               	xorwf	_ChooseFun,w	;volatile
 10566  0D20  1903               	btfsc	3,2
 10567  0D21  0008               	return
 10568                           
 10569                           ;key.c: 103: }
 10570                           ;key.c: 105: if(PresetState == 1)
 10571                           
 10572                           ;key.c: 101: {
 10573                           ;key.c: 102: return;
 10574  0D22  0B39               	decfsz	_PresetState,w	;volatile
 10575  0D23  2D36               	goto	l13208
 10576                           
 10577                           ;key.c: 106: {
 10578                           ;key.c: 107: PresetState = 2;
 10579  0D24  3002               	movlw	2
 10580  0D25  00B9               	movwf	_PresetState	;volatile
 10581                           
 10582                           ;key.c: 109: if(PresetTimeH == 0 && PresetTimeM == 0)
 10583  0D26  0836               	movf	_PresetTimeH,w	;volatile
 10584  0D27  1D03               	btfss	3,2
 10585  0D28  2D2E               	goto	l13194
 10586  0D29  0835               	movf	_PresetTimeM,w	;volatile
 10587  0D2A  1D03               	btfss	3,2
 10588  0D2B  2D2E               	goto	l13194
 10589                           
 10590                           ;key.c: 110: {
 10591                           ;key.c: 111: PresetTimeH = 2;
 10592  0D2C  3002               	movlw	2
 10593  0D2D  00B6               	movwf	_PresetTimeH	;volatile
 10594  0D2E                     l13194:	
 10595                           
 10596                           ;key.c: 112: }
 10597                           ;key.c: 115: LedCol_500ms = 0;
 10598  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
 10599  0D2F  01CB               	clrf	_LedCol_500ms^(0+128)	;volatile
 10600                           
 10601                           ;key.c: 116: b_LedCol = 1;
 10602  0D30  16F0               	bsf	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
 10603                           
 10604                           ;key.c: 118: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10605  0D31  3001               	movlw	1
 10606  0D32  1283               	bcf	3,5	;RP0=0, select bank0
 10607  0D33  00D7               	movwf	_BuzCnt	;volatile
 10608  0D34  300C               	movlw	12
 10609                           
 10610                           ;key.c: 119: }
 10611  0D35  2F88               	ljmp	PL2	;call to abstracted procedure
 10612  0D36                     l13208:	
 10613                           
 10614                           ;key.c: 121: else if(PresetState == 2)
 10615  0D36  3002               	movlw	2
 10616  0D37  0639               	xorwf	_PresetState,w	;volatile
 10617  0D38  1D03               	btfss	3,2
 10618  0D39  0008               	return
 10619                           
 10620                           ;key.c: 122: {
 10621                           ;key.c: 124: if((KeyFlag & 0x04) == 0)
 10622  0D3A  192D               	btfsc	_KeyFlag,2	;volatile
 10623  0D3B  2D41               	goto	l13216
 10624                           
 10625                           ;key.c: 125: {
 10626                           ;key.c: 126: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10627  0D3C  3001               	movlw	1
 10628  0D3D  2790  120A  158A   	fcall	PL8	;call to abstracted procedure
 10629                           
 10630                           ;key.c: 129: }
 10631  0D40  2D48               	goto	l13214
 10632  0D41                     l13216:	
 10633                           
 10634                           ;key.c: 130: else
 10635                           ;key.c: 131: {
 10636                           ;key.c: 132: if(++LongKeyCount >= 40)
 10637  0D41  3028               	movlw	40
 10638  0D42  1683               	bsf	3,5	;RP0=1, select bank1
 10639  0D43  0ACA               	incf	_LongKeyCount^(0+128),f	;volatile
 10640  0D44  024A               	subwf	_LongKeyCount^(0+128),w	;volatile
 10641  0D45  1C03               	skipc
 10642  0D46  0008               	return
 10643                           
 10644                           ;key.c: 133: {
 10645                           ;key.c: 134: LongKeyCount = 0;
 10646  0D47  01CA               	clrf	_LongKeyCount^(0+128)	;volatile
 10647  0D48                     l13214:	
 10648                           
 10649                           ;key.c: 127: PresetTimeM += 30;
 10650  0D48  301E               	movlw	30
 10651  0D49  1283               	bcf	3,5	;RP0=0, select bank0
 10652  0D4A  07B5               	addwf	_PresetTimeM,f	;volatile
 10653                           
 10654                           ;key.c: 140: }
 10655                           ;key.c: 141: }
 10656                           ;key.c: 142: if(PresetTimeM >= 60)
 10657  0D4B  303C               	movlw	60
 10658  0D4C  0235               	subwf	_PresetTimeM,w	;volatile
 10659  0D4D  1C03               	skipc
 10660  0D4E  2D51               	goto	l13228
 10661                           
 10662                           ;key.c: 143: {
 10663                           ;key.c: 144: PresetTimeM = 0;
 10664  0D4F  01B5               	clrf	_PresetTimeM	;volatile
 10665                           
 10666                           ;key.c: 145: PresetTimeH++;
 10667  0D50  0AB6               	incf	_PresetTimeH,f	;volatile
 10668  0D51                     l13228:	
 10669                           
 10670                           ;key.c: 146: }
 10671                           ;key.c: 148: if(PresetTimeH >= 24 && PresetTimeM > 0)
 10672  0D51  3018               	movlw	24
 10673  0D52  0236               	subwf	_PresetTimeH,w	;volatile
 10674  0D53  1C03               	skipc
 10675  0D54  0008               	return
 10676  0D55  0835               	movf	_PresetTimeM,w	;volatile
 10677  0D56  1903               	btfsc	3,2
 10678  0D57  0008               	return
 10679                           
 10680                           ;key.c: 149: {
 10681                           ;key.c: 150: PresetTimeH = 2;
 10682  0D58  3002               	movlw	2
 10683  0D59  00B6               	movwf	_PresetTimeH	;volatile
 10684                           
 10685                           ;key.c: 151: PresetTimeM = 0;
 10686  0D5A  01B5               	clrf	_PresetTimeM	;volatile
 10687  0D5B  0008               	return
 10688  0D5C                     __end_of_MainK_Preset:	
 10689  0D5C                     __ptext36:	
 10690 ;; *************** function _Maink_Cancel *****************
 10691 ;; Defined at:
 10692 ;;		line 29 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;		None
 10695 ;; Auto vars:     Size  Location     Type
 10696 ;;		None
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      void 
 10699 ;; Registers used:
 10700 ;;		wreg, status,2, status,0, pclath, cstack
 10701 ;; Tracked objects:
 10702 ;;		On entry : 300/0
 10703 ;;		On exit  : 300/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10706 ;;      Params:         0       0       0       0       0
 10707 ;;      Locals:         0       0       0       0       0
 10708 ;;      Temps:          0       0       0       0       0
 10709 ;;      Totals:         0       0       0       0       0
 10710 ;;Total ram usage:        0 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    3
 10713 ;; This function calls:
 10714 ;;		_Cancel
 10715 ;; This function is called by:
 10716 ;;		_Key_Task
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           
 10721                           ;psect for function _Maink_Cancel
 10722  0D5C                     _Maink_Cancel:	
 10723  0D5C                     l13142:	
 10724                           ;incstack = 0
 10725                           ; Regs used in _Maink_Cancel: [wreg+status,2+status,0+pclath+cstack]
 10726                           
 10727                           
 10728                           ;key.c: 32: if(SysStatus == 1)
 10729  0D5C  0B6A               	decfsz	_SysStatus,w	;volatile
 10730  0D5D  2D66               	goto	l13158
 10731                           
 10732                           ;key.c: 33: {
 10733                           ;key.c: 34: SysStatus = 4;
 10734  0D5E  3004               	movlw	4
 10735  0D5F  00EA               	movwf	_SysStatus	;volatile
 10736                           
 10737                           ;key.c: 35: ChooseFunSave = 0;
 10738  0D60  01FB               	clrf	_ChooseFunSave	;volatile
 10739  0D61                     l13148:	
 10740                           
 10741                           ;key.c: 36: {{BuzCnt = 1; BuzUpTime = 75/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime; 
      +                          BuzDownTemp = BuzDownTime;};};
 10742  0D61  3001               	movlw	1
 10743  0D62  1283               	bcf	3,5	;RP0=0, select bank0
 10744  0D63  00D7               	movwf	_BuzCnt	;volatile
 10745  0D64  3025               	movlw	37
 10746                           
 10747                           ;key.c: 37: }
 10748  0D65  2F88               	ljmp	PL2	;call to abstracted procedure
 10749  0D66                     l13158:	
 10750                           
 10751                           ;key.c: 39: else if(SysStatus == 2 || SysStatus == 3 || SysStatus == 4)
 10752  0D66  3002               	movlw	2
 10753  0D67  066A               	xorwf	_SysStatus,w	;volatile
 10754  0D68  1903               	btfsc	3,2
 10755  0D69  2D72               	goto	l13164
 10756  0D6A  3003               	movlw	3
 10757  0D6B  066A               	xorwf	_SysStatus,w	;volatile
 10758  0D6C  1903               	btfsc	3,2
 10759  0D6D  2D72               	goto	l13164
 10760  0D6E  3004               	movlw	4
 10761  0D6F  066A               	xorwf	_SysStatus,w	;volatile
 10762  0D70  1D03               	btfss	3,2
 10763  0D71  0008               	return
 10764  0D72                     l13164:	
 10765                           
 10766                           ;key.c: 40: {
 10767                           ;key.c: 41: Cancel();
 10768  0D72  2577  120A  158A   	fcall	_Cancel
 10769                           
 10770                           ;key.c: 42: b_AutoKeepWarm = 0;
 10771  0D75  1270               	bcf	_b_AutoKeepWarm/(0+8),_b_AutoKeepWarm& (0+7)	;volatile
 10772  0D76  2D61               	goto	l13148
 10773  0D77                     __end_of_Maink_Cancel:	
 10774  0D77                     __ptext56:	
 10775 ;; *************** function _Cancel *****************
 10776 ;; Defined at:
 10777 ;;		line 549 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;		None
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;		None
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      void 
 10784 ;; Registers used:
 10785 ;;		wreg, status,2
 10786 ;; Tracked objects:
 10787 ;;		On entry : 300/0
 10788 ;;		On exit  : 300/100
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10791 ;;      Params:         0       0       0       0       0
 10792 ;;      Locals:         0       0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0
 10794 ;;      Totals:         0       0       0       0       0
 10795 ;;Total ram usage:        0 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    2
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_PressureHeat
 10802 ;;		_Maink_Cancel
 10803 ;;		_Maink_Factory
 10804 ;;		_StandbyTimeStart
 10805 ;;		_CountDownTimeStart
 10806 ;;		_KeepWarmTimeStart
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           
 10811                           ;psect for function _Cancel
 10812  0D77                     _Cancel:	
 10813  0D77                     l12078:	
 10814                           ;incstack = 0
 10815                           ; Regs used in _Cancel: [wreg+status,2]
 10816                           
 10817                           
 10818                           ;key.c: 552: SysStatus = 1;
 10819  0D77  3001               	movlw	1
 10820  0D78  00EA               	movwf	_SysStatus	;volatile
 10821                           
 10822                           ;key.c: 553: WorkStage = 0;
 10823  0D79  01BF               	clrf	_WorkStage	;volatile
 10824                           
 10825                           ;key.c: 554: ChooseFun = 0;
 10826  0D7A  01BC               	clrf	_ChooseFun	;volatile
 10827                           
 10828                           ;key.c: 556: PresetState = 0;
 10829  0D7B  01B9               	clrf	_PresetState	;volatile
 10830                           
 10831                           ;key.c: 557: ErrorCode = 0;
 10832  0D7C  01D8               	clrf	_ErrorCode	;volatile
 10833                           
 10834                           ;key.c: 558: CountDownTime = 0;
 10835  0D7D  01C0               	clrf	_CountDownTime	;volatile
 10836                           
 10837                           ;key.c: 559: CountDownTimeSave = 0;
 10838  0D7E  01B3               	clrf	_CountDownTimeSave	;volatile
 10839                           
 10840                           ;key.c: 560: WorkStep = 0;
 10841  0D7F  01C2               	clrf	_WorkStep	;volatile
 10842                           
 10843                           ;key.c: 561: FactoryTestData = 0;
 10844  0D80  01C1               	clrf	_FactoryTestData	;volatile
 10845                           
 10846                           ;key.c: 562: PressureData = 0;
 10847  0D81  1683               	bsf	3,5	;RP0=1, select bank1
 10848  0D82  01C7               	clrf	_PressureData^(0+128)	;volatile
 10849                           
 10850                           ;key.c: 563: PressureCountTime = 0;
 10851  0D83  01C6               	clrf	_PressureCountTime^(0+128)	;volatile
 10852                           
 10853                           ;key.c: 566: b_ShortOn = 0;
 10854  0D84  1271               	bcf	_b_ShortOn/(0+8),_b_ShortOn& (0+7)	;volatile
 10855                           
 10856                           ;key.c: 567: ShortCntL = 0;
 10857  0D85  1283               	bcf	3,5	;RP0=0, select bank0
 10858  0D86  01C4               	clrf	_ShortCntL	;volatile
 10859                           
 10860                           ;key.c: 568: ShortCntM = 0;
 10861  0D87  01C3               	clrf	_ShortCntM	;volatile
 10862                           
 10863                           ;key.c: 570: PresetTimeH = 0;
 10864  0D88  01B6               	clrf	_PresetTimeH	;volatile
 10865                           
 10866                           ;key.c: 571: PresetTimeM = 0;
 10867  0D89  01B5               	clrf	_PresetTimeM	;volatile
 10868                           
 10869                           ;key.c: 572: PresetTimeS = 0;
 10870  0D8A  01AC               	clrf	_PresetTimeS	;volatile
 10871                           
 10872                           ;key.c: 574: WorkTimeH = 0;
 10873  0D8B  01AE               	clrf	_WorkTimeH	;volatile
 10874                           
 10875                           ;key.c: 575: WorkTimeM = 0;
 10876  0D8C  01BD               	clrf	_WorkTimeM	;volatile
 10877                           
 10878                           ;key.c: 576: WorkTimeS = 0;
 10879  0D8D  01B4               	clrf	_WorkTimeS	;volatile
 10880                           
 10881                           ;key.c: 578: KeepWarmH = 0;
 10882  0D8E  01AB               	clrf	_KeepWarmH	;volatile
 10883                           
 10884                           ;key.c: 579: KeepWarmM = 0;
 10885  0D8F  1683               	bsf	3,5	;RP0=1, select bank1
 10886  0D90  01C5               	clrf	_KeepWarmM^(0+128)	;volatile
 10887                           
 10888                           ;key.c: 580: KeepWarmS = 0;
 10889  0D91  01C4               	clrf	_KeepWarmS^(0+128)	;volatile
 10890                           
 10891                           ;key.c: 582: CountTimeS = 0;
 10892  0D92  1283               	bcf	3,5	;RP0=0, select bank0
 10893  0D93  01AA               	clrf	_CountTimeS	;volatile
 10894                           
 10895                           ;key.c: 585: b_BotHeatEn = 0;
 10896  0D94  1371               	bcf	_b_BotHeatEn/(0+8),_b_BotHeatEn& (0+7)	;volatile
 10897                           
 10898                           ;key.c: 586: b_BotHeatOn = 0;
 10899  0D95  12F1               	bcf	_b_BotHeatOn/(0+8),_b_BotHeatOn& (0+7)	;volatile
 10900                           
 10901                           ;key.c: 589: b_BotTempOut = 0;
 10902  0D96  1171               	bcf	_b_BotTempOut/(0+8),_b_BotTempOut& (0+7)	;volatile
 10903                           
 10904                           ;key.c: 590: b_Opencook_OK = 0;
 10905  0D97  10F1               	bcf	_b_Opencook_OK/(0+8),_b_Opencook_OK& (0+7)	;volatile
 10906                           
 10907                           ;key.c: 592: Led_Step_100C = 0;
 10908  0D98  1683               	bsf	3,5	;RP0=1, select bank1
 10909  0D99  01CD               	clrf	_Led_Step_100C^(0+128)	;volatile
 10910  0D9A  0008               	return
 10911  0D9B                     __end_of_Cancel:	
 10912  0D9B                     __ptext35:	
 10913 ;; *************** function _Maink_Factory *****************
 10914 ;; Defined at:
 10915 ;;		line 233 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10924 ;; Tracked objects:
 10925 ;;		On entry : 300/0
 10926 ;;		On exit  : 300/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10929 ;;      Params:         0       0       0       0       0
 10930 ;;      Locals:         0       0       0       0       0
 10931 ;;      Temps:          0       0       0       0       0
 10932 ;;      Totals:         0       0       0       0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    3
 10936 ;; This function calls:
 10937 ;;		_Cancel
 10938 ;; This function is called by:
 10939 ;;		_Key_Task
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _Maink_Factory
 10945  0D9B                     _Maink_Factory:	
 10946  0D9B                     l13308:	
 10947                           ;incstack = 0
 10948                           ; Regs used in _Maink_Factory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10949                           
 10950                           
 10951                           ;key.c: 236: if(KeyData == 0x1000 && FactoryTestData != (14-1))
 10952  0D9B  3010               	movlw	16
 10953  0D9C  0628               	xorwf	_KeyData+1,w	;volatile
 10954  0D9D  0427               	iorwf	_KeyData,w	;volatile
 10955  0D9E  1D03               	btfss	3,2
 10956  0D9F  2E12               	goto	l13398
 10957  0DA0  300D               	movlw	13
 10958  0DA1  0641               	xorwf	_FactoryTestData,w	;volatile
 10959  0DA2  1903               	btfsc	3,2
 10960  0DA3  2E12               	goto	l13398
 10961                           
 10962                           ;key.c: 237: {
 10963                           ;key.c: 238: Cancel();
 10964  0DA4  2577  120A  158A   	fcall	_Cancel
 10965                           
 10966                           ;key.c: 239: b_JudgeLidOk = 0;
 10967  0DA7  1170               	bcf	_b_JudgeLidOk/(0+8),_b_JudgeLidOk& (0+7)	;volatile
 10968                           
 10969                           ;key.c: 240: JudgeLidCnt = 0;
 10970  0DA8  01C8               	clrf	_JudgeLidCnt^(0+128)	;volatile
 10971                           
 10972                           ;key.c: 241: JudgeLidMin = 0;
 10973  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
 10974  0DAA  01AF               	clrf	_JudgeLidMin	;volatile
 10975                           
 10976                           ;key.c: 242: {{BuzCnt = 1; BuzUpTime = 75/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10977  0DAB  3001               	movlw	1
 10978  0DAC  00D7               	movwf	_BuzCnt	;volatile
 10979  0DAD  3025               	movlw	37
 10980  0DAE                     L59:	
 10981  0DAE  2F88               	ljmp	PL2	;call to abstracted procedure
 10982  0DAF                     l13332:	
 10983                           
 10984                           ;key.c: 250: if(FactoryTestData == 0)
 10985  0DAF  0841               	movf	_FactoryTestData,w	;volatile
 10986  0DB0  1D03               	btfss	3,2
 10987  0DB1  2E71               	goto	l13400
 10988                           
 10989                           ;key.c: 251: {
 10990                           ;key.c: 252: FactoryTestData = 1;
 10991  0DB2  3001               	movlw	1
 10992  0DB3  00C1               	movwf	_FactoryTestData	;volatile
 10993  0DB4  2E0E               	goto	L58
 10994  0DB5                     l13336:	
 10995                           ;key.c: 253: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 10996                           
 10997                           
 10998                           ;key.c: 258: if(FactoryTestData == 1)
 10999  0DB5  0B41               	decfsz	_FactoryTestData,w	;volatile
 11000  0DB6  2E71               	goto	l13400
 11001                           
 11002                           ;key.c: 259: {
 11003                           ;key.c: 260: FactoryTestData = 2;
 11004  0DB7  3002               	movlw	2
 11005  0DB8  2E0C               	goto	L60
 11006  0DB9                     l13340:	
 11007                           ;key.c: 261: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11008                           
 11009                           
 11010                           ;key.c: 267: if(FactoryTestData == 2)
 11011  0DB9  3002               	movlw	2
 11012  0DBA  0641               	xorwf	_FactoryTestData,w	;volatile
 11013  0DBB  1D03               	btfss	3,2
 11014  0DBC  2E71               	goto	l13400
 11015                           
 11016                           ;key.c: 268: {
 11017                           ;key.c: 269: FactoryTestData = 3;
 11018  0DBD  3003               	movlw	3
 11019  0DBE  2E0C               	goto	L60
 11020  0DBF                     l13344:	
 11021                           ;key.c: 270: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11022                           
 11023                           
 11024                           ;key.c: 276: if(FactoryTestData == 3)
 11025  0DBF  3003               	movlw	3
 11026  0DC0  0641               	xorwf	_FactoryTestData,w	;volatile
 11027  0DC1  1D03               	btfss	3,2
 11028  0DC2  2E71               	goto	l13400
 11029                           
 11030                           ;key.c: 277: {
 11031                           ;key.c: 278: FactoryTestData = 4;
 11032  0DC3  3004               	movlw	4
 11033  0DC4  2E0C               	goto	L60
 11034  0DC5                     l13348:	
 11035                           ;key.c: 279: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11036                           
 11037                           
 11038                           ;key.c: 285: if(FactoryTestData == 4)
 11039  0DC5  3004               	movlw	4
 11040  0DC6  0641               	xorwf	_FactoryTestData,w	;volatile
 11041  0DC7  1D03               	btfss	3,2
 11042  0DC8  2E71               	goto	l13400
 11043                           
 11044                           ;key.c: 286: {
 11045                           ;key.c: 287: FactoryTestData = 5;
 11046  0DC9  3005               	movlw	5
 11047  0DCA  2E0C               	goto	L60
 11048  0DCB                     l13352:	
 11049                           ;key.c: 288: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11050                           
 11051                           
 11052                           ;key.c: 294: if(FactoryTestData == 5)
 11053  0DCB  3005               	movlw	5
 11054  0DCC  0641               	xorwf	_FactoryTestData,w	;volatile
 11055  0DCD  1D03               	btfss	3,2
 11056  0DCE  2E71               	goto	l13400
 11057                           
 11058                           ;key.c: 295: {
 11059                           ;key.c: 296: FactoryTestData = 6;
 11060  0DCF  3006               	movlw	6
 11061  0DD0  2E0C               	goto	L60
 11062  0DD1                     l13356:	
 11063                           ;key.c: 297: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11064                           
 11065                           
 11066                           ;key.c: 303: if(FactoryTestData == 6)
 11067  0DD1  3006               	movlw	6
 11068  0DD2  0641               	xorwf	_FactoryTestData,w	;volatile
 11069  0DD3  1D03               	btfss	3,2
 11070  0DD4  2E71               	goto	l13400
 11071                           
 11072                           ;key.c: 304: {
 11073                           ;key.c: 305: FactoryTestData = 7;
 11074  0DD5  3007               	movlw	7
 11075  0DD6  2E0C               	goto	L60
 11076  0DD7                     l13360:	
 11077                           ;key.c: 306: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11078                           
 11079                           
 11080                           ;key.c: 312: if(FactoryTestData == 7)
 11081  0DD7  3007               	movlw	7
 11082  0DD8  0641               	xorwf	_FactoryTestData,w	;volatile
 11083  0DD9  1D03               	btfss	3,2
 11084  0DDA  2E71               	goto	l13400
 11085                           
 11086                           ;key.c: 313: {
 11087                           ;key.c: 314: FactoryTestData = 8;
 11088  0DDB  3008               	movlw	8
 11089  0DDC  2E0C               	goto	L60
 11090  0DDD                     l13364:	
 11091                           ;key.c: 315: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11092                           
 11093                           
 11094                           ;key.c: 321: if(FactoryTestData == 8)
 11095  0DDD  3008               	movlw	8
 11096  0DDE  0641               	xorwf	_FactoryTestData,w	;volatile
 11097  0DDF  1D03               	btfss	3,2
 11098  0DE0  2E71               	goto	l13400
 11099                           
 11100                           ;key.c: 322: {
 11101                           ;key.c: 323: FactoryTestData = 9;
 11102  0DE1  3009               	movlw	9
 11103  0DE2  2E0C               	goto	L60
 11104  0DE3                     l13368:	
 11105                           ;key.c: 324: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11106                           
 11107                           
 11108                           ;key.c: 330: if(FactoryTestData == 9)
 11109  0DE3  3009               	movlw	9
 11110  0DE4  0641               	xorwf	_FactoryTestData,w	;volatile
 11111  0DE5  1D03               	btfss	3,2
 11112  0DE6  2E71               	goto	l13400
 11113                           
 11114                           ;key.c: 331: {
 11115                           ;key.c: 332: FactoryTestData = 10;
 11116  0DE7  300A               	movlw	10
 11117  0DE8  2E0C               	goto	L60
 11118  0DE9                     l13372:	
 11119                           ;key.c: 333: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11120                           
 11121                           
 11122                           ;key.c: 339: if(FactoryTestData == 10)
 11123  0DE9  300A               	movlw	10
 11124  0DEA  0641               	xorwf	_FactoryTestData,w	;volatile
 11125  0DEB  1D03               	btfss	3,2
 11126  0DEC  2E71               	goto	l13400
 11127                           
 11128                           ;key.c: 340: {
 11129                           ;key.c: 341: FactoryTestData = 11;
 11130  0DED  300B               	movlw	11
 11131  0DEE  2E0C               	goto	L60
 11132  0DEF                     l13376:	
 11133                           ;key.c: 342: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11134                           
 11135                           
 11136                           ;key.c: 348: if(FactoryTestData == 11)
 11137  0DEF  300B               	movlw	11
 11138  0DF0  0641               	xorwf	_FactoryTestData,w	;volatile
 11139  0DF1  1D03               	btfss	3,2
 11140  0DF2  2E71               	goto	l13400
 11141                           
 11142                           ;key.c: 349: {
 11143                           ;key.c: 350: FactoryTestData = 12;
 11144  0DF3  300C               	movlw	12
 11145  0DF4  2E0C               	goto	L60
 11146  0DF5                     l13380:	
 11147                           ;key.c: 351: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11148                           
 11149                           
 11150                           ;key.c: 357: if(FactoryTestData == 12)
 11151  0DF5  300C               	movlw	12
 11152  0DF6  0641               	xorwf	_FactoryTestData,w	;volatile
 11153  0DF7  1D03               	btfss	3,2
 11154  0DF8  2E71               	goto	l13400
 11155                           
 11156                           ;key.c: 358: {
 11157                           ;key.c: 359: FactoryTestData = 13;
 11158  0DF9  300D               	movlw	13
 11159  0DFA  2E0C               	goto	L60
 11160  0DFB                     l13384:	
 11161                           ;key.c: 360: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11162                           
 11163                           
 11164                           ;key.c: 366: if(FactoryTestData == 13)
 11165  0DFB  300D               	movlw	13
 11166  0DFC  0641               	xorwf	_FactoryTestData,w	;volatile
 11167  0DFD  1D03               	btfss	3,2
 11168  0DFE  2E71               	goto	l13400
 11169                           
 11170                           ;key.c: 367: {
 11171                           ;key.c: 368: FactoryTestData = 14;
 11172  0DFF  300E               	movlw	14
 11173  0E00  2E0C               	goto	L60
 11174  0E01                     l13388:	
 11175                           ;key.c: 369: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11176                           
 11177                           
 11178                           ;key.c: 375: if(FactoryTestData == 14)
 11179  0E01  300E               	movlw	14
 11180  0E02  0641               	xorwf	_FactoryTestData,w	;volatile
 11181  0E03  1D03               	btfss	3,2
 11182  0E04  2E71               	goto	l13400
 11183                           
 11184                           ;key.c: 376: {
 11185                           ;key.c: 377: FactoryTestData = 15;
 11186  0E05  300F               	movlw	15
 11187  0E06  2E0C               	goto	L60
 11188  0E07                     l13392:	
 11189                           ;key.c: 378: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11190                           
 11191                           
 11192                           ;key.c: 384: if(FactoryTestData == 15)
 11193  0E07  300F               	movlw	15
 11194  0E08  0641               	xorwf	_FactoryTestData,w	;volatile
 11195                           
 11196                           ;key.c: 385: {
 11197                           ;key.c: 386: FactoryTestData = 16;
 11198  0E09  3010               	movlw	16
 11199  0E0A  1D03               	btfss	3,2
 11200  0E0B  2E72               	goto	L61
 11201  0E0C                     L60:	
 11202  0E0C  00C1               	movwf	_FactoryTestData	;volatile
 11203                           
 11204                           ;key.c: 387: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11205  0E0D  3001               	movlw	1
 11206  0E0E                     L58:	
 11207  0E0E  2790  120A  158A   	fcall	PL8	;call to abstracted procedure
 11208  0E11  2E71               	goto	l13400
 11209  0E12                     l13398:	
 11210                           
 11211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
 11212                           ; Switch size 1, requested type "space"
 11213                           ; Number of cases is 9, Range of values is 0 to 128
 11214                           ; switch strategies available:
 11215                           ; Name         Instructions Cycles
 11216                           ; simple_byte           28    15 (average)
 11217                           ; jumptable            260     6 (fixed)
 11218                           ;	Chosen strategy is simple_byte
 11219  0E12  0828               	movf	_KeyData+1,w	;volatile
 11220  0E13  3A00               	xorlw	0	; case 0
 11221  0E14  1903               	skipnz
 11222  0E15  2E2F               	goto	l17518
 11223  0E16  3A01               	xorlw	1	; case 1
 11224  0E17  1903               	skipnz
 11225  0E18  2E49               	goto	l17520
 11226  0E19  3A03               	xorlw	3	; case 2
 11227  0E1A  1903               	skipnz
 11228  0E1B  2E4E               	goto	l17522
 11229  0E1C  3A06               	xorlw	6	; case 4
 11230  0E1D  1903               	skipnz
 11231  0E1E  2E53               	goto	l17524
 11232  0E1F  3A0C               	xorlw	12	; case 8
 11233  0E20  1903               	skipnz
 11234  0E21  2E58               	goto	l17526
 11235  0E22  3A18               	xorlw	24	; case 16
 11236  0E23  1903               	skipnz
 11237  0E24  2E5D               	goto	l17528
 11238  0E25  3A30               	xorlw	48	; case 32
 11239  0E26  1903               	skipnz
 11240  0E27  2E62               	goto	l17530
 11241  0E28  3A60               	xorlw	96	; case 64
 11242  0E29  1903               	skipnz
 11243  0E2A  2E67               	goto	l17532
 11244  0E2B  3AC0               	xorlw	192	; case 128
 11245  0E2C  1903               	skipnz
 11246  0E2D  2E6C               	goto	l17534
 11247  0E2E  2E71               	goto	l13400
 11248  0E2F                     l17518:	
 11249                           
 11250                           ; Switch size 1, requested type "space"
 11251                           ; Number of cases is 8, Range of values is 1 to 128
 11252                           ; switch strategies available:
 11253                           ; Name         Instructions Cycles
 11254                           ; simple_byte           25    13 (average)
 11255                           ; jumptable            263     9 (fixed)
 11256                           ;	Chosen strategy is simple_byte
 11257  0E2F  0827               	movf	_KeyData,w	;volatile
 11258  0E30  3A01               	xorlw	1	; case 1
 11259  0E31  1903               	skipnz
 11260  0E32  2DB5               	goto	l13336
 11261  0E33  3A03               	xorlw	3	; case 2
 11262  0E34  1903               	skipnz
 11263  0E35  2DBF               	goto	l13344
 11264  0E36  3A06               	xorlw	6	; case 4
 11265  0E37  1903               	skipnz
 11266  0E38  2DB9               	goto	l13340
 11267  0E39  3A0C               	xorlw	12	; case 8
 11268  0E3A  1903               	skipnz
 11269  0E3B  2DAF               	goto	l13332
 11270  0E3C  3A18               	xorlw	24	; case 16
 11271  0E3D  1903               	skipnz
 11272  0E3E  2DCB               	goto	l13352
 11273  0E3F  3A30               	xorlw	48	; case 32
 11274  0E40  1903               	skipnz
 11275  0E41  2DD7               	goto	l13360
 11276  0E42  3A60               	xorlw	96	; case 64
 11277  0E43  1903               	skipnz
 11278  0E44  2DD1               	goto	l13356
 11279  0E45  3AC0               	xorlw	192	; case 128
 11280  0E46  1903               	skipnz
 11281  0E47  2DC5               	goto	l13348
 11282  0E48  2E71               	goto	l13400
 11283  0E49                     l17520:	
 11284                           
 11285                           ; Switch size 1, requested type "space"
 11286                           ; Number of cases is 1, Range of values is 0 to 0
 11287                           ; switch strategies available:
 11288                           ; Name         Instructions Cycles
 11289                           ; simple_byte            4     3 (average)
 11290                           ; direct_byte           11     8 (fixed)
 11291                           ; jumptable            260     6 (fixed)
 11292                           ;	Chosen strategy is simple_byte
 11293  0E49  0827               	movf	_KeyData,w	;volatile
 11294  0E4A  3A00               	xorlw	0	; case 0
 11295  0E4B  1903               	skipnz
 11296  0E4C  2DE3               	goto	l13368
 11297  0E4D  2E71               	goto	l13400
 11298  0E4E                     l17522:	
 11299                           
 11300                           ; Switch size 1, requested type "space"
 11301                           ; Number of cases is 1, Range of values is 0 to 0
 11302                           ; switch strategies available:
 11303                           ; Name         Instructions Cycles
 11304                           ; simple_byte            4     3 (average)
 11305                           ; direct_byte           11     8 (fixed)
 11306                           ; jumptable            260     6 (fixed)
 11307                           ;	Chosen strategy is simple_byte
 11308  0E4E  0827               	movf	_KeyData,w	;volatile
 11309  0E4F  3A00               	xorlw	0	; case 0
 11310  0E50  1903               	skipnz
 11311  0E51  2DEF               	goto	l13376
 11312  0E52  2E71               	goto	l13400
 11313  0E53                     l17524:	
 11314                           
 11315                           ; Switch size 1, requested type "space"
 11316                           ; Number of cases is 1, Range of values is 0 to 0
 11317                           ; switch strategies available:
 11318                           ; Name         Instructions Cycles
 11319                           ; simple_byte            4     3 (average)
 11320                           ; direct_byte           11     8 (fixed)
 11321                           ; jumptable            260     6 (fixed)
 11322                           ;	Chosen strategy is simple_byte
 11323  0E53  0827               	movf	_KeyData,w	;volatile
 11324  0E54  3A00               	xorlw	0	; case 0
 11325  0E55  1903               	skipnz
 11326  0E56  2DE9               	goto	l13372
 11327  0E57  2E71               	goto	l13400
 11328  0E58                     l17526:	
 11329                           
 11330                           ; Switch size 1, requested type "space"
 11331                           ; Number of cases is 1, Range of values is 0 to 0
 11332                           ; switch strategies available:
 11333                           ; Name         Instructions Cycles
 11334                           ; simple_byte            4     3 (average)
 11335                           ; direct_byte           11     8 (fixed)
 11336                           ; jumptable            260     6 (fixed)
 11337                           ;	Chosen strategy is simple_byte
 11338  0E58  0827               	movf	_KeyData,w	;volatile
 11339  0E59  3A00               	xorlw	0	; case 0
 11340  0E5A  1903               	skipnz
 11341  0E5B  2DDD               	goto	l13364
 11342  0E5C  2E71               	goto	l13400
 11343  0E5D                     l17528:	
 11344                           
 11345                           ; Switch size 1, requested type "space"
 11346                           ; Number of cases is 1, Range of values is 0 to 0
 11347                           ; switch strategies available:
 11348                           ; Name         Instructions Cycles
 11349                           ; simple_byte            4     3 (average)
 11350                           ; direct_byte           11     8 (fixed)
 11351                           ; jumptable            260     6 (fixed)
 11352                           ;	Chosen strategy is simple_byte
 11353  0E5D  0827               	movf	_KeyData,w	;volatile
 11354  0E5E  3A00               	xorlw	0	; case 0
 11355  0E5F  1903               	skipnz
 11356  0E60  2DFB               	goto	l13384
 11357  0E61  2E71               	goto	l13400
 11358  0E62                     l17530:	
 11359                           
 11360                           ; Switch size 1, requested type "space"
 11361                           ; Number of cases is 1, Range of values is 0 to 0
 11362                           ; switch strategies available:
 11363                           ; Name         Instructions Cycles
 11364                           ; simple_byte            4     3 (average)
 11365                           ; direct_byte           11     8 (fixed)
 11366                           ; jumptable            260     6 (fixed)
 11367                           ;	Chosen strategy is simple_byte
 11368  0E62  0827               	movf	_KeyData,w	;volatile
 11369  0E63  3A00               	xorlw	0	; case 0
 11370  0E64  1903               	skipnz
 11371  0E65  2E07               	goto	l13392
 11372  0E66  2E71               	goto	l13400
 11373  0E67                     l17532:	
 11374                           
 11375                           ; Switch size 1, requested type "space"
 11376                           ; Number of cases is 1, Range of values is 0 to 0
 11377                           ; switch strategies available:
 11378                           ; Name         Instructions Cycles
 11379                           ; simple_byte            4     3 (average)
 11380                           ; direct_byte           11     8 (fixed)
 11381                           ; jumptable            260     6 (fixed)
 11382                           ;	Chosen strategy is simple_byte
 11383  0E67  0827               	movf	_KeyData,w	;volatile
 11384  0E68  3A00               	xorlw	0	; case 0
 11385  0E69  1903               	skipnz
 11386  0E6A  2DF5               	goto	l13380
 11387  0E6B  2E71               	goto	l13400
 11388  0E6C                     l17534:	
 11389                           
 11390                           ; Switch size 1, requested type "space"
 11391                           ; Number of cases is 1, Range of values is 0 to 0
 11392                           ; switch strategies available:
 11393                           ; Name         Instructions Cycles
 11394                           ; simple_byte            4     3 (average)
 11395                           ; direct_byte           11     8 (fixed)
 11396                           ; jumptable            260     6 (fixed)
 11397                           ;	Chosen strategy is simple_byte
 11398  0E6C  0827               	movf	_KeyData,w	;volatile
 11399  0E6D  3A00               	xorlw	0	; case 0
 11400  0E6E  1903               	skipnz
 11401  0E6F  2E01               	goto	l13388
 11402  0E70  2E71               	goto	l13400
 11403  0E71                     l13400:	
 11404                           
 11405                           ;key.c: 421: if(FactoryTestData == 16)
 11406  0E71  3010               	movlw	16
 11407  0E72                     L61:	
 11408  0E72  0641               	xorwf	_FactoryTestData,w	;volatile
 11409  0E73  1D03               	btfss	3,2
 11410  0E74  0008               	return
 11411                           
 11412                           ;key.c: 422: {
 11413                           ;key.c: 423: FactoryTestData = 19;
 11414  0E75  3013               	movlw	19
 11415  0E76  00C1               	movwf	_FactoryTestData	;volatile
 11416                           
 11417                           ;key.c: 424: WorkStep = 0;
 11418  0E77  01C2               	clrf	_WorkStep	;volatile
 11419                           
 11420                           ;key.c: 425: {{BuzCnt = 3; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11421  0E78  3003               	movlw	3
 11422  0E79  00D7               	movwf	_BuzCnt	;volatile
 11423  0E7A  3019               	movlw	25
 11424  0E7B  2DAE               	goto	L59
 11425  0E7C                     __end_of_Maink_Factory:	
 11426  0E7C                     __ptext34:	
 11427 ;; *************** function _Maink_Fast_Fun *****************
 11428 ;; Defined at:
 11429 ;;		line 160 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11438 ;; Tracked objects:
 11439 ;;		On entry : 200/0
 11440 ;;		On exit  : 300/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11443 ;;      Params:         0       0       0       0       0
 11444 ;;      Locals:         0       0       0       0       0
 11445 ;;      Temps:          0       1       0       0       0
 11446 ;;      Totals:         0       1       0       0       0
 11447 ;;Total ram usage:        1 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    2
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_Key_Task
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _Maink_Fast_Fun
 11459  0E7C                     _Maink_Fast_Fun:	
 11460  0E7C                     l15632:	
 11461                           ;incstack = 0
 11462                           ; Regs used in _Maink_Fast_Fun: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11463                           
 11464                           
 11465                           ;key.c: 162: if(SysStatus == 1 || SysStatus == 2)
 11466  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
 11467  0E7D  036A               	decf	_SysStatus,w	;volatile
 11468  0E7E  1903               	btfsc	3,2
 11469  0E7F  2E84               	goto	l15636
 11470  0E80  3002               	movlw	2
 11471  0E81  066A               	xorwf	_SysStatus,w	;volatile
 11472  0E82  1D03               	btfss	3,2
 11473  0E83  0008               	return
 11474  0E84                     l15636:	
 11475                           
 11476                           ;key.c: 163: {
 11477                           ;key.c: 165: if(PresetState == 0 || ChooseFun == 12 || ChooseFun == 14)
 11478  0E84  0839               	movf	_PresetState,w	;volatile
 11479  0E85  1903               	btfsc	3,2
 11480  0E86  2E8F               	goto	l15642
 11481  0E87  300C               	movlw	12
 11482  0E88  063C               	xorwf	_ChooseFun,w	;volatile
 11483  0E89  1903               	btfsc	3,2
 11484  0E8A  2E8F               	goto	l15642
 11485  0E8B  300E               	movlw	14
 11486  0E8C  063C               	xorwf	_ChooseFun,w	;volatile
 11487  0E8D  1D03               	btfss	3,2
 11488  0E8E  2E91               	goto	l15644
 11489  0E8F                     l15642:	
 11490                           
 11491                           ;key.c: 166: {
 11492                           ;key.c: 168: PresetTimeM = 0;
 11493  0E8F  01B5               	clrf	_PresetTimeM	;volatile
 11494                           
 11495                           ;key.c: 169: PresetTimeH = 0;
 11496  0E90  01B6               	clrf	_PresetTimeH	;volatile
 11497  0E91                     l15644:	
 11498                           
 11499                           ;key.c: 170: }
 11500                           ;key.c: 171: SysStatus = 2;
 11501  0E91  3002               	movlw	2
 11502  0E92  00EA               	movwf	_SysStatus	;volatile
 11503                           
 11504                           ;key.c: 173: PresetState = 1;
 11505  0E93  3001               	movlw	1
 11506  0E94  00B9               	movwf	_PresetState	;volatile
 11507                           
 11508                           ;key.c: 174: CountDownTime = TIME_TAB[ChooseFun][1];
 11509  0E95  083C               	movf	_ChooseFun,w	;volatile
 11510  0E96  00DA               	movwf	??_Maink_Fast_Fun
 11511  0E97  3001               	movlw	1
 11512  0E98  1003               	clrc
 11513  0E99                     L43:	
 11514  0E99  0DDA               	rlf	??_Maink_Fast_Fun,f
 11515  0E9A  3EFF               	addlw	-1
 11516  0E9B  1003               	clrc
 11517  0E9C  1D03               	skipz
 11518  0E9D  2E99               	goto	L43
 11519  0E9E  0D5A               	rlf	??_Maink_Fast_Fun,w
 11520  0E9F  3E01               	addlw	1
 11521  0EA0  3E08               	addlw	low (_TIME_TAB| (0+32768))
 11522  0EA1  0084               	movwf	4
 11523  0EA2  3099               	movlw	high (_TIME_TAB| (0+32768))
 11524  0EA3  1803               	skipnc
 11525  0EA4  3E01               	addlw	1
 11526  0EA5  00FF               	movwf	127
 11527  0EA6  160A  158A  2000  120A  158A  	fcall	stringtab
 11528  0EAB  00C0               	movwf	_CountDownTime	;volatile
 11529                           
 11530                           ;key.c: 176: b_LedCol = 1;
 11531  0EAC  16F0               	bsf	_b_LedCol/(0+8),_b_LedCol& (0+7)	;volatile
 11532                           
 11533                           ;key.c: 177: LedCol_500ms = 0;
 11534  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
 11535  0EAE  01CB               	clrf	_LedCol_500ms^(0+128)	;volatile
 11536                           
 11537                           ;key.c: 178: MainTime_500ms = 0;
 11538  0EAF  01C9               	clrf	_MainTime_500ms^(0+128)	;volatile
 11539                           
 11540                           ;key.c: 179: Led_Step_100C = 0;
 11541  0EB0  01CD               	clrf	_Led_Step_100C^(0+128)	;volatile
 11542                           
 11543                           ;key.c: 180: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11544  0EB1  3001               	movlw	1
 11545  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
 11546  0EB3  00D7               	movwf	_BuzCnt	;volatile
 11547  0EB4  300C               	movlw	12
 11548  0EB5  2F88               	ljmp	PL2	;call to abstracted procedure
 11549  0EB6                     __end_of_Maink_Fast_Fun:	
 11550  0EB6                     __ptext33:	
 11551 ;; *************** function _Maink_Test *****************
 11552 ;; Defined at:
 11553 ;;		line 187 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\key.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  1    wreg      void 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0
 11562 ;; Tracked objects:
 11563 ;;		On entry : 300/100
 11564 ;;		On exit  : 300/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11567 ;;      Params:         0       0       0       0       0
 11568 ;;      Locals:         0       0       0       0       0
 11569 ;;      Temps:          0       0       0       0       0
 11570 ;;      Totals:         0       0       0       0       0
 11571 ;;Total ram usage:        0 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    2
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_Key_Task
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _Maink_Test
 11583  0EB6                     _Maink_Test:	
 11584  0EB6                     l13272:	
 11585                           ;incstack = 0
 11586                           ; Regs used in _Maink_Test: [wreg+status,2+status,0]
 11587                           
 11588                           
 11589                           ;key.c: 190: if(KeyData == 0x1000)
 11590  0EB6  3010               	movlw	16
 11591  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
 11592  0EB8  0628               	xorwf	_KeyData+1,w	;volatile
 11593  0EB9  0427               	iorwf	_KeyData,w	;volatile
 11594  0EBA  1D03               	btfss	3,2
 11595  0EBB  2EC1               	goto	l13280
 11596                           
 11597                           ;key.c: 191: {
 11598                           ;key.c: 192: b_TestShow = 0;
 11599  0EBC  11F0               	bcf	_b_TestShow/(0+8),_b_TestShow& (0+7)	;volatile
 11600                           
 11601                           ;key.c: 193: {{BuzCnt = 1; BuzUpTime = 75/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11602  0EBD  3001               	movlw	1
 11603  0EBE  00D7               	movwf	_BuzCnt	;volatile
 11604  0EBF  3025               	movlw	37
 11605                           
 11606                           ;key.c: 194: return;
 11607  0EC0  2F88               	ljmp	PL2	;call to abstracted procedure
 11608  0EC1                     l13280:	
 11609                           
 11610                           ;key.c: 195: }
 11611                           ;key.c: 198: if(KeyData == 0x4000)
 11612  0EC1  3040               	movlw	64
 11613  0EC2  0628               	xorwf	_KeyData+1,w	;volatile
 11614  0EC3  0427               	iorwf	_KeyData,w	;volatile
 11615  0EC4  1D03               	btfss	3,2
 11616  0EC5  2ECF               	goto	l13290
 11617                           
 11618                           ;key.c: 199: {
 11619                           ;key.c: 200: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11620  0EC6  3001               	movlw	1
 11621  0EC7  2790               	fcall	PL8	;call to abstracted procedure
 11622                           
 11623                           ;key.c: 201: if(++TestShow >= (2 + 1))
 11624  0EC8  3003               	movlw	3
 11625  0EC9  0AB1               	incf	_TestShow,f	;volatile
 11626  0ECA  0231               	subwf	_TestShow,w	;volatile
 11627  0ECB  1803               	btfsc	3,0
 11628                           
 11629                           ;key.c: 202: {
 11630                           ;key.c: 203: TestShow = 0;
 11631  0ECC  01B1               	clrf	_TestShow	;volatile
 11632  0ECD                     l5824:	
 11633                           
 11634                           ;key.c: 204: }
 11635                           ;key.c: 205: SendShow = 0;
 11636  0ECD  01B0               	clrf	_SendShow	;volatile
 11637  0ECE  0008               	return
 11638  0ECF                     l13290:	
 11639                           
 11640                           ;key.c: 207: }
 11641                           ;key.c: 210: if(KeyData == 0x8000)
 11642  0ECF  3080               	movlw	128
 11643  0ED0  0628               	xorwf	_KeyData+1,w	;volatile
 11644  0ED1  0427               	iorwf	_KeyData,w	;volatile
 11645  0ED2  1D03               	btfss	3,2
 11646  0ED3  0008               	return
 11647                           
 11648                           ;key.c: 211: {
 11649                           ;key.c: 212: {{BuzCnt = 1; BuzUpTime = 25/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime;
      +                           BuzDownTemp = BuzDownTime;};};
 11650  0ED4  3001               	movlw	1
 11651  0ED5  2790  120A  158A   	fcall	PL8	;call to abstracted procedure
 11652                           
 11653                           ;key.c: 213: if(TestShow == 0)
 11654  0ED8  0831               	movf	_TestShow,w	;volatile
 11655  0ED9  1D03               	btfss	3,2
 11656  0EDA  2EE3               	goto	l13300
 11657                           
 11658                           ;key.c: 214: {
 11659                           ;key.c: 215: if(++SendShow > 8)
 11660  0EDB  3009               	movlw	9
 11661  0EDC  0AB0               	incf	_SendShow,f	;volatile
 11662  0EDD  0230               	subwf	_SendShow,w	;volatile
 11663  0EDE  1C03               	skipc
 11664  0EDF  0008               	return
 11665                           
 11666                           ;key.c: 216: {
 11667                           ;key.c: 217: SendShow = 1;
 11668  0EE0  3001               	movlw	1
 11669  0EE1  00B0               	movwf	_SendShow	;volatile
 11670  0EE2  0008               	return
 11671  0EE3                     l13300:	
 11672                           
 11673                           ;key.c: 220: else if(TestShow == 1)
 11674  0EE3  0B31               	decfsz	_TestShow,w	;volatile
 11675  0EE4  0008               	return
 11676                           
 11677                           ;key.c: 221: {
 11678                           ;key.c: 222: if(++SendShow >= 3)
 11679  0EE5  3003               	movlw	3
 11680  0EE6  0AB0               	incf	_SendShow,f	;volatile
 11681  0EE7  0230               	subwf	_SendShow,w	;volatile
 11682  0EE8  1C03               	skipc
 11683  0EE9  0008               	return
 11684  0EEA  2ECD               	goto	l5824
 11685  0EEB                     __end_of_Maink_Test:	
 11686  0EEB                     __ptext8:	
 11687 ;; *************** function _ErrorTimeStart *****************
 11688 ;; Defined at:
 11689 ;;		line 53 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
 11690 ;; Parameters:    Size  Location     Type
 11691 ;;		None
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;		None
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      void 
 11696 ;; Registers used:
 11697 ;;		wreg, status,2, status,0
 11698 ;; Tracked objects:
 11699 ;;		On entry : 200/0
 11700 ;;		On exit  : 200/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11703 ;;      Params:         0       0       0       0       0
 11704 ;;      Locals:         0       0       0       0       0
 11705 ;;      Temps:          0       0       0       0       0
 11706 ;;      Totals:         0       0       0       0       0
 11707 ;;Total ram usage:        0 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    2
 11710 ;; This function calls:
 11711 ;;		Nothing
 11712 ;; This function is called by:
 11713 ;;		_Time_Deal
 11714 ;; This function uses a non-reentrant model
 11715 ;;
 11716                           
 11717                           
 11718                           ;psect for function _ErrorTimeStart
 11719  0EEB                     _ErrorTimeStart:	
 11720                           
 11721                           ;time.c: 55: if((ErrorCode != 0 || b_BotTempOut))
 11722                           
 11723                           ;incstack = 0
 11724                           ; Regs used in _ErrorTimeStart: [wreg+status,2+status,0]
 11725  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
 11726  0EEC  0858               	movf	_ErrorCode,w	;volatile
 11727  0EED  1D03               	btfss	3,2
 11728  0EEE  2EF1               	goto	l13574
 11729  0EEF  1D71               	btfss	_b_BotTempOut/(0+8),_b_BotTempOut& (0+7)	;volatile
 11730  0EF0  2EFF               	goto	l13588
 11731  0EF1                     l13574:	
 11732                           
 11733                           ;time.c: 56: {
 11734                           ;time.c: 57: if(++ErrorSoundTime >= 6)
 11735  0EF1  3006               	movlw	6
 11736  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
 11737  0EF3  0ABF               	incf	_ErrorSoundTime^(0+128),f	;volatile
 11738  0EF4  023F               	subwf	_ErrorSoundTime^(0+128),w	;volatile
 11739  0EF5  1C03               	skipc
 11740  0EF6  0008               	return
 11741                           
 11742                           ;time.c: 58: {
 11743                           ;time.c: 59: ErrorSoundTime = 0;
 11744  0EF7  01BF               	clrf	_ErrorSoundTime^(0+128)	;volatile
 11745                           
 11746                           ;time.c: 60: {{BuzCnt = 3; BuzUpTime = 25/2; BuzDownTime = 50/2; BuzUpTemp = BuzUpTime; 
      +                          BuzDownTemp = BuzDownTime;};};
 11747  0EF8  3003               	movlw	3
 11748  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
 11749  0EFA  00D7               	movwf	_BuzCnt	;volatile
 11750  0EFB  300C               	movlw	12
 11751  0EFC  00D6               	movwf	_BuzUpTime	;volatile
 11752  0EFD  3019               	movlw	25
 11753  0EFE  2FD5               	ljmp	PL14	;call to abstracted procedure
 11754  0EFF                     l13588:	
 11755                           
 11756                           ;time.c: 63: else
 11757                           ;time.c: 64: {
 11758                           ;time.c: 65: ErrorSoundTime = 0;
 11759  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
 11760  0F00  01BF               	clrf	_ErrorSoundTime^(0+128)	;volatile
 11761  0F01  0008               	return
 11762  0F02                     __end_of_ErrorTimeStart:	
 11763  0F02                     __ptext5:	
 11764 ;; *************** function _Relay_Duty_Control *****************
 11765 ;; Defined at:
 11766 ;;		line 734 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;		None
 11771 ;; Return value:  Size  Location     Type
 11772 ;;                  1    wreg      void 
 11773 ;; Registers used:
 11774 ;;		wreg, status,2, status,0
 11775 ;; Tracked objects:
 11776 ;;		On entry : 200/0
 11777 ;;		On exit  : 300/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11780 ;;      Params:         0       0       0       0       0
 11781 ;;      Locals:         0       0       0       0       0
 11782 ;;      Temps:          0       2       0       0       0
 11783 ;;      Totals:         0       2       0       0       0
 11784 ;;Total ram usage:        2 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; Hardware stack levels required when called:    2
 11787 ;; This function calls:
 11788 ;;		Nothing
 11789 ;; This function is called by:
 11790 ;;		_Time_Deal
 11791 ;; This function uses a non-reentrant model
 11792 ;;
 11793                           
 11794                           
 11795                           ;psect for function _Relay_Duty_Control
 11796  0F02                     _Relay_Duty_Control:	
 11797                           
 11798                           ;cook.c: 737: if(b_BotHeatOn == 1)
 11799                           
 11800                           ;incstack = 0
 11801                           ; Regs used in _Relay_Duty_Control: [wreg+status,2+status,0]
 11802  0F02  1EF1               	btfss	_b_BotHeatOn/(0+8),_b_BotHeatOn& (0+7)	;volatile
 11803  0F03  2F40               	goto	l2084
 11804                           
 11805                           ;cook.c: 738: {
 11806                           ;cook.c: 740: if(RC1 == 0 && b_ZeroTimeout == 0 && b_Zero == 0 && RelWaitCnt >= 4000)
 11807  0F04  1283               	bcf	3,5	;RP0=0, select bank0
 11808  0F05  2F31               	goto	L2
 11809  0F06                     l12740:	
 11810                           
 11811                           ;cook.c: 750: {
 11812                           ;cook.c: 751: HeatCnt500ms++;
 11813  0F06  1283               	bcf	3,5	;RP0=0, select bank0
 11814  0F07  0AC5               	incf	_HeatCnt500ms,f	;volatile
 11815                           
 11816                           ;cook.c: 752: if(HeatCnt500ms < RelOffCnt)
 11817  0F08  0846               	movf	_RelOffCnt,w	;volatile
 11818  0F09  0245               	subwf	_HeatCnt500ms,w	;volatile
 11819  0F0A  1803               	skipnc
 11820  0F0B  2F1F               	goto	l12754
 11821  0F0C  2F10               	goto	L1
 11822  0F0D                     l12756:	
 11823                           ;cook.c: 753: {
 11824                           ;cook.c: 754: if(RC1 == 1 && b_ZeroTimeout == 0 && b_Zero == 0 && RelWaitCnt >= 4000)
 11825                           
 11826                           
 11827                           ;cook.c: 763: {
 11828                           ;cook.c: 764: HeatCnt500ms = 0;
 11829  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
 11830  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
 11831  0F0F  01C5               	clrf	_HeatCnt500ms	;volatile
 11832  0F10                     L1:	
 11833                           
 11834                           ;cook.c: 765: if(RC1 == 1 && b_ZeroTimeout == 0 && b_Zero == 0 && RelWaitCnt >= 4000)
 11835  0F10  1887               	btfsc	7,1	;volatile
 11836  0F11  1972               	btfsc	_b_ZeroTimeout/(0+8),_b_ZeroTimeout& (0+7)	;volatile
 11837  0F12  0008               	return
 11838  0F13  1872               	btfsc	_b_Zero/(0+8),_b_Zero& (0+7)	;volatile
 11839  0F14  0008               	return
 11840  0F15  300F               	movlw	15
 11841  0F16  027A               	subwf	_RelWaitCnt+1,w	;volatile
 11842  0F17  30A0               	movlw	160
 11843  0F18  1903               	skipnz
 11844  0F19  0279               	subwf	_RelWaitCnt,w	;volatile
 11845  0F1A  1C03               	skipc
 11846  0F1B  0008               	return
 11847                           
 11848                           ;cook.c: 755: {
 11849                           ;cook.c: 756: b_Zero_EN = 1;
 11850  0F1C  15F2               	bsf	_b_Zero_EN/(0+8),_b_Zero_EN& (0+7)	;volatile
 11851                           
 11852                           ;cook.c: 757: b_RelType = 0;
 11853  0F1D  1071               	bcf	_b_RelType/(0+8),_b_RelType& (0+7)	;volatile
 11854  0F1E  0008               	return
 11855  0F1F                     l12754:	
 11856                           
 11857                           ;cook.c: 760: else
 11858                           ;cook.c: 761: {
 11859                           ;cook.c: 762: if(HeatCnt500ms >= (RelOffCnt + RelOnCnt))
 11860  0F1F  0846               	movf	_RelOffCnt,w	;volatile
 11861  0F20  1683               	bsf	3,5	;RP0=1, select bank1
 11862  0F21  074E               	addwf	_RelOnCnt^(0+128),w	;volatile
 11863  0F22  1283               	bcf	3,5	;RP0=0, select bank0
 11864  0F23  00DA               	movwf	??_Relay_Duty_Control
 11865  0F24  01DB               	clrf	??_Relay_Duty_Control+1
 11866  0F25  0DDB               	rlf	??_Relay_Duty_Control+1,f
 11867  0F26  085B               	movf	??_Relay_Duty_Control+1,w
 11868  0F27  3A80               	xorlw	128
 11869  0F28  3C80               	sublw	128
 11870  0F29  1D03               	skipz
 11871  0F2A  2F2D               	goto	u2865
 11872  0F2B  085A               	movf	??_Relay_Duty_Control,w
 11873  0F2C  0245               	subwf	_HeatCnt500ms,w	;volatile
 11874  0F2D                     u2865:	
 11875  0F2D  1803               	btfsc	3,0
 11876  0F2E  2F0D               	goto	l12756
 11877                           
 11878                           ;cook.c: 772: else
 11879                           ;cook.c: 773: {
 11880                           ;cook.c: 774: if(RC1 == 0 && b_ZeroTimeout == 0 && b_Zero == 0 && RelWaitCnt >= 4000)
 11881  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
 11882  0F30  1303               	bcf	3,6	;RP1=0, select bank0
 11883  0F31                     L2:	
 11884  0F31  1C87               	btfss	7,1	;volatile
 11885  0F32  1972               	btfsc	_b_ZeroTimeout/(0+8),_b_ZeroTimeout& (0+7)	;volatile
 11886  0F33  0008               	return
 11887  0F34  1872               	btfsc	_b_Zero/(0+8),_b_Zero& (0+7)	;volatile
 11888  0F35  0008               	return
 11889  0F36  300F               	movlw	15
 11890  0F37  027A               	subwf	_RelWaitCnt+1,w	;volatile
 11891  0F38  30A0               	movlw	160
 11892  0F39  1903               	skipnz
 11893  0F3A  0279               	subwf	_RelWaitCnt,w	;volatile
 11894  0F3B  1C03               	skipc
 11895  0F3C  0008               	return
 11896                           
 11897                           ;cook.c: 741: {
 11898                           ;cook.c: 742: b_Zero_EN = 1;
 11899  0F3D  15F2               	bsf	_b_Zero_EN/(0+8),_b_Zero_EN& (0+7)	;volatile
 11900                           
 11901                           ;cook.c: 743: b_RelType = 1;
 11902  0F3E  1471               	bsf	_b_RelType/(0+8),_b_RelType& (0+7)	;volatile
 11903                           
 11904                           ;cook.c: 744: }
 11905                           ;cook.c: 745: }
 11906  0F3F  0008               	return
 11907  0F40                     l2084:	
 11908                           
 11909                           ;cook.c: 746: else
 11910                           ;cook.c: 747: {
 11911                           ;cook.c: 749: if(b_BotHeatEn == 1)
 11912  0F40  1B71               	btfsc	_b_BotHeatEn/(0+8),_b_BotHeatEn& (0+7)	;volatile
 11913  0F41  2F06               	goto	l12740
 11914                           
 11915                           ;cook.c: 782: else
 11916                           ;cook.c: 783: {
 11917                           ;cook.c: 784: HeatCnt500ms = 0;
 11918  0F42  1283               	bcf	3,5	;RP0=0, select bank0
 11919  0F43  01C5               	clrf	_HeatCnt500ms	;volatile
 11920                           
 11921                           ;cook.c: 786: if(RC1 == 1 && b_PressureOn == 1 && RelWaitCnt >= 4000)
 11922  0F44  1887               	btfsc	7,1	;volatile
 11923  0F45  1EF2               	btfss	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
 11924  0F46  2F10               	goto	L1
 11925  0F47  300F               	movlw	15
 11926  0F48  027A               	subwf	_RelWaitCnt+1,w	;volatile
 11927  0F49  30A0               	movlw	160
 11928  0F4A  1903               	skipnz
 11929  0F4B  0279               	subwf	_RelWaitCnt,w	;volatile
 11930  0F4C  1C03               	skipc
 11931  0F4D  2F10               	goto	L1
 11932                           
 11933                           ;cook.c: 787: {
 11934                           ;cook.c: 788: b_Rel_NoZero = 1;
 11935  0F4E  17F0               	bsf	_b_Rel_NoZero/(0+8),_b_Rel_NoZero& (0+7)	;volatile
 11936                           
 11937                           ;cook.c: 789: }
 11938  0F4F  0008               	return
 11939  0F50                     __end_of_Relay_Duty_Control:	
 11940                           ;cook.c: 790: else if(RC1 == 1 && b_ZeroTimeout == 0 && b_Zero == 0 && RelWaitCnt >= 400
      +                          0)
 11941                           
 11942  0F50                     __ptext4:	
 11943 ;; *************** function _ShortTime *****************
 11944 ;; Defined at:
 11945 ;;		line 237 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;		None
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;		None
 11950 ;; Return value:  Size  Location     Type
 11951 ;;                  1    wreg      void 
 11952 ;; Registers used:
 11953 ;;		wreg, status,2, status,0
 11954 ;; Tracked objects:
 11955 ;;		On entry : 300/0
 11956 ;;		On exit  : 300/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11959 ;;      Params:         0       0       0       0       0
 11960 ;;      Locals:         0       0       0       0       0
 11961 ;;      Temps:          0       0       0       0       0
 11962 ;;      Totals:         0       0       0       0       0
 11963 ;;Total ram usage:        0 bytes
 11964 ;; Hardware stack levels used:    1
 11965 ;; Hardware stack levels required when called:    2
 11966 ;; This function calls:
 11967 ;;		Nothing
 11968 ;; This function is called by:
 11969 ;;		_Time_Deal
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973                           
 11974                           ;psect for function _ShortTime
 11975  0F50                     _ShortTime:	
 11976                           
 11977                           ;time.c: 239: if (!b_ShortOn) return;
 11978                           
 11979                           ;incstack = 0
 11980                           ; Regs used in _ShortTime: [wreg+status,2+status,0]
 11981  0F50  1E71               	btfss	_b_ShortOn/(0+8),_b_ShortOn& (0+7)	;volatile
 11982  0F51  0008               	return
 11983                           
 11984                           ;time.c: 240: if (++ShortCntL >= 120)
 11985  0F52  3078               	movlw	120
 11986  0F53  0AC4               	incf	_ShortCntL,f	;volatile
 11987  0F54  0244               	subwf	_ShortCntL,w	;volatile
 11988  0F55  1C03               	skipc
 11989  0F56  0008               	return
 11990                           
 11991                           ;time.c: 241: {
 11992                           ;time.c: 242: ShortCntL = 0;
 11993  0F57  01C4               	clrf	_ShortCntL	;volatile
 11994                           
 11995                           ;time.c: 243: if (++ShortCntM >= 240) ShortCntM = 240;
 11996  0F58  30F0               	movlw	240
 11997  0F59  0AC3               	incf	_ShortCntM,f	;volatile
 11998  0F5A  0243               	subwf	_ShortCntM,w	;volatile
 11999  0F5B  1C03               	skipc
 12000  0F5C  0008               	return
 12001  0F5D  30F0               	movlw	240
 12002  0F5E  00C3               	movwf	_ShortCntM	;volatile
 12003  0F5F  0008               	return
 12004  0F60                     __end_of_ShortTime:	
 12005  0F60                     __ptext3:	
 12006 ;; *************** function _StandbyTimeStart *****************
 12007 ;; Defined at:
 12008 ;;		line 9 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;		None
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;		None
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  1    wreg      void 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0, pclath, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 200/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12022 ;;      Params:         0       0       0       0       0
 12023 ;;      Locals:         0       0       0       0       0
 12024 ;;      Temps:          0       0       0       0       0
 12025 ;;      Totals:         0       0       0       0       0
 12026 ;;Total ram usage:        0 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    3
 12029 ;; This function calls:
 12030 ;;		_Cancel
 12031 ;; This function is called by:
 12032 ;;		_Time_Deal
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           
 12037                           ;psect for function _StandbyTimeStart
 12038  0F60                     _StandbyTimeStart:	
 12039                           
 12040                           ;time.c: 11: if((SysStatus == 5 && (FactoryTestData < 19||b_Auto_test == 1)))
 12041                           
 12042                           ;incstack = 0
 12043                           ; Regs used in _StandbyTimeStart: [wreg+status,2+status,0+pclath+cstack]
 12044  0F60  3005               	movlw	5
 12045  0F61  1283               	bcf	3,5	;RP0=0, select bank0
 12046  0F62  1303               	bcf	3,6	;RP1=0, select bank0
 12047  0F63  066A               	xorwf	_SysStatus,w	;volatile
 12048  0F64  1D03               	btfss	3,2
 12049  0F65  2F78               	goto	l13556
 12050  0F66  3013               	movlw	19
 12051  0F67  0241               	subwf	_FactoryTestData,w	;volatile
 12052  0F68  1C03               	skipc
 12053  0F69  2F6C               	goto	l13546
 12054  0F6A  1DF1               	btfss	_b_Auto_test/(0+8),_b_Auto_test& (0+7)	;volatile
 12055  0F6B  2F78               	goto	l13556
 12056  0F6C                     l13546:	
 12057                           
 12058                           ;time.c: 12: {
 12059                           ;time.c: 14: if(KeyFlag == 0x00)
 12060  0F6C  082D               	movf	_KeyFlag,w	;volatile
 12061  0F6D  1D03               	btfss	3,2
 12062  0F6E  2F76               	goto	l13554
 12063                           
 12064                           ;time.c: 15: {
 12065                           ;time.c: 16: if(++StandbyTimeCnt >= 60)
 12066  0F6F  303C               	movlw	60
 12067  0F70  0AD9               	incf	_StandbyTimeCnt,f	;volatile
 12068  0F71  0259               	subwf	_StandbyTimeCnt,w	;volatile
 12069  0F72  1C03               	skipc
 12070  0F73  0008               	return
 12071                           
 12072                           ;time.c: 17: {
 12073                           ;time.c: 18: StandbyTimeCnt = 0;
 12074  0F74  01D9               	clrf	_StandbyTimeCnt	;volatile
 12075                           
 12076                           ;time.c: 19: Cancel();
 12077  0F75  2D77               	ljmp	l12078
 12078  0F76                     l13554:	
 12079                           
 12080                           ;time.c: 22: else
 12081                           ;time.c: 23: {
 12082                           ;time.c: 24: StandbyTimeCnt = 0;
 12083  0F76  01D9               	clrf	_StandbyTimeCnt	;volatile
 12084  0F77  0008               	return
 12085  0F78                     l13556:	
 12086                           
 12087                           ;time.c: 27: else if(SysStatus == 1)
 12088  0F78  0B6A               	decfsz	_SysStatus,w	;volatile
 12089  0F79  0008               	return
 12090                           
 12091                           ;time.c: 28: {
 12092                           ;time.c: 30: if(KeyFlag == 0x00)
 12093  0F7A  082D               	movf	_KeyFlag,w	;volatile
 12094  0F7B  1D03               	btfss	3,2
 12095  0F7C  2F85               	goto	l13566
 12096                           
 12097                           ;time.c: 31: {
 12098                           ;time.c: 32: if((++StandbyTimeCnt) >= 240)
 12099  0F7D  30F0               	movlw	240
 12100  0F7E  0AD9               	incf	_StandbyTimeCnt,f	;volatile
 12101  0F7F  0259               	subwf	_StandbyTimeCnt,w	;volatile
 12102  0F80  1C03               	skipc
 12103  0F81  0008               	return
 12104                           
 12105                           ;time.c: 33: {
 12106                           ;time.c: 34: StandbyTimeCnt = 0;
 12107  0F82  01D9               	clrf	_StandbyTimeCnt	;volatile
 12108                           
 12109                           ;time.c: 35: b_Standby = 1;
 12110  0F83  1772               	bsf	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 12111  0F84  0008               	return
 12112  0F85                     l13566:	
 12113                           
 12114                           ;time.c: 38: else
 12115                           ;time.c: 39: {
 12116                           ;time.c: 40: StandbyTimeCnt = 0;
 12117  0F85  01D9               	clrf	_StandbyTimeCnt	;volatile
 12118                           
 12119                           ;time.c: 41: b_Standby = 0;
 12120  0F86  1372               	bcf	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 12121  0F87  0008               	return
 12122  0F88                     __end_of_StandbyTimeStart:	
 12123  0F88                     PL2:	
 12124  0F88  00D6               	movwf	_BuzUpTime	;volatile
 12125  0F89  307D               	movlw	125
 12126  0F8A  00D5               	movwf	_BuzDownTime	;volatile
 12127  0F8B  0856               	movf	_BuzUpTime,w	;volatile
 12128  0F8C  00D4               	movwf	_BuzUpTemp	;volatile
 12129  0F8D  0855               	movf	_BuzDownTime,w	;volatile
 12130  0F8E  00D3               	movwf	_BuzDownTemp	;volatile
 12131  0F8F  0008               	return
 12132  0F90                     __end_ofPL2:	
 12133  0F90                     PL8:	
 12134  0F90  00D7               	movwf	_BuzCnt	;volatile
 12135  0F91  300C               	movlw	12
 12136  0F92  00D6               	movwf	_BuzUpTime	;volatile
 12137  0F93  307D               	movlw	125
 12138  0F94  00D5               	movwf	_BuzDownTime	;volatile
 12139  0F95  0856               	movf	_BuzUpTime,w	;volatile
 12140  0F96  00D4               	movwf	_BuzUpTemp	;volatile
 12141  0F97  0855               	movf	_BuzDownTime,w	;volatile
 12142  0F98  00D3               	movwf	_BuzDownTemp	;volatile
 12143  0F99  0008               	return
 12144  0F9A                     __end_ofPL8:	
 12145  0F9A                     PL10:	
 12146  0F9A  307D               	movlw	125
 12147  0F9B  00D5               	movwf	_BuzDownTime	;volatile
 12148  0F9C  0856               	movf	_BuzUpTime,w	;volatile
 12149  0F9D  00D4               	movwf	_BuzUpTemp	;volatile
 12150  0F9E  0855               	movf	_BuzDownTime,w	;volatile
 12151  0F9F  00D3               	movwf	_BuzDownTemp	;volatile
 12152  0FA0  0008               	return
 12153  0FA1                     __end_ofPL10:	
 12154  0FA1                     __ptext48:	
 12155 ;; *************** function _Get_Lid_Data *****************
 12156 ;; Defined at:
 12157 ;;		line 42 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;		None
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0
 12166 ;; Tracked objects:
 12167 ;;		On entry : 200/0
 12168 ;;		On exit  : 300/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12171 ;;      Params:         0       0       0       0       0
 12172 ;;      Locals:         0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0
 12174 ;;      Totals:         0       0       0       0       0
 12175 ;;Total ram usage:        0 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    2
 12178 ;; This function calls:
 12179 ;;		Nothing
 12180 ;; This function is called by:
 12181 ;;		_main
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function _Get_Lid_Data
 12187  0FA1                     _Get_Lid_Data:	
 12188                           
 12189                           ;adc.c: 44: static v_uint8 s_lidcount = 0;
 12190                           ;adc.c: 47: if(b_LidClosed == 0)
 12191                           
 12192                           ;incstack = 0
 12193                           ; Regs used in _Get_Lid_Data: [wreg+status,2+status,0]
 12194  0FA1  1BF2               	btfsc	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
 12195  0FA2  2FBC               	goto	l857
 12196                           
 12197                           ;adc.c: 48: {
 12198                           ;adc.c: 49: if(RC0 == 1)
 12199  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
 12200  0FA4  1C07               	btfss	7,0	;volatile
 12201  0FA5  2FBA               	goto	l13838
 12202                           
 12203                           ;adc.c: 50: {
 12204                           ;adc.c: 51: if(++s_lidcount >= 25)
 12205  0FA6  3019               	movlw	25
 12206  0FA7  0ACD               	incf	Get_Lid_Data@s_lidcount,f	;volatile
 12207  0FA8  024D               	subwf	Get_Lid_Data@s_lidcount,w	;volatile
 12208  0FA9  1C03               	skipc
 12209  0FAA  0008               	return
 12210                           
 12211                           ;adc.c: 52: {
 12212                           ;adc.c: 53: s_lidcount = 0;
 12213  0FAB  01CD               	clrf	Get_Lid_Data@s_lidcount	;volatile
 12214                           
 12215                           ;adc.c: 54: b_LidClosed = 1;
 12216  0FAC  17F2               	bsf	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
 12217                           
 12218                           ;adc.c: 56: b_Standby = 0;
 12219  0FAD  1372               	bcf	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 12220                           
 12221                           ;adc.c: 57: StandbyTimeCnt = 0;
 12222  0FAE  01D9               	clrf	_StandbyTimeCnt	;volatile
 12223                           
 12224                           ;adc.c: 58: if(ErrorCode == 0 && SysStatus != 6)
 12225  0FAF  0858               	movf	_ErrorCode,w	;volatile
 12226  0FB0  1D03               	btfss	3,2
 12227  0FB1  0008               	return
 12228  0FB2  3006               	movlw	6
 12229  0FB3  066A               	xorwf	_SysStatus,w	;volatile
 12230  0FB4  1903               	btfsc	3,2
 12231  0FB5  0008               	return
 12232                           
 12233                           ;adc.c: 59: {
 12234                           ;adc.c: 60: {{BuzCnt = 1; BuzUpTime = 50/2; BuzDownTime = 250/2; BuzUpTemp = BuzUpTime; 
      +                          BuzDownTemp = BuzDownTime;};};
 12235  0FB6  3001               	movlw	1
 12236  0FB7  00D7               	movwf	_BuzCnt	;volatile
 12237  0FB8  3019               	movlw	25
 12238  0FB9  2F88               	ljmp	PL2	;call to abstracted procedure
 12239  0FBA                     l13838:	
 12240                           
 12241                           ;adc.c: 64: else
 12242                           ;adc.c: 65: {
 12243                           ;adc.c: 66: s_lidcount = 0;
 12244  0FBA  01CD               	clrf	Get_Lid_Data@s_lidcount	;volatile
 12245                           
 12246                           ;adc.c: 67: }
 12247                           ;adc.c: 68: }
 12248  0FBB  0008               	return
 12249  0FBC                     l857:	
 12250                           
 12251                           ;adc.c: 69: else
 12252                           ;adc.c: 70: {
 12253                           ;adc.c: 71: if(RC0 == 0)
 12254  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
 12255  0FBD  1807               	btfsc	7,0	;volatile
 12256  0FBE  2FBA               	goto	l13838
 12257                           
 12258                           ;adc.c: 72: {
 12259                           ;adc.c: 73: if(++s_lidcount >= 25)
 12260  0FBF  3019               	movlw	25
 12261  0FC0  0ACD               	incf	Get_Lid_Data@s_lidcount,f	;volatile
 12262  0FC1  024D               	subwf	Get_Lid_Data@s_lidcount,w	;volatile
 12263  0FC2  1C03               	skipc
 12264  0FC3  0008               	return
 12265                           
 12266                           ;adc.c: 74: {
 12267                           ;adc.c: 75: s_lidcount = 0;
 12268  0FC4  01CD               	clrf	Get_Lid_Data@s_lidcount	;volatile
 12269                           
 12270                           ;adc.c: 76: b_LidClosed = 0;
 12271  0FC5  13F2               	bcf	_b_LidClosed/(0+8),_b_LidClosed& (0+7)	;volatile
 12272                           
 12273                           ;adc.c: 78: b_Standby = 0;
 12274  0FC6  1372               	bcf	_b_Standby/(0+8),_b_Standby& (0+7)	;volatile
 12275                           
 12276                           ;adc.c: 79: StandbyTimeCnt = 0;
 12277  0FC7  01D9               	clrf	_StandbyTimeCnt	;volatile
 12278                           
 12279                           ;adc.c: 80: if(ErrorCode == 0 && SysStatus != 6)
 12280  0FC8  0858               	movf	_ErrorCode,w	;volatile
 12281  0FC9  1D03               	btfss	3,2
 12282  0FCA  0008               	return
 12283  0FCB  3006               	movlw	6
 12284  0FCC  066A               	xorwf	_SysStatus,w	;volatile
 12285  0FCD  1903               	btfsc	3,2
 12286  0FCE  0008               	return
 12287                           
 12288                           ;adc.c: 81: {
 12289                           ;adc.c: 82: {{BuzCnt = 2; BuzUpTime = 15/2; BuzDownTime = 20/2; BuzUpTemp = BuzUpTime; B
      +                          uzDownTemp = BuzDownTime;};};
 12290  0FCF  3002               	movlw	2
 12291  0FD0  00D7               	movwf	_BuzCnt	;volatile
 12292  0FD1  3007               	movlw	7
 12293  0FD2  00D6               	movwf	_BuzUpTime	;volatile
 12294  0FD3  300A               	movlw	10
 12295  0FD4  2FD5               	ljmp	PL14	;call to abstracted procedure
 12296  0FD5                     __end_of_Get_Lid_Data:	
 12297  0FD5                     PL14:	
 12298  0FD5  00D5               	movwf	_BuzDownTime	;volatile
 12299  0FD6  0856               	movf	_BuzUpTime,w	;volatile
 12300  0FD7  00D4               	movwf	_BuzUpTemp	;volatile
 12301  0FD8  0855               	movf	_BuzDownTime,w	;volatile
 12302  0FD9  00D3               	movwf	_BuzDownTemp	;volatile
 12303  0FDA  0008               	return
 12304  0FDB                     __end_ofPL14:	
 12305  0FDB                     __ptext2:	
 12306 ;; *************** function _WorkTimeStart *****************
 12307 ;; Defined at:
 12308 ;;		line 206 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\time.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;		None
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;		None
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  1    wreg      void 
 12315 ;; Registers used:
 12316 ;;		wreg, status,2, status,0
 12317 ;; Tracked objects:
 12318 ;;		On entry : 200/0
 12319 ;;		On exit  : 300/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12322 ;;      Params:         0       0       0       0       0
 12323 ;;      Locals:         0       0       0       0       0
 12324 ;;      Temps:          0       0       0       0       0
 12325 ;;      Totals:         0       0       0       0       0
 12326 ;;Total ram usage:        0 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    2
 12329 ;; This function calls:
 12330 ;;		Nothing
 12331 ;; This function is called by:
 12332 ;;		_Time_Deal
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function _WorkTimeStart
 12338  0FDB                     _WorkTimeStart:	
 12339  0FDB                     l13742:	
 12340                           ;incstack = 0
 12341                           ; Regs used in _WorkTimeStart: [wreg+status,2+status,0]
 12342                           
 12343                           
 12344                           ;time.c: 208: if(SysStatus != 3 || (WorkStage != 2 && WorkStage != 3))
 12345  0FDB  3003               	movlw	3
 12346  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
 12347  0FDD  066A               	xorwf	_SysStatus,w	;volatile
 12348  0FDE  1D03               	btfss	3,2
 12349  0FDF  2FE8               	goto	l13748
 12350  0FE0  3002               	movlw	2
 12351  0FE1  063F               	xorwf	_WorkStage,w	;volatile
 12352  0FE2  1903               	btfsc	3,2
 12353  0FE3  2FEC               	goto	l13752
 12354  0FE4  3003               	movlw	3
 12355  0FE5  063F               	xorwf	_WorkStage,w	;volatile
 12356  0FE6  1903               	btfsc	3,2
 12357  0FE7  2FEC               	goto	l13752
 12358  0FE8                     l13748:	
 12359                           
 12360                           ;time.c: 209: {
 12361                           ;time.c: 210: WorkTimeS = 0;
 12362  0FE8  01B4               	clrf	_WorkTimeS	;volatile
 12363                           
 12364                           ;time.c: 211: WorkTimeM = 0;
 12365  0FE9  01BD               	clrf	_WorkTimeM	;volatile
 12366                           
 12367                           ;time.c: 212: WorkTimeH = 0;
 12368  0FEA  01AE               	clrf	_WorkTimeH	;volatile
 12369  0FEB  0008               	return
 12370  0FEC                     l13752:	
 12371                           
 12372                           ;time.c: 214: }
 12373                           ;time.c: 216: if(++WorkTimeS < 120)
 12374  0FEC  3078               	movlw	120
 12375  0FED  0AB4               	incf	_WorkTimeS,f	;volatile
 12376  0FEE  0234               	subwf	_WorkTimeS,w	;volatile
 12377  0FEF  1C03               	btfss	3,0
 12378  0FF0  0008               	return
 12379                           
 12380                           ;time.c: 218: WorkTimeS = 0;
 12381  0FF1  01B4               	clrf	_WorkTimeS	;volatile
 12382                           
 12383                           ;time.c: 220: if(++WorkTimeM >= 60)
 12384  0FF2  303C               	movlw	60
 12385  0FF3  0ABD               	incf	_WorkTimeM,f	;volatile
 12386  0FF4  023D               	subwf	_WorkTimeM,w	;volatile
 12387  0FF5  1C03               	skipc
 12388  0FF6  0008               	return
 12389                           
 12390                           ;time.c: 221: {
 12391                           ;time.c: 222: WorkTimeM = 0;
 12392  0FF7  01BD               	clrf	_WorkTimeM	;volatile
 12393                           
 12394                           ;time.c: 223: if(++WorkTimeH >= 24)
 12395  0FF8  3018               	movlw	24
 12396  0FF9  0AAE               	incf	_WorkTimeH,f	;volatile
 12397  0FFA  022E               	subwf	_WorkTimeH,w	;volatile
 12398  0FFB  1C03               	skipc
 12399  0FFC  0008               	return
 12400                           
 12401                           ;time.c: 224: {
 12402                           ;time.c: 225: WorkTimeH = 24;
 12403  0FFD  3018               	movlw	24
 12404  0FFE  00AE               	movwf	_WorkTimeH	;volatile
 12405  0FFF  0008               	return
 12406  1000                     __end_of_WorkTimeStart:	
 12407                           
 12408                           	psect	text65
 12409  002C                     __ptext65:	
 12410 ;; *************** function _Timer1_Isr *****************
 12411 ;; Defined at:
 12412 ;;		line 143 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\main.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;		None
 12415 ;; Auto vars:     Size  Location     Type
 12416 ;;		None
 12417 ;; Return value:  Size  Location     Type
 12418 ;;                  1    wreg      void 
 12419 ;; Registers used:
 12420 ;;		wreg, status,2, status,0, pclath, cstack
 12421 ;; Tracked objects:
 12422 ;;		On entry : 0/0
 12423 ;;		On exit  : 300/0
 12424 ;;		Unchanged: 0/0
 12425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12426 ;;      Params:         0       0       0       0       0
 12427 ;;      Locals:         0       0       0       0       0
 12428 ;;      Temps:          2       0       0       0       0
 12429 ;;      Totals:         2       0       0       0       0
 12430 ;;Total ram usage:        2 bytes
 12431 ;; Hardware stack levels used:    1
 12432 ;; Hardware stack levels required when called:    1
 12433 ;; This function calls:
 12434 ;;		_Get_AC_Voltage
 12435 ;;		_Get_AD
 12436 ;;		_Get_Pressure_Switch_Data
 12437 ;;		_Get_Zero
 12438 ;;		_Operate_Relay_IO
 12439 ;; This function is called by:
 12440 ;;		Interrupt level 1
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           
 12445                           ;psect for function _Timer1_Isr
 12446  002C                     _Timer1_Isr:	
 12447                           
 12448                           ;main.c: 145: if(TMR1IF)
 12449  002C  1283               	bcf	3,5	;RP0=0, select bank0
 12450  002D  1303               	bcf	3,6	;RP1=0, select bank0
 12451  002E  1C0C               	btfss	12,0	;volatile
 12452  002F  2871               	goto	i1l6850
 12453                           
 12454                           ;main.c: 146: {
 12455                           ;main.c: 148: TMR1L += 0x30;
 12456  0030  3030               	movlw	48
 12457  0031  078E               	addwf	14,f	;volatile
 12458                           
 12459                           ;main.c: 149: TMR1H += 0xF8;
 12460  0032  30F8               	movlw	248
 12461  0033  078F               	addwf	15,f	;volatile
 12462                           
 12463                           ;main.c: 152: Operate_Relay_IO();
 12464  0034  2148  120A  118A   	fcall	_Operate_Relay_IO
 12465                           
 12466                           ;main.c: 153: Ad_Pressure_Raw = Get_AD(0x13);
 12467  0037  3013               	movlw	19
 12468  0038  2078  120A  118A   	fcall	_Get_AD
 12469  003B  1283               	bcf	3,5	;RP0=0, select bank0
 12470  003C  00D2               	movwf	_Ad_Pressure_Raw	;volatile
 12471                           
 12472                           ;main.c: 154: Get_Pressure_Switch_Data();
 12473  003D  20D1  120A  118A   	fcall	_Get_Pressure_Switch_Data
 12474                           
 12475                           ;main.c: 155: Get_Zero();
 12476  0040  20FD  120A  118A   	fcall	_Get_Zero
 12477                           
 12478                           ;main.c: 157: if(b_VolData_OK == 0)
 12479  0043  1A72               	btfsc	_b_VolData_OK/(0+8),_b_VolData_OK& (0+7)	;volatile
 12480  0044  2848               	goto	i1l14636
 12481                           
 12482                           ;main.c: 158: {
 12483                           ;main.c: 159: Get_AC_Voltage();
 12484  0045  20AB  120A  118A   	fcall	_Get_AC_Voltage
 12485  0048                     i1l14636:	
 12486                           
 12487                           ;main.c: 160: }
 12488                           ;main.c: 163: if(++MainTime_8ms >= 32)
 12489  0048  3020               	movlw	32
 12490  0049  1683               	bsf	3,5	;RP0=1, select bank1
 12491  004A  0AC1               	incf	_MainTime_8ms^(0+128),f	;volatile
 12492  004B  0241               	subwf	_MainTime_8ms^(0+128),w	;volatile
 12493  004C  1C03               	skipc
 12494  004D  2859               	goto	i1l14648
 12495                           
 12496                           ;main.c: 164: {
 12497                           ;main.c: 165: MainTime_8ms = 0;
 12498  004E  01C1               	clrf	_MainTime_8ms^(0+128)	;volatile
 12499                           
 12500                           ;main.c: 166: b_MainLoop_8ms = 1;
 12501  004F  14F0               	bsf	_b_MainLoop_8ms/(0+8),_b_MainLoop_8ms& (0+7)	;volatile
 12502                           
 12503                           ;main.c: 168: if(b_AdBot_OK == 0)
 12504  0050  1BF1               	btfsc	_b_AdBot_OK/(0+8),_b_AdBot_OK& (0+7)	;volatile
 12505  0051  2859               	goto	i1l14648
 12506                           
 12507                           ;main.c: 169: {
 12508                           ;main.c: 170: Ad_Bot_Raw = Get_AD(0x14);
 12509  0052  3014               	movlw	20
 12510  0053  2078  120A  118A   	fcall	_Get_AD
 12511  0056  1283               	bcf	3,5	;RP0=0, select bank0
 12512  0057  00D0               	movwf	_Ad_Bot_Raw	;volatile
 12513                           
 12514                           ;main.c: 171: b_AdBot_OK = 1;
 12515  0058  17F1               	bsf	_b_AdBot_OK/(0+8),_b_AdBot_OK& (0+7)	;volatile
 12516  0059                     i1l14648:	
 12517                           
 12518                           ;main.c: 172: }
 12519                           ;main.c: 173: }
 12520                           ;main.c: 176: if(++MainTime_10ms >= 40)
 12521  0059  3028               	movlw	40
 12522  005A  1683               	bsf	3,5	;RP0=1, select bank1
 12523  005B  0AC0               	incf	_MainTime_10ms^(0+128),f	;volatile
 12524  005C  0240               	subwf	_MainTime_10ms^(0+128),w	;volatile
 12525  005D  1C03               	skipc
 12526  005E  286F               	goto	i1l14664
 12527                           
 12528                           ;main.c: 177: {
 12529                           ;main.c: 178: MainTime_10ms = 0;
 12530  005F  01C0               	clrf	_MainTime_10ms^(0+128)	;volatile
 12531                           
 12532                           ;main.c: 181: if(++MainTime_500ms >= 50)
 12533  0060  3032               	movlw	50
 12534  0061  0AC9               	incf	_MainTime_500ms^(0+128),f	;volatile
 12535  0062  0249               	subwf	_MainTime_500ms^(0+128),w	;volatile
 12536  0063  1C03               	skipc
 12537  0064  2867               	goto	i1l14658
 12538                           
 12539                           ;main.c: 182: {
 12540                           ;main.c: 183: MainTime_500ms = 0;
 12541  0065  01C9               	clrf	_MainTime_500ms^(0+128)	;volatile
 12542                           
 12543                           ;main.c: 184: b_MainLoop_500ms = 1;
 12544  0066  1470               	bsf	_b_MainLoop_500ms/(0+8),_b_MainLoop_500ms& (0+7)	;volatile
 12545  0067                     i1l14658:	
 12546                           
 12547                           ;main.c: 185: }
 12548                           ;main.c: 187: if(++LedCol_500ms >= 50)
 12549  0067  3032               	movlw	50
 12550  0068  0ACB               	incf	_LedCol_500ms^(0+128),f	;volatile
 12551  0069  024B               	subwf	_LedCol_500ms^(0+128),w	;volatile
 12552  006A  1C03               	skipc
 12553  006B  286F               	goto	i1l14664
 12554                           
 12555                           ;main.c: 188: {
 12556                           ;main.c: 189: LedCol_500ms = 0;
 12557  006C  01CB               	clrf	_LedCol_500ms^(0+128)	;volatile
 12558                           
 12559                           ;main.c: 190: b_LedCol = ~b_LedCol;
 12560  006D  3020               	movlw	(0+1) shl (_b_LedCol& (0+7))
 12561  006E  06F0               	xorwf	_b_LedCol/(0+8),f
 12562  006F                     i1l14664:	
 12563                           
 12564                           ;main.c: 191: }
 12565                           ;main.c: 192: }
 12566                           ;main.c: 193: TMR1IF = 0;
 12567  006F  1283               	bcf	3,5	;RP0=0, select bank0
 12568  0070  100C               	bcf	12,0	;volatile
 12569  0071                     i1l6850:	
 12570  0071  0878               	movf	??_Timer1_Isr+1,w
 12571  0072  008A               	movwf	10
 12572  0073  0E77               	swapf	??_Timer1_Isr^(0+-128),w
 12573  0074  0083               	movwf	3
 12574  0075  0EFE               	swapf	126,f
 12575  0076  0E7E               	swapf	126,w
 12576  0077  0009               	retfie
 12577  0078                     __end_of_Timer1_Isr:	
 12578  0078                     __ptext69:	
 12579 ;; *************** function _Get_AD *****************
 12580 ;; Defined at:
 12581 ;;		line 409 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  ch              1    wreg     unsigned char 
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;  ch              1    2[COMMON] unsigned char 
 12586 ;;  adresult        1    1[COMMON] unsigned char 
 12587 ;;  i               1    3[COMMON] volatile unsigned char 
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  1    wreg      unsigned char 
 12590 ;; Registers used:
 12591 ;;		wreg, status,2, status,0
 12592 ;; Tracked objects:
 12593 ;;		On entry : 200/0
 12594 ;;		On exit  : 200/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12597 ;;      Params:         0       0       0       0       0
 12598 ;;      Locals:         3       0       0       0       0
 12599 ;;      Temps:          1       0       0       0       0
 12600 ;;      Totals:         4       0       0       0       0
 12601 ;;Total ram usage:        4 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; This function calls:
 12604 ;;		Nothing
 12605 ;; This function is called by:
 12606 ;;		_Timer1_Isr
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           
 12611                           ;psect for function _Get_AD
 12612  0078                     _Get_AD:	
 12613                           
 12614                           ;incstack = 0
 12615                           ; Regs used in _Get_AD: [wreg+status,2+status,0]
 12616                           ;Get_AD@ch stored from wreg
 12617  0078  00F5               	movwf	Get_AD@ch
 12618                           
 12619                           ;adc.c: 411: v_uint8 i = 0;
 12620  0079  01F6               	clrf	Get_AD@i	;volatile
 12621                           
 12622                           ;adc.c: 413: uint8 adresult;
 12623                           ;adc.c: 415: ADCON1 = 0x80;
 12624  007A  3080               	movlw	128
 12625  007B  1683               	bsf	3,5	;RP0=1, select bank1
 12626  007C  009F               	movwf	31	;volatile
 12627                           
 12628                           ;adc.c: 417: if(ch & 0x10)
 12629  007D  1A75               	btfsc	Get_AD@ch,4
 12630                           
 12631                           ;adc.c: 418: {
 12632                           ;adc.c: 419: ADCON1 |= 0x40;
 12633  007E  171F               	bsf	31,6	;volatile
 12634                           
 12635                           ;adc.c: 420: }
 12636                           ;adc.c: 422: ch &= 0x0f;
 12637  007F  300F               	movlw	15
 12638  0080  05F5               	andwf	Get_AD@ch,f
 12639                           
 12640                           ;adc.c: 424: ADCON0 = 0x00;
 12641  0081  1283               	bcf	3,5	;RP0=0, select bank0
 12642  0082  019F               	clrf	31	;volatile
 12643                           
 12644                           ;adc.c: 425: ADCON0 |= (unsigned char)(ch << 2);
 12645  0083  0875               	movf	Get_AD@ch,w
 12646  0084  00F3               	movwf	??_Get_AD
 12647  0085  3001               	movlw	1
 12648  0086  1003               	clrc
 12649  0087                     L76:	
 12650  0087  0DF3               	rlf	??_Get_AD,f
 12651  0088  3EFF               	addlw	-1
 12652  0089  1003               	clrc
 12653  008A  1D03               	skipz
 12654  008B  2887               	goto	L76
 12655  008C  0D73               	rlf	??_Get_AD,w
 12656  008D  049F               	iorwf	31,f	;volatile
 12657                           
 12658                           ;adc.c: 426: ADCON0 |= 0x01;
 12659  008E  141F               	bsf	31,0	;volatile
 12660  008F  0000               	nop	;# 
 12661  0090  0000               	nop	;# 
 12662                           
 12663                           ;adc.c: 431: GODONE = 1;
 12664  0091  1283               	bcf	3,5	;RP0=0, select bank0
 12665  0092  1303               	bcf	3,6	;RP1=0, select bank0
 12666  0093  149F               	bsf	31,1	;volatile
 12667  0094                     i1l959:	
 12668                           ;adc.c: 433: while(GODONE)
 12669                           
 12670  0094  1C9F               	btfss	31,1	;volatile
 12671  0095  2899               	goto	i1l14064
 12672                           
 12673                           ;adc.c: 434: {
 12674                           ;adc.c: 435: if(0 == (--i))
 12675  0096  0BF6               	decfsz	Get_AD@i,f	;volatile
 12676  0097  2894               	goto	i1l959
 12677                           
 12678                           ;adc.c: 436: return 0;
 12679  0098  3400               	retlw	0
 12680  0099                     i1l14064:	
 12681                           
 12682                           ;adc.c: 437: }
 12683                           ;adc.c: 444: adresult = ADRESH << 6;
 12684  0099  081E               	movf	30,w	;volatile
 12685  009A  00F3               	movwf	??_Get_AD
 12686  009B  0CF3               	rrf	??_Get_AD,f
 12687  009C  0CF3               	rrf	??_Get_AD,f
 12688  009D  0C73               	rrf	??_Get_AD,w
 12689  009E  39C0               	andlw	192
 12690  009F  00F4               	movwf	Get_AD@adresult
 12691                           
 12692                           ;adc.c: 445: adresult |= (ADRESL>>2);
 12693  00A0  1683               	bsf	3,5	;RP0=1, select bank1
 12694  00A1  081E               	movf	30,w	;volatile
 12695  00A2  00F3               	movwf	??_Get_AD
 12696  00A3  1003               	clrc
 12697  00A4  0CF3               	rrf	??_Get_AD,f
 12698  00A5  1003               	clrc
 12699  00A6  0CF3               	rrf	??_Get_AD,f
 12700  00A7  0873               	movf	??_Get_AD,w
 12701  00A8  04F4               	iorwf	Get_AD@adresult,f
 12702                           
 12703                           ;adc.c: 447: return adresult;
 12704  00A9  0874               	movf	Get_AD@adresult,w
 12705  00AA  0008               	return
 12706  00AB                     __end_of_Get_AD:	
 12707  00AB                     __ptext70:	
 12708 ;; *************** function _Get_AC_Voltage *****************
 12709 ;; Defined at:
 12710 ;;		line 149 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, status,2, status,0
 12719 ;; Tracked objects:
 12720 ;;		On entry : 200/100
 12721 ;;		On exit  : 300/100
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12724 ;;      Params:         0       0       0       0       0
 12725 ;;      Locals:         0       0       0       0       0
 12726 ;;      Temps:          0       0       0       0       0
 12727 ;;      Totals:         0       0       0       0       0
 12728 ;;Total ram usage:        0 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; This function calls:
 12731 ;;		Nothing
 12732 ;; This function is called by:
 12733 ;;		_Timer1_Isr
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           
 12738                           ;psect for function _Get_AC_Voltage
 12739  00AB                     _Get_AC_Voltage:	
 12740                           
 12741                           ;adc.c: 151: static v_uint16 s_volcount = 0;
 12742                           ;adc.c: 154: if(b_PressureOn == 1 || (RC1 == 0 && ErrorCode != 8 && ErrorCode != 9))
 12743                           
 12744                           ;incstack = 0
 12745                           ; Regs used in _Get_AC_Voltage: [wreg+status,2+status,0]
 12746  00AB  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
 12747  00AC  28B8               	goto	i1l13886
 12748  00AD  1283               	bcf	3,5	;RP0=0, select bank0
 12749  00AE  1887               	btfsc	7,1	;volatile
 12750  00AF  28BE               	goto	i1l13890
 12751  00B0  3008               	movlw	8
 12752  00B1  0658               	xorwf	_ErrorCode,w	;volatile
 12753  00B2  1903               	btfsc	3,2
 12754  00B3  28BE               	goto	i1l13890
 12755  00B4  3009               	movlw	9
 12756  00B5  0658               	xorwf	_ErrorCode,w	;volatile
 12757  00B6  1903               	btfsc	3,2
 12758  00B7  28BE               	goto	i1l13890
 12759  00B8                     i1l13886:	
 12760                           
 12761                           ;adc.c: 155: {
 12762                           ;adc.c: 156: Ad_Vol_Sum = 0;
 12763  00B8  1683               	bsf	3,5	;RP0=1, select bank1
 12764  00B9  01BA               	clrf	_Ad_Vol_Sum^(0+128)	;volatile
 12765  00BA  01BB               	clrf	(_Ad_Vol_Sum+1)^(0+128)	;volatile
 12766                           
 12767                           ;adc.c: 157: s_volcount = 0;
 12768  00BB  01B4               	clrf	Get_AC_Voltage@s_volcount^(0+128)	;volatile
 12769  00BC  01B5               	clrf	(Get_AC_Voltage@s_volcount+1)^(0+128)	;volatile
 12770  00BD  0008               	return
 12771  00BE                     i1l13890:	
 12772                           
 12773                           ;adc.c: 159: }
 12774                           ;adc.c: 161: Ad_Vol_Sum += Ad_Pressure_Raw;
 12775  00BE  0852               	movf	_Ad_Pressure_Raw,w	;volatile
 12776  00BF  1683               	bsf	3,5	;RP0=1, select bank1
 12777  00C0  07BA               	addwf	_Ad_Vol_Sum^(0+128),f	;volatile
 12778  00C1  1803               	skipnc
 12779  00C2  0ABB               	incf	(_Ad_Vol_Sum+1)^(0+128),f	;volatile
 12780                           
 12781                           ;adc.c: 163: if(++s_volcount >= 400)
 12782  00C3  0AB4               	incf	Get_AC_Voltage@s_volcount^(0+128),f	;volatile
 12783  00C4  1903               	skipnz
 12784  00C5  0AB5               	incf	(Get_AC_Voltage@s_volcount+1)^(0+128),f	;volatile
 12785  00C6  3001               	movlw	1
 12786  00C7  0235               	subwf	(Get_AC_Voltage@s_volcount+1)^(0+128),w	;volatile
 12787  00C8  3090               	movlw	144
 12788  00C9  1903               	skipnz
 12789  00CA  0234               	subwf	Get_AC_Voltage@s_volcount^(0+128),w	;volatile
 12790  00CB  1C03               	skipc
 12791  00CC  0008               	return
 12792                           
 12793                           ;adc.c: 164: {
 12794                           ;adc.c: 165: s_volcount = 0;
 12795  00CD  01B4               	clrf	Get_AC_Voltage@s_volcount^(0+128)	;volatile
 12796  00CE  01B5               	clrf	(Get_AC_Voltage@s_volcount+1)^(0+128)	;volatile
 12797                           
 12798                           ;adc.c: 166: b_VolData_OK = 1;
 12799  00CF  1672               	bsf	_b_VolData_OK/(0+8),_b_VolData_OK& (0+7)	;volatile
 12800  00D0  0008               	return
 12801  00D1                     __end_of_Get_AC_Voltage:	
 12802  007E                     btemp	set	126	;btemp
 12803  007E                     wtemp0	set	126
 12804  00D1                     __ptext68:	
 12805 ;; *************** function _Get_Pressure_Switch_Data *****************
 12806 ;; Defined at:
 12807 ;;		line 102 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;		None
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;		None
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  1    wreg      void 
 12814 ;; Registers used:
 12815 ;;		wreg, status,2, status,0
 12816 ;; Tracked objects:
 12817 ;;		On entry : 300/0
 12818 ;;		On exit  : 300/100
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12821 ;;      Params:         0       0       0       0       0
 12822 ;;      Locals:         0       0       0       0       0
 12823 ;;      Temps:          0       0       0       0       0
 12824 ;;      Totals:         0       0       0       0       0
 12825 ;;Total ram usage:        0 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; This function calls:
 12828 ;;		Nothing
 12829 ;; This function is called by:
 12830 ;;		_Timer1_Isr
 12831 ;; This function uses a non-reentrant model
 12832 ;;
 12833                           
 12834                           
 12835                           ;psect for function _Get_Pressure_Switch_Data
 12836  00D1                     _Get_Pressure_Switch_Data:	
 12837                           
 12838                           ;adc.c: 104: static v_uint16 s_pscount = 0;
 12839                           ;adc.c: 108: if(b_PressureOn == 0)
 12840                           
 12841                           ;incstack = 0
 12842                           ; Regs used in _Get_Pressure_Switch_Data: [wreg+status,2+status,0]
 12843  00D1  1AF2               	btfsc	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
 12844  00D2  28EA               	goto	i1l13868
 12845                           
 12846                           ;adc.c: 109: {
 12847                           ;adc.c: 110: if(Ad_Pressure_Raw < 15)
 12848  00D3  300F               	movlw	15
 12849  00D4  0252               	subwf	_Ad_Pressure_Raw,w	;volatile
 12850  00D5  1803               	skipnc
 12851  00D6  28E6               	goto	i1l13866
 12852                           
 12853                           ;adc.c: 111: {
 12854                           ;adc.c: 112: if(++s_pscount >= 1600)
 12855  00D7  1683               	bsf	3,5	;RP0=1, select bank1
 12856  00D8  0AB6               	incf	Get_Pressure_Switch_Data@s_pscount^(0+128),f	;volatile
 12857  00D9  1903               	skipnz
 12858  00DA  0AB7               	incf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128),f	;volatile
 12859  00DB  3006               	movlw	6
 12860  00DC  0237               	subwf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128),w	;volatile
 12861  00DD  3040               	movlw	64
 12862  00DE  1903               	skipnz
 12863  00DF  0236               	subwf	Get_Pressure_Switch_Data@s_pscount^(0+128),w	;volatile
 12864  00E0  1C03               	skipc
 12865  00E1  0008               	return
 12866                           
 12867                           ;adc.c: 113: {
 12868                           ;adc.c: 114: s_pscount = 0;
 12869  00E2  01B6               	clrf	Get_Pressure_Switch_Data@s_pscount^(0+128)	;volatile
 12870  00E3  01B7               	clrf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128)	;volatile
 12871                           
 12872                           ;adc.c: 115: b_PressureOn = 1;
 12873  00E4  16F2               	bsf	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
 12874  00E5  0008               	return
 12875  00E6                     i1l13866:	
 12876                           
 12877                           ;adc.c: 118: else
 12878                           ;adc.c: 119: {
 12879                           ;adc.c: 120: s_pscount = 0;
 12880  00E6  1683               	bsf	3,5	;RP0=1, select bank1
 12881  00E7  01B6               	clrf	Get_Pressure_Switch_Data@s_pscount^(0+128)	;volatile
 12882  00E8  01B7               	clrf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128)	;volatile
 12883  00E9  0008               	return
 12884  00EA                     i1l13868:	
 12885                           
 12886                           ;adc.c: 123: else
 12887                           ;adc.c: 124: {
 12888                           ;adc.c: 125: if(Ad_Pressure_Raw > 20)
 12889  00EA  3015               	movlw	21
 12890  00EB  0252               	subwf	_Ad_Pressure_Raw,w	;volatile
 12891  00EC  1C03               	skipc
 12892  00ED  28E6               	goto	i1l13866
 12893                           
 12894                           ;adc.c: 126: {
 12895                           ;adc.c: 127: if(++s_pscount >= 24)
 12896  00EE  1683               	bsf	3,5	;RP0=1, select bank1
 12897  00EF  0AB6               	incf	Get_Pressure_Switch_Data@s_pscount^(0+128),f	;volatile
 12898  00F0  1903               	skipnz
 12899  00F1  0AB7               	incf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128),f	;volatile
 12900  00F2  3000               	movlw	0
 12901  00F3  0237               	subwf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128),w	;volatile
 12902  00F4  3018               	movlw	24
 12903  00F5  1903               	skipnz
 12904  00F6  0236               	subwf	Get_Pressure_Switch_Data@s_pscount^(0+128),w	;volatile
 12905  00F7  1C03               	skipc
 12906  00F8  0008               	return
 12907                           
 12908                           ;adc.c: 128: {
 12909                           ;adc.c: 129: s_pscount = 0;
 12910  00F9  01B6               	clrf	Get_Pressure_Switch_Data@s_pscount^(0+128)	;volatile
 12911  00FA  01B7               	clrf	(Get_Pressure_Switch_Data@s_pscount+1)^(0+128)	;volatile
 12912                           
 12913                           ;adc.c: 130: b_PressureOn = 0;
 12914  00FB  12F2               	bcf	_b_PressureOn/(0+8),_b_PressureOn& (0+7)	;volatile
 12915  00FC  0008               	return
 12916  00FD                     __end_of_Get_Pressure_Switch_Data:	
 12917  00FD                     __ptext67:	
 12918 ;; *************** function _Get_Zero *****************
 12919 ;; Defined at:
 12920 ;;		line 259 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\adc.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;		None
 12923 ;; Auto vars:     Size  Location     Type
 12924 ;;		None
 12925 ;; Return value:  Size  Location     Type
 12926 ;;                  1    wreg      void 
 12927 ;; Registers used:
 12928 ;;		wreg, status,2, status,0
 12929 ;; Tracked objects:
 12930 ;;		On entry : 300/100
 12931 ;;		On exit  : 200/0
 12932 ;;		Unchanged: 0/0
 12933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12934 ;;      Params:         0       0       0       0       0
 12935 ;;      Locals:         0       0       0       0       0
 12936 ;;      Temps:          0       0       0       0       0
 12937 ;;      Totals:         0       0       0       0       0
 12938 ;;Total ram usage:        0 bytes
 12939 ;; Hardware stack levels used:    1
 12940 ;; This function calls:
 12941 ;;		Nothing
 12942 ;; This function is called by:
 12943 ;;		_Timer1_Isr
 12944 ;; This function uses a non-reentrant model
 12945 ;;
 12946                           
 12947                           
 12948                           ;psect for function _Get_Zero
 12949  00FD                     _Get_Zero:	
 12950                           
 12951                           ;adc.c: 261: static v_uint16 s_zerotimes = 0;
 12952                           ;adc.c: 262: static v_uint8 s_zerocnt9ms = 0;
 12953                           ;adc.c: 263: static v_uint8 s_highcount = 0;
 12954                           ;adc.c: 264: static v_uint8 s_lowcount = 0;
 12955                           ;adc.c: 268: if(b_Zero_EN == 1)
 12956                           
 12957                           ;incstack = 0
 12958                           ; Regs used in _Get_Zero: [wreg+status,2+status,0]
 12959  00FD  1DF2               	btfss	_b_Zero_EN/(0+8),_b_Zero_EN& (0+7)	;volatile
 12960  00FE  0008               	return
 12961                           
 12962                           ;adc.c: 269: {
 12963                           ;adc.c: 270: s_zerotimes++;
 12964  00FF  0AB0               	incf	Get_Zero@s_zerotimes^(0+128),f	;volatile
 12965  0100  1903               	skipnz
 12966  0101  0AB1               	incf	(Get_Zero@s_zerotimes+1)^(0+128),f	;volatile
 12967                           
 12968                           ;adc.c: 272: if(s_zerotimes >= 20000)
 12969  0102  304E               	movlw	78
 12970  0103  0231               	subwf	(Get_Zero@s_zerotimes+1)^(0+128),w	;volatile
 12971  0104  3020               	movlw	32
 12972  0105  1903               	skipnz
 12973  0106  0230               	subwf	Get_Zero@s_zerotimes^(0+128),w	;volatile
 12974  0107  1C03               	skipc
 12975  0108  2913               	goto	i1l13968
 12976                           
 12977                           ;adc.c: 273: {
 12978                           ;adc.c: 274: s_zerotimes = 0;
 12979  0109  01B0               	clrf	Get_Zero@s_zerotimes^(0+128)	;volatile
 12980  010A  01B1               	clrf	(Get_Zero@s_zerotimes+1)^(0+128)	;volatile
 12981                           
 12982                           ;adc.c: 275: b_ZeroTimeout = 1;
 12983  010B  1572               	bsf	_b_ZeroTimeout/(0+8),_b_ZeroTimeout& (0+7)	;volatile
 12984                           
 12985                           ;adc.c: 278: b_Zero_EN = 0;
 12986  010C  11F2               	bcf	_b_Zero_EN/(0+8),_b_Zero_EN& (0+7)	;volatile
 12987                           
 12988                           ;adc.c: 279: b_ZeroWave_OK = 0;
 12989  010D  10F2               	bcf	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 12990                           
 12991                           ;adc.c: 280: s_zerocnt9ms = 0;
 12992  010E  1283               	bcf	3,5	;RP0=0, select bank0
 12993  010F  01CA               	clrf	Get_Zero@s_zerocnt9ms	;volatile
 12994                           
 12995                           ;adc.c: 281: s_lowcount = 0;
 12996  0110  01C8               	clrf	Get_Zero@s_lowcount	;volatile
 12997                           
 12998                           ;adc.c: 282: s_highcount = 0;
 12999  0111  01C9               	clrf	Get_Zero@s_highcount	;volatile
 13000  0112  0008               	return
 13001  0113                     i1l13968:	
 13002                           
 13003                           ;adc.c: 284: }
 13004                           ;adc.c: 287: if(Ad_Pressure_Raw >= 20)
 13005  0113  3014               	movlw	20
 13006  0114  1283               	bcf	3,5	;RP0=0, select bank0
 13007  0115  0252               	subwf	_Ad_Pressure_Raw,w	;volatile
 13008  0116  1C03               	skipc
 13009  0117  2924               	goto	i1l13982
 13010                           
 13011                           ;adc.c: 288: {
 13012                           ;adc.c: 289: s_zerocnt9ms++;
 13013  0118  0ACA               	incf	Get_Zero@s_zerocnt9ms,f	;volatile
 13014                           
 13015                           ;adc.c: 290: if(b_ZeroWave_OK == 0)
 13016  0119  18F2               	btfsc	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 13017  011A  2932               	goto	i1l13992
 13018                           
 13019                           ;adc.c: 291: {
 13020                           ;adc.c: 292: s_lowcount = 0;
 13021  011B  01C8               	clrf	Get_Zero@s_lowcount	;volatile
 13022                           
 13023                           ;adc.c: 293: if(++s_highcount >= 34)
 13024  011C  3022               	movlw	34
 13025  011D  0AC9               	incf	Get_Zero@s_highcount,f	;volatile
 13026  011E  0249               	subwf	Get_Zero@s_highcount,w	;volatile
 13027  011F  1C03               	skipc
 13028  0120  2932               	goto	i1l13992
 13029                           
 13030                           ;adc.c: 294: {
 13031                           ;adc.c: 295: s_highcount = 0;
 13032  0121  01C9               	clrf	Get_Zero@s_highcount	;volatile
 13033                           
 13034                           ;adc.c: 296: b_ZeroWave_OK = 1;
 13035  0122  14F2               	bsf	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 13036  0123  2932               	goto	i1l13992
 13037  0124                     i1l13982:	
 13038                           
 13039                           ;adc.c: 301: else
 13040                           ;adc.c: 302: {
 13041                           ;adc.c: 303: if(s_zerocnt9ms > 0)
 13042  0124  084A               	movf	Get_Zero@s_zerocnt9ms,w	;volatile
 13043  0125  1903               	btfsc	3,2
 13044  0126  2932               	goto	i1l13992
 13045                           
 13046                           ;adc.c: 304: {
 13047                           ;adc.c: 305: s_zerocnt9ms++;
 13048  0127  0ACA               	incf	Get_Zero@s_zerocnt9ms,f	;volatile
 13049                           
 13050                           ;adc.c: 306: if(b_ZeroWave_OK == 0)
 13051  0128  18F2               	btfsc	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 13052  0129  2932               	goto	i1l13992
 13053                           
 13054                           ;adc.c: 307: {
 13055                           ;adc.c: 308: if(++s_lowcount >= 2)
 13056  012A  3002               	movlw	2
 13057  012B  0AC8               	incf	Get_Zero@s_lowcount,f	;volatile
 13058  012C  0248               	subwf	Get_Zero@s_lowcount,w	;volatile
 13059  012D  1C03               	skipc
 13060  012E  2932               	goto	i1l13992
 13061                           
 13062                           ;adc.c: 309: {
 13063                           ;adc.c: 310: s_lowcount = 0;
 13064  012F  01C8               	clrf	Get_Zero@s_lowcount	;volatile
 13065                           
 13066                           ;adc.c: 311: s_highcount = 0;
 13067  0130  01C9               	clrf	Get_Zero@s_highcount	;volatile
 13068                           
 13069                           ;adc.c: 312: s_zerocnt9ms = 0;
 13070  0131  01CA               	clrf	Get_Zero@s_zerocnt9ms	;volatile
 13071  0132                     i1l13992:	
 13072                           
 13073                           ;adc.c: 313: }
 13074                           ;adc.c: 314: }
 13075                           ;adc.c: 315: }
 13076                           ;adc.c: 316: }
 13077                           ;adc.c: 319: if(s_zerocnt9ms >= 36)
 13078  0132  3024               	movlw	36
 13079  0133  024A               	subwf	Get_Zero@s_zerocnt9ms,w	;volatile
 13080  0134  1C03               	skipc
 13081  0135  0008               	return
 13082                           
 13083                           ;adc.c: 320: {
 13084                           ;adc.c: 321: if(b_ZeroWave_OK)
 13085  0136  1CF2               	btfss	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 13086  0137  2944               	goto	i1l14008
 13087                           
 13088                           ;adc.c: 322: {
 13089                           ;adc.c: 323: b_ZeroWave_OK = 0;
 13090  0138  10F2               	bcf	_b_ZeroWave_OK/(0+8),_b_ZeroWave_OK& (0+7)	;volatile
 13091                           
 13092                           ;adc.c: 324: s_zerocnt9ms = 0;
 13093  0139  01CA               	clrf	Get_Zero@s_zerocnt9ms	;volatile
 13094                           
 13095                           ;adc.c: 325: b_Zero = 1;
 13096  013A  1472               	bsf	_b_Zero/(0+8),_b_Zero& (0+7)	;volatile
 13097                           
 13098                           ;adc.c: 326: b_Zero_EN = 0;
 13099  013B  11F2               	bcf	_b_Zero_EN/(0+8),_b_Zero_EN& (0+7)	;volatile
 13100                           
 13101                           ;adc.c: 329: ZeroTimesShow = s_zerotimes;
 13102  013C  1683               	bsf	3,5	;RP0=1, select bank1
 13103  013D  0831               	movf	(Get_Zero@s_zerotimes+1)^(0+128),w	;volatile
 13104  013E  00B9               	movwf	(_ZeroTimesShow+1)^(0+128)	;volatile
 13105  013F  0830               	movf	Get_Zero@s_zerotimes^(0+128),w	;volatile
 13106  0140  00B8               	movwf	_ZeroTimesShow^(0+128)	;volatile
 13107                           
 13108                           ;adc.c: 330: s_zerotimes = 0;
 13109  0141  01B0               	clrf	Get_Zero@s_zerotimes^(0+128)	;volatile
 13110  0142  01B1               	clrf	(Get_Zero@s_zerotimes+1)^(0+128)	;volatile
 13111                           
 13112                           ;adc.c: 331: }
 13113  0143  0008               	return
 13114  0144                     i1l14008:	
 13115                           
 13116                           ;adc.c: 332: else
 13117                           ;adc.c: 333: {
 13118                           ;adc.c: 335: s_lowcount = 0;
 13119  0144  01C8               	clrf	Get_Zero@s_lowcount	;volatile
 13120                           
 13121                           ;adc.c: 336: s_highcount = 0;
 13122  0145  01C9               	clrf	Get_Zero@s_highcount	;volatile
 13123                           
 13124                           ;adc.c: 337: s_zerocnt9ms = 0;
 13125  0146  01CA               	clrf	Get_Zero@s_zerocnt9ms	;volatile
 13126  0147  0008               	return
 13127  0148                     __end_of_Get_Zero:	
 13128  0148                     __ptext66:	
 13129 ;; *************** function _Operate_Relay_IO *****************
 13130 ;; Defined at:
 13131 ;;		line 805 in file "E:\ProjectFile\2019\1-50C88\Program\Y-50C88-A008\cook.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;		None
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;		None
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1    wreg      void 
 13138 ;; Registers used:
 13139 ;;		wreg, status,2, status,0
 13140 ;; Tracked objects:
 13141 ;;		On entry : 300/0
 13142 ;;		On exit  : 300/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13145 ;;      Params:         0       0       0       0       0
 13146 ;;      Locals:         0       0       0       0       0
 13147 ;;      Temps:          0       0       0       0       0
 13148 ;;      Totals:         0       0       0       0       0
 13149 ;;Total ram usage:        0 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; This function calls:
 13152 ;;		Nothing
 13153 ;; This function is called by:
 13154 ;;		_Timer1_Isr
 13155 ;; This function uses a non-reentrant model
 13156 ;;
 13157                           
 13158                           
 13159                           ;psect for function _Operate_Relay_IO
 13160  0148                     _Operate_Relay_IO:	
 13161                           
 13162                           ;cook.c: 808: if(++RelWaitCnt >= 4000)
 13163                           
 13164                           ;incstack = 0
 13165                           ; Regs used in _Operate_Relay_IO: [wreg+status,2+status,0]
 13166  0148  0AF9               	incf	_RelWaitCnt,f	;volatile
 13167  0149  1903               	skipnz
 13168  014A  0AFA               	incf	_RelWaitCnt+1,f	;volatile
 13169  014B  300F               	movlw	15
 13170  014C  027A               	subwf	_RelWaitCnt+1,w	;volatile
 13171  014D  30A0               	movlw	160
 13172  014E  1903               	skipnz
 13173  014F  0279               	subwf	_RelWaitCnt,w	;volatile
 13174  0150  1C03               	skipc
 13175  0151  2956               	goto	i1l14136
 13176                           
 13177                           ;cook.c: 809: {
 13178                           ;cook.c: 810: RelWaitCnt = 4000;
 13179  0152  30A0               	movlw	160
 13180  0153  00F9               	movwf	_RelWaitCnt	;volatile
 13181  0154  300F               	movlw	15
 13182  0155  00FA               	movwf	_RelWaitCnt+1	;volatile
 13183  0156                     i1l14136:	
 13184                           
 13185                           ;cook.c: 811: }
 13186                           ;cook.c: 813: if(b_Rel_NoZero)
 13187  0156  1FF0               	btfss	_b_Rel_NoZero/(0+8),_b_Rel_NoZero& (0+7)	;volatile
 13188  0157  295A               	goto	i1l2103
 13189                           
 13190                           ;cook.c: 814: {
 13191                           ;cook.c: 815: b_Rel_NoZero = 0;
 13192  0158  13F0               	bcf	_b_Rel_NoZero/(0+8),_b_Rel_NoZero& (0+7)	;volatile
 13193  0159  2975               	goto	i1l2113
 13194  015A                     i1l2103:	
 13195                           ;cook.c: 818: }
 13196                           
 13197                           ;cook.c: 816: RC1 = 0;
 13198                           
 13199                           
 13200                           ;cook.c: 819: else if(b_Zero)
 13201  015A  1C72               	btfss	_b_Zero/(0+8),_b_Zero& (0+7)	;volatile
 13202  015B  2967               	goto	i1l2105
 13203                           
 13204                           ;cook.c: 820: {
 13205                           ;cook.c: 822: if(b_RelType)
 13206  015C  1C71               	btfss	_b_RelType/(0+8),_b_RelType& (0+7)	;volatile
 13207  015D  295E               	goto	i1l14144
 13208  015E                     i1l14144:	
 13209                           
 13210                           ;cook.c: 823: {
 13211                           ;cook.c: 824: if(++ZeroDeley >= 21)
 13212  015E  3015               	movlw	21
 13213  015F  0ABB               	incf	_ZeroDeley,f	;volatile
 13214  0160  023B               	subwf	_ZeroDeley,w	;volatile
 13215  0161  1C03               	skipc
 13216  0162  2978               	goto	i1l14176
 13217                           
 13218                           ;cook.c: 825: {
 13219                           ;cook.c: 826: ZeroDeley = 0;
 13220  0163  01BB               	clrf	_ZeroDeley	;volatile
 13221                           
 13222                           ;cook.c: 827: b_ZeroDeley_OK = 1;
 13223  0164  1770               	bsf	_b_ZeroDeley_OK/(0+8),_b_ZeroDeley_OK& (0+7)	;volatile
 13224                           
 13225                           ;cook.c: 828: b_Zero = 0;
 13226  0165  1072               	bcf	_b_Zero/(0+8),_b_Zero& (0+7)	;volatile
 13227  0166  2978               	goto	i1l14176
 13228  0167                     i1l2105:	
 13229                           ;cook.c: 831: else
 13230                           ;cook.c: 832: {
 13231                           ;cook.c: 833: if(++ZeroDeley >= 21)
 13232                           
 13233                           
 13234                           ;cook.c: 841: else if(b_ZeroTimeout == 1)
 13235  0167  1D72               	btfss	_b_ZeroTimeout/(0+8),_b_ZeroTimeout& (0+7)	;volatile
 13236  0168  2978               	goto	i1l14176
 13237                           
 13238                           ;cook.c: 842: {
 13239                           ;cook.c: 843: b_ZeroTimeout = 0;
 13240  0169  1172               	bcf	_b_ZeroTimeout/(0+8),_b_ZeroTimeout& (0+7)	;volatile
 13241                           
 13242                           ;cook.c: 844: ZeroTimeoutCnt++;
 13243  016A  0ABA               	incf	_ZeroTimeoutCnt,f	;volatile
 13244                           
 13245                           ;cook.c: 845: if(ZeroTimeoutCnt >= 254)
 13246  016B  30FE               	movlw	254
 13247  016C  023A               	subwf	_ZeroTimeoutCnt,w	;volatile
 13248  016D  1C03               	skipc
 13249  016E  2971               	goto	i1l14168
 13250                           
 13251                           ;cook.c: 846: {
 13252                           ;cook.c: 847: ZeroTimeoutCnt = 254;
 13253  016F  30FE               	movlw	254
 13254  0170  00BA               	movwf	_ZeroTimeoutCnt	;volatile
 13255  0171                     i1l14168:	
 13256                           
 13257                           ;cook.c: 848: }
 13258                           ;cook.c: 850: if(b_RelType)
 13259  0171  1C71               	btfss	_b_RelType/(0+8),_b_RelType& (0+7)	;volatile
 13260  0172  2975               	goto	i1l2113
 13261                           
 13262                           ;cook.c: 851: {
 13263                           ;cook.c: 852: RC1 = 1;
 13264  0173  1487               	bsf	7,1	;volatile
 13265  0174  2976               	goto	i1l14140
 13266  0175                     i1l2113:	
 13267                           
 13268                           ;cook.c: 855: else
 13269                           ;cook.c: 856: {
 13270                           ;cook.c: 857: RC1 = 0;
 13271  0175  1087               	bcf	7,1	;volatile
 13272  0176                     i1l14140:	
 13273                           
 13274                           ;cook.c: 817: RelWaitCnt = 0;
 13275  0176  01F9               	clrf	_RelWaitCnt	;volatile
 13276  0177  01FA               	clrf	_RelWaitCnt+1	;volatile
 13277  0178                     i1l14176:	
 13278                           
 13279                           ;cook.c: 859: }
 13280                           ;cook.c: 860: }
 13281                           ;cook.c: 863: if(b_ZeroDeley_OK)
 13282  0178  1F70               	btfss	_b_ZeroDeley_OK/(0+8),_b_ZeroDeley_OK& (0+7)	;volatile
 13283  0179  0008               	return
 13284                           
 13285                           ;cook.c: 864: {
 13286                           ;cook.c: 865: b_ZeroDeley_OK = 0;
 13287  017A  1370               	bcf	_b_ZeroDeley_OK/(0+8),_b_ZeroDeley_OK& (0+7)	;volatile
 13288                           
 13289                           ;cook.c: 867: if(b_RelType)
 13290  017B  1C71               	btfss	_b_RelType/(0+8),_b_RelType& (0+7)	;volatile
 13291  017C  2981               	goto	i1l2116
 13292                           
 13293                           ;cook.c: 868: {
 13294                           ;cook.c: 869: RC1 = 1;
 13295  017D  1487               	bsf	7,1	;volatile
 13296  017E                     i1l14182:	
 13297                           
 13298                           ;cook.c: 870: RelWaitCnt = 0;
 13299  017E  01F9               	clrf	_RelWaitCnt	;volatile
 13300  017F  01FA               	clrf	_RelWaitCnt+1	;volatile
 13301                           
 13302                           ;cook.c: 871: }
 13303  0180  0008               	return
 13304  0181                     i1l2116:	
 13305                           
 13306                           ;cook.c: 872: else
 13307                           ;cook.c: 873: {
 13308                           ;cook.c: 874: RC1 = 0;
 13309  0181  1087               	bcf	7,1	;volatile
 13310  0182  297E               	goto	i1l14182
 13311  0183                     __end_of_Operate_Relay_IO:	
 13312                           
 13313                           	psect	intentry
 13314  0004                     __pintentry:	
 13315                           ;incstack = 0
 13316                           ; Regs used in _Timer1_Isr: [wreg+status,2+status,0+pclath+cstack]
 13317                           
 13318  0004                     interrupt_function:	
 13319  007E                     saved_w	set	btemp
 13320  0004  00FE               	movwf	btemp
 13321  0005  0E03               	swapf	3,w
 13322  0006  00F7               	movwf	??_Timer1_Isr
 13323  0007  080A               	movf	10,w
 13324  0008  00F8               	movwf	??_Timer1_Isr+1
 13325  0009  120A  118A  282C   	ljmp	_Timer1_Isr


Data Sizes:
    Strings     0
    Constant    374
    Data        2
    BSS         110
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     13      77
    BANK1            80      0      48
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer1_Isr in COMMON

    _Timer1_Isr->_Get_AD

Critical Paths under _main in BANK0

    _Time_Deal->_PresetTimeStart
    _PresetTimeStart->___awdiv
    _LED_Task->_Work_Mode_Show
    _Work_Mode_Show->_DIG_Show_Time
    _Test_Mode_Show->_DIG_Show_Data
    _DIG_Show_Data->___lbmod
    _Fun_Choose_Show->_DIG_Show_Time
    _Fun_Choose_Show->___awdiv
    _DIG_Show_Time->___lbmod
    _Factory_Show->___lbmod
    _Error_Show->___lbmod
    _LED_Drive->_Set_Addr_Value
    _Key_Task->_Maink_Fast_Fun
    _Key_Drive->_KscanIo
    _Init_System->_DelayXms
    _Get_AC_Rms->___lwdiv
    _RiceHeat->_Heat_Time_Select
    _ReheatCook->_Heat_Time_Select
    _PressureHeat->_Heat_Time_Select
    _OpenCook->_Heat_Time_Select
    _KeepWarmHeat->_Heat_Time_Select
    _CakeHeat->_Heat_Time_Select

Critical Paths under _Timer1_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer1_Isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer1_Isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer1_Isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22503
                          _Cook_Task
                         _Error_Deal
                         _Get_AC_Rms
                       _Get_Lid_Data
                      _Get_Temp_Data
                        _Init_System
                          _Key_Drive
                           _Key_Task
                          _LED_Drive
                           _LED_Task
                         _Sound_Deal
                          _Time_Deal
 ---------------------------------------------------------------------------------
 (1) _Time_Deal                                            0     0      0    1866
                       _AutoStartFun
                 _CountDownTimeStart
                     _ErrorTimeStart
                  _KeepWarmTimeStart
                    _PresetTimeStart
                 _Relay_Duty_Control
                          _ShortTime
                   _StandbyTimeStart
                      _WorkTimeStart
 ---------------------------------------------------------------------------------
 (2) _WorkTimeStart                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _StandbyTimeStart                                     0     0      0       0
                             _Cancel
 ---------------------------------------------------------------------------------
 (2) _ShortTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Relay_Duty_Control                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PresetTimeStart                                      1     1      0    1866
                                              8 BANK0      1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _KeepWarmTimeStart                                    0     0      0       0
                             _Cancel
 ---------------------------------------------------------------------------------
 (2) _ErrorTimeStart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CountDownTimeStart                                   0     0      0       0
                             _Cancel
 ---------------------------------------------------------------------------------
 (2) _AutoStartFun                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sound_Deal                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Task                                             0     0      0   10415
                         _Error_Show
                       _Factory_Show
                    _Fun_Choose_Show
                      _Keepwarm_Show
                            _LED_Off
                      _Power_On_Show
                     _Test_Mode_Show
                  _Waiting_Mode_Show
                     _Work_Mode_Show
 ---------------------------------------------------------------------------------
 (2) _Work_Mode_Show                                       5     5      0    2037
                                              8 BANK0      5     5      0
                      _DIG_Show_Time
                            ___lbdiv
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Waiting_Mode_Show                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Test_Mode_Show                                       0     0      0    3398
                      _DIG_Show_Data
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4      65
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DIG_Show_Data                                        4     1      3     692
                                              5 BANK0      4     1      3
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Power_On_Show                                        1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LED_Off                                              1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Keepwarm_Show                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fun_Choose_Show                                      0     0      0    3851
                      _DIG_Show_Time
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     927
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     939
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _DIG_Show_Time                                        3     1      2    1294
                                              5 BANK0      3     1      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _Factory_Show                                         1     1      0     691
                                              5 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     389
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Error_Show                                           0     0      0     302
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     302
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _LED_Drive                                            0     0      0     550
                     _Set_Addr_Value
 ---------------------------------------------------------------------------------
 (2) _Set_Addr_Value                                       3     2      1     550
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Key_Task                                             0     0      0       0
                       _MainK_Preset
                       _Maink_Cancel
                      _Maink_Factory
                     _Maink_Fast_Fun
                         _Maink_Test
 ---------------------------------------------------------------------------------
 (2) _Maink_Test                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Maink_Fast_Fun                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Maink_Factory                                        0     0      0       0
                             _Cancel
 ---------------------------------------------------------------------------------
 (2) _Maink_Cancel                                         0     0      0       0
                             _Cancel
 ---------------------------------------------------------------------------------
 (2) _MainK_Preset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Drive                                            0     0      0     157
                            _KscanIo
 ---------------------------------------------------------------------------------
 (2) _KscanIo                                              5     5      0     157
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0     119
                           _DelayXms
                          _Init_GPIO
                    _Init_LED_Module
                           _Init_PWM
                          _Init_TMR1
                           _Init_Var
 ---------------------------------------------------------------------------------
 (2) _Init_Var                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_TMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_LED_Module                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     1      2     119
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _Get_Temp_Data                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Get_Lid_Data                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_AC_Rms                                           2     2      0      84
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4      84
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Error_Deal                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cook_Task                                            0     0      0    9312
                         _BotHeatOff
                          _BotHeatOn
                           _CakeHeat
                        _FactoryTest
                       _KeepWarmHeat
                           _OpenCook
                       _PressureHeat
                         _ReheatCook
                           _RiceHeat
 ---------------------------------------------------------------------------------
 (2) _RiceHeat                                             0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                   _Heat_Time_Select
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (2) _ReheatCook                                           0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                   _Heat_Time_Select
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (2) _PressureHeat                                         0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                             _Cancel
                   _Heat_Time_Select
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (3) _Cancel                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OpenCook                                             0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                   _Heat_Time_Select
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (2) _KeepWarmHeat                                         0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                   _Heat_Time_Select
 ---------------------------------------------------------------------------------
 (2) _FactoryTest                                          0     0      0       0
                         _BotHeatOff
                          _BotHeatOn
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (2) _CakeHeat                                             0     0      0    1552
                         _BotHeatOff
                          _BotHeatOn
                   _Heat_Time_Select
                        _ShortTimeOn
 ---------------------------------------------------------------------------------
 (3) _ShortTimeOn                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Heat_Time_Select                                     2     1      1    1552
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _BotHeatOn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BotHeatOff                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer1_Isr                                           2     2      0      92
                                              4 COMMON     2     2      0
                     _Get_AC_Voltage
                             _Get_AD
           _Get_Pressure_Switch_Data
                           _Get_Zero
                   _Operate_Relay_IO
 ---------------------------------------------------------------------------------
 (6) _Operate_Relay_IO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Get_Zero                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Get_Pressure_Switch_Data                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Get_AD                                               4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _Get_AC_Voltage                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cook_Task
     _BotHeatOff
     _BotHeatOn
     _CakeHeat
       _BotHeatOff
       _BotHeatOn
       _Heat_Time_Select
       _ShortTimeOn
     _FactoryTest
       _BotHeatOff
       _BotHeatOn
       _ShortTimeOn
     _KeepWarmHeat
       _BotHeatOff
       _BotHeatOn
       _Heat_Time_Select
     _OpenCook
       _BotHeatOff
       _BotHeatOn
       _Heat_Time_Select
       _ShortTimeOn
     _PressureHeat
       _BotHeatOff
       _BotHeatOn
       _Cancel
       _Heat_Time_Select
       _ShortTimeOn
     _ReheatCook
       _BotHeatOff
       _BotHeatOn
       _Heat_Time_Select
       _ShortTimeOn
     _RiceHeat
       _BotHeatOff
       _BotHeatOn
       _Heat_Time_Select
       _ShortTimeOn
   _Error_Deal
   _Get_AC_Rms
     ___lwdiv
   _Get_Lid_Data
   _Get_Temp_Data
   _Init_System
     _DelayXms
     _Init_GPIO
     _Init_LED_Module
     _Init_PWM
     _Init_TMR1
     _Init_Var
   _Key_Drive
     _KscanIo
   _Key_Task
     _MainK_Preset
     _Maink_Cancel
       _Cancel
     _Maink_Factory
       _Cancel
     _Maink_Fast_Fun
     _Maink_Test
   _LED_Drive
     _Set_Addr_Value
   _LED_Task
     _Error_Show
       ___lbmod
     _Factory_Show
       ___lbdiv
       ___lbmod
     _Fun_Choose_Show
       _DIG_Show_Time
         ___lbdiv
         ___lbmod
       ___awdiv
       ___awmod
       ___lbdiv
       ___lbmod
     _Keepwarm_Show
     _LED_Off
     _Power_On_Show
     _Test_Mode_Show
       _DIG_Show_Data
         ___lbdiv (ARG)
         ___lbmod (ARG)
       ___awdiv
       ___awmod
       ___lbdiv
       ___lbmod
       ___lwdiv
       ___lwmod
     _Waiting_Mode_Show
     _Work_Mode_Show
       _DIG_Show_Time
         ___lbdiv
         ___lbmod
       ___lbdiv
       ___lbmod
       ___wmul
   _Sound_Deal
   _Time_Deal
     _AutoStartFun
     _CountDownTimeStart
       _Cancel
     _ErrorTimeStart
     _KeepWarmTimeStart
       _Cancel
     _PresetTimeStart
       ___awdiv
       ___awmod
     _Relay_Duty_Control
     _ShortTime
     _StandbyTimeStart
       _Cancel
     _WorkTimeStart

 _Timer1_Isr (ROOT)
   _Get_AC_Voltage
   _Get_AD
   _Get_Pressure_Switch_Data
   _Get_Zero
   _Operate_Relay_IO

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               58      0       0       9        0.0%
BITBANK3            58      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0      11        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      30       7       60.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8A      12        0.0%
ABS                  0      0      8A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Oct 11 10:27:18 2019

                   ??_KeepWarmHeat 005C                      ?_AutoStartFun 0073  
              __end_of_FactoryTest 0841                                  pc 0002  
             __end_of_Factory_Show 16FF                                 PL2 0F88  
                               PL4 0352                                 PL6 1792  
                               PL8 0F90                      _b_ZeroWave_OK 0391  
                     ___awdiv@sign 005F                      _b_ZeroTimeout 0392  
                               fsr 0004                ___wmul@multiplicand 005C  
           __end_of_Get_AC_Voltage 00D1                                PL10 0F9A  
                              PL20 17C5                                PL12 1799  
                              PL30 027A                                PL22 17D1  
                              PL14 0FD5                                PL32 17EE  
                              PL24 17D7                                PL16 17B8  
                              PL34 17F4                                PL26 17DF  
                              PL18 17BF                                PL36 17FA  
                              PL28 17E7                     ?_Keepwarm_Show 0073  
                              l900 1021                                l857 0FBC  
                              l948 055A                                _RB1 0031  
                              _RB2 0032                                _RC0 0038  
                              _RB3 0033                                _RC1 0039  
                              _RB4 0034                                _RB5 0035  
                              _RB6 0036                                _RB7 0037  
                              _RD4 0044                                _PR2 0092  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 005F                   ?_PresetTimeStart 0073  
                  __end_of_LED_Off 026C                  _CountDownTimeSave 0033  
                             l2008 093B                               l2032 08CF  
                             l2084 0F40                               l1902 0B21  
                             l1840 0B52                               l1861 0834  
                             l1854 081C                               l1863 083E  
                             l1951 0A58                               l2924 03DC  
                             l2925 03E3                               l1974 0987  
                             l2926 03DE                               l3910 025A  
                             l1975 098A                               l3911 0214  
                             l3815 131B                               l1976 0993  
                             l3840 10E0                               l3920 0226  
                             l3912 0216                               l3816 1320  
                             l3841 10E2                               l3921 0228  
                             l3913 0218                               l3817 1325  
                             l3850 10F4                               l3842 10E4  
                             l3922 022A                               l3914 021A  
                             l3851 10F6                               l3843 10E6  
                             l3923 022C                               l3915 021C  
                             l3844 10E8                               l3916 021E  
                             l3845 10EA                               l3837 10DC  
                             l3917 0220                               l3909 0212  
                             l3846 10EC                               l3918 0222  
                             l3870 1402                               l3847 10EE  
                             l3839 10DE                               l3919 0224  
                             l3871 1404                               l3848 10F0  
                             l3880 1469                               l3872 1406  
                             l3961 153D                               l3849 10F2  
                             l3873 1408                               l3865 13FA  
                             l3874 140A                               l3875 140C  
                             l3867 13FC                               l3980 1636  
                             l3876 140E                               l3868 13FE  
                             l3981 1638                               l3965 158C  
                             l3957 1314                               l3877 1410  
                             l3869 1400                               l3990 164A  
                             l3982 163A                               l3974 1625  
                             l3966 15D0                               l3878 1412  
                             l3983 163C                               l3975 1626  
                             l3879 1414                               l5824 0ECD  
                             l3984 163E                               l3976 162A  
                             l3985 1640                               l3977 162E  
                             l3986 1642                               l3978 1632  
                             l5915 02E6                               l3987 1644  
                             l3979 1634                               l5916 02FE  
                             l3988 1646                               l5917 02EA  
                             l3989 1648                               l5918 02F1  
                             l5919 02F8                               l5873 0C0E  
                             l5882 0C43                               l5875 0C38  
                             l6855 046D                               l8634 0BAB  
                             l7677 05E6                               l9906 1727  
                             u4274 035C                               u4275 0359  
                             u2865 0F2D                               u6175 0295  
                             u6615 137D                     ??_Maink_Cancel 005A  
                             u8435 13E7                               u6685 13BB  
                             u7735 057A                               u8535 17B0  
                             u7585 10B1                               u8395 1340  
                             u8555 1474                               u7595 10C7  
                             u8575 1494                               _WPUA 018E  
                             _WPUB 0095                               _WPUC 018F  
                             _WPUD 0185             __size_of_WorkTimeStart 0025  
                    _ZeroTimesShow 00B8                    _Init_LED_Module 039F  
                  __end_of_Fc_ID_1 1FF9                    __end_of_Fc_ID_2 1FFA  
                  __end_of_Fc_ID_3 1FFB                    __end_of_Fc_ID_4 1FFC  
                  __end_of_Fc_ID_5 1FFD                    __end_of_Fc_ID_6 1FFE  
                  __end_of_Fc_ID_7 1FFF                    __end_of_Fc_ID_8 2000  
                             _main 0468                               btemp 007E  
                             start 000C                         _Get_AC_Rms 1002  
               __size_of_LED_Drive 0042                         _BotHeatOff 0B67  
                   ??_AutoStartFun 005A               __end_of_Get_Lid_Data 0FD5  
                  __end_of_KscanIo 0352            __size_of_Work_Mode_Show 0143  
                    ??_Init_System 005D                 Get_AC_Rms@s_maxvol 004C  
               Get_AC_Rms@s_minvol 006C                   __end_of_LED_Task 01E6  
                            l12070 0B67                              l12310 0AB2  
                            l12302 0AA1                              l12046 1717  
                            l12038 1703                              l12320 0ABA  
                            l12312 0AB5                              l12066 0B6C  
                            l12250 081B                              l12410 09B9  
                            l12330 0AC6                              l12322 0ABB  
                            l12314 0AB6                              l12260 082E  
                            l12420 09C9                              l12324 0ABF  
                            l12316 0AAF                              l12308 0AB0  
                            l13300 0EE3                              l12254 0840  
                            l12078 0D77                              l12350 0AEC  
                            l13214 0D48                              l13142 0D5C  
                            l12600 0903                              l12248 0819  
                            l12504 0A54                              l12432 09E0  
                            l12520 0A63                              l12344 0AE0  
                            l12336 0ACE                              l12408 0A8C  
                            l13216 0D41                              l13208 0D36  
                            l13400 0E71                              l12266 0831  
                            l12522 0952                              l12442 09E7  
                            l12434 09E2                              l12370 0B0A  
                            l12362 0AFB                              l12346 0AE4  
                            l12290 0A78                              l12612 0912  
                            l12604 0906                              l12540 096F  
                            l12532 0964                              l12452 09F3  
                            l12444 09E8                              l12436 09E3  
                            l12428 09D8                              l12364 0AFF  
                            l12356 0AF0                              l12348 0AE8  
                            l14300 042B                              l13228 0D51  
                            l13164 0D72                              l13148 0D61  
                            l13340 0DB9                              l13332 0DAF  
                            l13308 0D9B                              l12630 092B  
                            l12614 0913                              l12542 0970  
                            l12526 0958                              l12470 0A15  
                            l12446 09EC                              l12438 09DF  
                            l12710 089D                              l12390 0B39  
                            l12366 0B03                              l12374 0B0D  
                            l12294 0A7E                              l13510 033E  
                            l13502 031E                              l13158 0D66  
                            l12640 0941                              l12608 090E  
                            l12472 0A19                              l12392 0B3D  
                            l12376 0B1B                              l12368 0B06  
                            l14320 044E                              l13360 0DD7  
                            l13352 0DCB                              l13344 0DBF  
                            l13336 0DB5                              l13280 0EC1  
                            l13272 0EB6                              l12642 0942  
                            l12634 0933                              l12626 0923  
                            l12618 091B                              l12554 0983  
                            l12546 0978                              l12490 0A33  
                            l12466 0A0D                              l12458 09FB  
                            l12394 0B41                              l14314 0447  
                            l14306 0436                              l13506 032E  
                            l13194 0D2E                              l13178 0D15  
                            l13290 0ECF                              l12572 09A0  
                            l12556 0989                              l12492 0A37  
                            l12484 0A28                              l12468 0A11  
                            l12660 0892                              l12396 0B44  
                            l13380 0DF5                              l13372 0DE9  
                            l13364 0DDD                              l13356 0DD1  
                            l13348 0DC5                              l15204 1779  
                            l12804 0261                              l13700 05AE  
                            l12740 0F06                              l12646 094A  
                            l12654 08F4                              l12486 0A2C  
                            l12478 0A1D                              l12398 0B48  
                            l14326 0455                              l16030 0C98  
                            l15230 135D                              l12592 08E7  
                            l12576 09A8                              l12584 09AD  
                            l12488 0A30                              l12496 0A3A  
                            l12680 08BC                              l12672 08B3  
                            l12656 088C                              l14336 0463  
                            l13392 0E07                              l13384 0DFB  
                            l13376 0DEF                              l13368 0DE3  
                            l16024 0C92                              l12816 026D  
                            l17000 01DB                              l14600 05EF  
                            l12586 08DD                              l12498 0A48  
                            l12690 08C3                              l12674 08B4  
                            l12666 08A9                              l16050 0CA9  
                            l16042 0CA5                              l16034 0CA0  
                            l16018 0C8D                              l15402 1181  
                            l13722 05C8                              l12754 0F1F  
                            l13554 0F76                              l13546 0F6C  
                            l12668 08AD                              l14284 0412  
                            l14268 03F8                              l13388 0E01  
                            l15180 1734                              l15236 1366  
                            l17004 01E1                              l13652 0BDE  
                            l12756 0F0D                              l13556 0F78  
                            l12678 08BB                              l14294 0424  
                            l13494 0343                              l14542 02AA  
                            l14550 02BD                              l13398 0E12  
                            l16070 0CB3                              l16062 0CAF  
                            l16054 0CAB                              l16046 0CA7  
                            l16038 0CA3                              l15166 1721  
                            l15262 1393                              l15246 1374  
                            l14606 05F5                              l13574 0EF1  
                            l13718 05C6                              l13566 0F85  
                            l13742 0FDB                              l17022 047F  
                            l15360 0814                              l15352 0807  
                            l15600 15DA                              l12952 022E  
                            l13752 0FEC                              l15354 0808  
                            l13498 030E                              l14546 02B4  
                            l16074 0CB5                              l16066 0CB1  
                            l16058 0CAD                              l15610 16CE  
                            l15258 138B                              l15274 13A2  
                            l13818 0BB9                              l13658 0BE4  
                            l17050 04A1                              l15348 0800  
                            l16084 0CB9                              l15196 1764  
                            l15188 1761                              l13676 0BF9  
                            l13588 0EFF                              l13748 0FE8  
                            l13838 0FBA                              l15366 03D1  
                            l16078 0CB7                              l16094 0CBD  
                            l15286 13B5                              l15294 13C8  
                            l15278 13A9                              l15374 10F8  
                            l15710 109F                              l15632 0E7C  
                            l16088 0CBB                              l15608 168D  
                            l15384 1132                              l15376 1124  
                            l17064 04BE                              l17072 04D2  
                            l15810 0845                              l15642 0E8F  
                            l15298 13D0                              l15386 1140  
                            l13794 0BA3                              l17058 04B2  
                            l15644 0E91                              l15636 0E84  
                            l15580 1559                              l15708 109E  
                            l15830 085C                              l15814 0846  
                            l15806 05A2                              l17510 0D00  
                            l17502 0CD7                              l16704 1337  
                            l17520 0E49                              l17512 0D05  
                            l17504 0CF1                              l15850 0874  
                            l15842 086C                              l15834 085D  
                            l15826 0854                              l15818 084E  
                            l17530 0E62                              l17522 0E4E  
                            l17514 0D0A                              l17506 0CF6  
                            l15594 1593                              l16802 14FC  
                            l15844 086D                              l16716 134E  
                            l17532 0E67                              l17524 0E53  
                            l17516 0D0F                              l17508 0CFB  
                            l16820 119D                              l15862 087F  
                            l15854 0879                              l15838 0865  
                            l15782 0560                              l17534 0E6C  
                            l17526 0E58                              l17518 0E2F  
                            l16814 1536                              l16912 1027  
                            l15792 0588                              l17528 0E5D  
                            l16728 13E1                              l16736 13F4  
                            l16840 11E4                              l16824 11BA  
                            l16816 118D                              l16680 1738  
                            l16760 1458                              l16744 1416  
                            l15858 087E                              l16930 1060  
                            l16922 104F                              l15970 0C1E  
                            l16834 11D0                              l16770 17B5  
                            l16746 1442                              l15868 0880  
                            l15796 058E                              l15948 0C0D  
                            l16852 1222                              l16684 1740  
                            l16942 107B                              l16934 1069  
                            l16926 1057                              l15798 0599  
                            l15974 0C25                              l15958 0C1A  
                            l16870 127A                              l16846 1203  
                            l16952 108B                              l15992 0C2E  
                            l16864 1266                              l16792 14A6  
                            l16938 1072                              l16946 1084  
                            l16882 12BE                              l16858 1240  
                            l16778 1479                              l16786 1499  
                            l15996 0C37                              l16876 128E  
                            l16796 14F0                              l16964 0195  
                            l16894 12E0                              l16982 01B6  
                            l16976 01A8                              l16968 019E  
                            l16898 1195                              l16994 01CE  
                            l16978 01AC                              l16988 01C3  
                            ?_main 0073                 Get_AC_Rms@s_sumvol 00B2  
                  ?_Get_AC_Voltage 0073                 _CountDownTimeStart 0BBB  
                  __end_of___awdiv 1398                    __end_of___lbdiv 1736  
                  __end_of___awmod 13D5                    __end_of___lbmod 171B  
                  ___awdiv@divisor 005A                              _T1CON 0010  
                  __end_of___lwdiv 1353                    __end_of___lwmod 13F9  
                            i1l959 0094                    ___awdiv@counter 005E  
                            _TMR1H 000F                              _TMR1L 000E  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _Fc_ID 00A0                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                    ??_Maink_Factory 005A  
          __size_of_ErrorTimeStart 0017                 Get_Zero@s_lowcount 0048  
                 __end_of_TIME_TAB 1944                ?_CountDownTimeStart 0073  
                   _ZeroTimeoutCnt 003A                     __pbitbssCOMMON 0380  
             Get_Temp_Data@s_admax 0047               Get_Temp_Data@s_admin 006B  
                 __end_of_CakeHeat 0952                              pclath 000A  
             Get_Temp_Data@s_adsum 00AE                         _Maink_Test 0EB6  
                            status 0003                         _CountTimeS 002A  
                            wtemp0 007E                        _FactoryTest 0819  
                  ___lbdiv@divisor 005A                   ?_Fun_Choose_Show 0073  
                 __end_of_DelayXms 03E8                    ___lbdiv@counter 005C  
       __size_of_Waiting_Mode_Show 0002                   ??_Set_Addr_Value 005B  
                 DIG_Show_Time@min 005F                   __end_of_Get_Zero 0148  
                  __initialization 000F               ??_CountDownTimeStart 005A  
                     __end_of_main 04E2          __size_of_Operate_Relay_IO 003B  
                       _Error_Deal 03E8                   __end_of_Key_Task 0D15  
                 __end_of_Init_PWM 03BB                         _Error_Show 01E6  
                 __end_of_Init_Var 03D0                      _WorkTimeStart 0FDB  
                  ??_Keepwarm_Show 005A                  _KeepWarmTimeStart 05A4  
                 __end_of_RiceHeat 0B4B                Get_Zero@s_highcount 0049  
                       _HorseCount 0032                 __size_of_BotHeatOn 0004  
                           ??_main 0067                   __end_of_OpenCook 09B9  
                       _RelWaitCnt 0079                 ?_KeepWarmTimeStart 0073  
             __end_of_MainK_Preset 0D5C                          ??_LED_Off 005A  
              __end_of_Init_System 0389                  __end_of_LED_Drive 0524  
                       _ReheatCook 088C                 __size_of_Cook_Task 004B  
          __end_of_Init_LED_Module 03AE                  ?_Heat_Time_Select 005A  
                           _ADCON0 001F                             _ADCON1 009F  
              ??_KeepWarmTimeStart 005A               __end_of_KeepWarmHeat 0819  
                           _ADRESH 001E                             _ADRESL 009E  
                           _CCPR0L 001B                         _b_AdBot_OK 038F  
                 ___awdiv@dividend 005C                             _LEDADD 0192  
                           _LCDCON 0114            __size_of_Test_Mode_Show 0188  
                           _GODONE 00F9                 ??_Heat_Time_Select 005B  
               __size_of_Key_Drive 004D                             i1l2103 015A  
                           i1l2113 0175                             i1l2105 0167  
                           i1l2116 0181              __end_of_Get_Temp_Data 05A4  
                           i1l6850 0071                             _INTCON 000B  
                           _SEGEN0 0196                             _SEGEN1 0195  
                           _SEGEN2 0194                 __size_of_Init_GPIO 0016  
                           _OSCCON 008F                 __size_of_Init_TMR1 000C  
                           _PWM0EN 00E8                             _TMR1IE 0460  
                           _TMR1IF 0060                             _TMR2IF 0061  
                           _TMR2ON 0092                             _Ad_Bot 004F  
                           _Ad_Lid 00BD                             _PWMCON 001D  
                           _Cancel 0D77                             _Get_AD 0078  
                      ?_Get_AC_Rms 0073                          ??_KscanIo 005A  
            __size_of_Factory_Show 01C3                             _BuzCnt 0057  
                 ??_Maink_Fast_Fun 005A                             _MinBuf 0037  
                      ?_BotHeatOff 0073                         _Timer1_Isr 002C  
                           _b_Zero 0390                             ___wmul 1736  
                        ??___awdiv 005E          __end_of_KeepWarmTimeStart 05DA  
                        ??___lbdiv 005B                          ??___awmod 005E  
                        ??___lbmod 005B                     ?_WorkTimeStart 0073  
                        ??___lwdiv 005E                          ??___lwmod 005E  
                 ___awdiv@quotient 0060                    ___awmod@divisor 005A  
             __end_of_Maink_Cancel 0D77                 __size_of_Time_Deal 001C  
                  ___awmod@counter 005E                        _BuzDownTemp 0053  
                      _BuzDownTime 0055                 __size_of_ShortTime 0010  
                           saved_w 007E                      ??_ShortTimeOn 005A  
       __end_of_Relay_Duty_Control 0F50                Get_Zero@s_zerotimes 00B0  
             __end_of_AutoStartFun 0BBB                         _b_TestShow 0383  
                     _HeatCnt500ms 0045                   ___lbdiv@dividend 005B  
                     _Factory_Show 153C                         _Sound_Deal 05DA  
                      ?_Maink_Test 0073                    ___lbmod@divisor 005A  
                ?_StandbyTimeStart 0073            __end_of__initialization 0028  
                  ___lbmod@counter 005D              __size_of_Get_Lid_Data 0034  
                __end_of_BotHeatOn 0B70                          ?_LED_Task 0073  
                Key_Drive@keycount 00C3                 ??_StandbyTimeStart 005A  
                DIG_Show_Time@hour 0061                  __end_of_Cook_Task 088C  
                   __pcstackCOMMON 0073                         _Vrms_Level 0069  
                     __pidataBANK0 0000                     _Work_Mode_Show 13F9  
                  __p_Fc_ID_1_text 1FF8                    __p_Fc_ID_2_text 1FF9  
                      ?_Error_Deal 0073                    __p_Fc_ID_3_text 1FFA  
                  __p_Fc_ID_4_text 1FFB                    __p_Fc_ID_5_text 1FFC  
                     _LedCol_500ms 00CB              __end_of_DIG_Show_Data 1329  
                  __p_Fc_ID_6_text 1FFD                    __p_Fc_ID_7_text 1FFE  
                      ?_Error_Show 0073                    __p_Fc_ID_8_text 1FFF  
            __end_of_DIG_Show_Time 1792                        _Init_System 0363  
                __end_of_Key_Drive 02CE                         __end_ofPL2 0F90  
                       __end_ofPL4 0363                         __end_ofPL6 1799  
                       __end_ofPL8 0F9A                   ___lbdiv@quotient 005D  
                __end_of_Init_GPIO 039F                  __end_of_Init_TMR1 03C7  
__size_of_Get_Pressure_Switch_Data 002C                          ?_CakeHeat 0073  
        ?_Get_Pressure_Switch_Data 0073                     _ErrorTimeStart 0EEB  
                      ?_ReheatCook 0073                __size_of_Get_AC_Rms 008B  
                        ?_DelayXms 005A                        _JudgeLidCnt 00C8  
                      _JudgeLidMin 002F                   ?_Init_LED_Module 0073  
              __size_of_BotHeatOff 0005                       _Get_Lid_Data 0FA1  
                  _Fc_ID_1_absaddr 1FF8                          ?_Get_Zero 0073  
                  _Fc_ID_2_absaddr 1FF9                         __pbssBANK0 0020  
                       __pbssBANK1 00A0                    _Fc_ID_3_absaddr 1FFA  
            __end_of_Power_On_Show 0278                          ?_Key_Task 0073  
                   _ErrorSoundTime 00BF                          ?_Init_PWM 0073  
                  _Fc_ID_4_absaddr 1FFB                 _HorseShowTime160ms 00CC  
              __end_of_ShortTimeOn 0B67                          ?_Init_Var 0073  
                __end_of_Time_Deal 0B8C                    _Fc_ID_5_absaddr 1FFC  
                       ??_LED_Task 0067                          ?_RiceHeat 0073  
                          ?_Cancel 0073                            ?_Get_AD 0073  
                  _Fc_ID_6_absaddr 1FFD                          ?_OpenCook 0073  
                __end_of_ShortTime 0F60                    _Fc_ID_7_absaddr 1FFE  
           __end_of_Work_Mode_Show 153C                        ?_Timer1_Isr 0073  
                  _Fc_ID_8_absaddr 1FFF                         __pmaintext 0468  
                  ??_WorkTimeStart 005A                   ??_Get_AC_Voltage 0073  
                 _Operate_Relay_IO 0148                            ?___wmul 005A  
       __size_of_KeepWarmTimeStart 0036            Error_Deal@E3_delaycount 00AC  
                       __pintentry 0004               Get_AC_Rms@s_voltimes 004B  
            __size_of_MainK_Preset 0047             __end_of_ErrorTimeStart 0F02  
                       ??_CakeHeat 005C                     Get_AD@adresult 0074  
              __size_of_Maink_Test 0035                            _LCDCON0 0190  
                          _LCDCON1 0191                            _T2CKPS0 0090  
                          _T2CKPS1 0091                            _LEDDATA 0193  
                          i1l14008 0144                            i1l14140 0176  
                          i1l14064 0099                            i1l14144 015E  
                          i1l14136 0156                            i1l14182 017E  
                          i1l14168 0171                            i1l14176 0178  
         Get_AC_Voltage@s_volcount 00B4                            i1l14636 0048  
                          i1l14664 006F                            i1l14648 0059  
                          i1l13890 00BE                            i1l13866 00E6  
                          i1l14658 0067                            i1l13868 00EA  
                          i1l13886 00B8                            i1l13982 0124  
                          i1l13992 0132                            i1l13968 0113  
            __size_of_KeepWarmHeat 0019                            _LED_Off 0260  
                          Get_AD@i 0076                         ??_DelayXms 005C  
Get_Pressure_Switch_Data@s_pscount 00B6                         ??_Get_Zero 0073  
                          _Fc_ID_1 1FF8                            _Fc_ID_2 1FF9  
                          _Fc_ID_3 1FFA                            _Fc_ID_4 1FFB  
                          _Fc_ID_5 1FFC                            _Fc_ID_6 1FFD  
                          _Fc_ID_7 1FFE                            _Fc_ID_8 1FFF  
                   _Test_Mode_Show 118D                         __stringtab 1800  
                      ?_Sound_Deal 0073                __size_of_Error_Deal 0080  
                       ??_Key_Task 005B                __size_of_Error_Show 001E  
                       ??_Init_PWM 005A                         ??_Init_Var 005A  
                     ?_FactoryTest 0073                            _KeyData 0027  
                       ??_RiceHeat 005C                            _KeyFlag 002D  
         __size_of_PresetTimeStart 004C                    __size_of_Cancel 0024  
                       ??_OpenCook 005C                            _KscanIo 02CE  
                          _HourBuf 0038                    __size_of_Get_AD 0033  
                     _MainK_Preset 0D15                    ?_Work_Mode_Show 0073  
              __size_of_ReheatCook 0051              __size_of_Maink_Cancel 001B  
                          ___awdiv 1353                            ___lbdiv 171B  
                      _b_BotHeatEn 038E                            ___awmod 1398  
                      _b_BotHeatOn 038D                            ___lbmod 16FF  
                  __size_of___wmul 0019                       _KeepWarmHeat 0800  
                          ___lwdiv 1329                            ___lwmod 13D5  
                          __ptext1 0B70                            __ptext2 0FDB  
                          __ptext3 0F60                            __ptext4 0F50  
                          __ptext5 0F02                            __ptext6 108D  
                          __ptext7 05A4                            __ptext8 0EEB  
                          __ptext9 0BBB                    ?_ErrorTimeStart 0073  
                    ?_PressureHeat 0073                        _b_LidClosed 0397  
            __size_of_AutoStartFun 002F                        _PresetTimeH 0036  
                      _PresetTimeM 0035                        _PresetTimeS 002C  
                      _PresetState 0039                     _b_MainLoop_8ms 0381  
                 ___awmod@dividend 005C                       _MainTime_8ms 00C1  
           __end_of_Test_Mode_Show 1315                        _ShortTimeOn 0B63  
            __end_of_Maink_Factory 0E7C                __size_of_Timer1_Isr 004C  
                      _b_Auto_test 038B                     _b_AutoKeepWarm 0384  
                          clrloop0 0600                          _LED_Drive 04E2  
             end_of_initialization 0028                          DelayXms@i 005C  
                        DelayXms@x 005A                       _Maink_Cancel 0D5C  
           Get_Temp_Data@s_adtimes 00CF                       ??_Get_AC_Rms 0061  
                     ??_BotHeatOff 005A               Get_Zero@s_zerocnt9ms 004A  
        __size_of_Heat_Time_Select 0018        __size_of_CountDownTimeStart 004C  
             __end_of_REF_TEMP_TAB 1908                       _AutoStartFun 0B8C  
                     __pstringtext 1800           __size_of_Fun_Choose_Show 00B4  
                _PressureCountTime 00C6                __size_of_Sound_Deal 0025  
                   ??_PressureHeat 005C              __end_of_Keepwarm_Show 0260  
             __end_of_SEG_MATH_TAB 1988                   ___lbmod@dividend 005C  
                  _Ad_Pressure_Raw 0052                 __end_of_Get_AC_Rms 108D  
                  ?_Test_Mode_Show 0073                 __end_of_BotHeatOff 0B6C  
                       ?_LED_Drive 0073                       ??_Maink_Test 005A  
                      ___lbmod@rem 005E                 Key_Drive@nkeycount 00C2  
               DIG_Show_Time@point 0060   __end_of_Get_Pressure_Switch_Data 00FD  
               _Relay_Duty_Control 0F02                     __end_of_Cancel 0D9B  
                __size_of_LED_Task 0063                     __end_of_Get_AD 00AB  
                        _BotHeatOn 0B6C                          _ChooseFun 003C  
                     ??_Error_Deal 005A                  ??_PresetTimeStart 0062  
                     ??_Error_Show 005F                ?_Relay_Duty_Control 0073  
                     ?_Init_System 0073                     __end_of___wmul 174F  
                        _Cook_Task 0841          __size_of_StandbyTimeStart 0028  
                        _KeepWarmH 002B                          _KeepWarmM 00C5  
                        _KeepWarmS 00C4             __size_of_Get_Temp_Data 0057  
          __size_of_Set_Addr_Value 0029                 __end_of_Maink_Test 0EEB  
                        _BuzUpTemp 0054                          _BuzUpTime 0056  
                     ??_ReheatCook 005C                          _Key_Drive 0281  
                __size_of_CakeHeat 0075                        __end_ofPL10 0FA1  
                      __end_ofPL20 17D1                        __end_ofPL12 17B8  
                      __end_ofPL30 0281                        __end_ofPL22 17D7  
                      __end_ofPL14 0FDB                        __end_ofPL32 17F4  
                      __end_ofPL24 17DF                        __end_ofPL16 17BF  
                      __end_ofPL34 17FA                        __end_ofPL26 17E7  
                      __end_ofPL18 17C5                        __end_ofPL36 1800  
                      __end_ofPL28 17EE                start_initialization 000F  
                        _Init_GPIO 0389                          _Init_TMR1 03BB  
                        _ErrorCode 0058           __end_of_Operate_Relay_IO 0183  
                        _RelOffCnt 0046             Get_Lid_Data@s_lidcount 004D  
                __size_of_DelayXms 0018               ??_Relay_Duty_Control 005A  
                __size_of_Get_Zero 004B                 __end_of_Error_Deal 0468  
               __end_of_Error_Show 0204                           ??_Cancel 005A  
                __size_of_Key_Task 010E                           ??_Get_AD 0073  
                __size_of_Init_PWM 000D                  __size_of_Init_Var 0009  
             __size_of_FactoryTest 0028                          _TasteCase 00BE  
                        _WaitCycle 0029                       ??_Timer1_Isr 0077  
                        _Time_Deal 0B70                  __size_of_RiceHeat 00D3  
                       ?_BotHeatOn 0073                  __size_of_OpenCook 0067  
               __end_of_ReheatCook 08DD                           ??___wmul 005E  
                        _ShortCntL 0044                          _ShortCntM 0043  
                        _ShortTime 0F50                        __pdataBANK0 006B  
                       ?_Cook_Task 0073                          _b_RelType 0388  
          __size_of_Maink_Fast_Fun 003A                 Set_Addr_Value@addr 005B  
               Set_Addr_Value@data 005C                          _b_ShortOn 038C  
               Set_Addr_Value@mask 005A                          _b_Standby 0396  
                        _ZeroDeley 003B                          _b_Zero_EN 0393  
                         ?_LED_Off 0073                         ?_Key_Drive 0073  
                ??_Fun_Choose_Show 0062                       _LongKeyCount 00CA  
                 Key_Drive@keylong 00A8                        __pbssCOMMON 0079  
                       ?_Init_GPIO 0073                          ___latbits 0002  
                    _ChooseFunSave 007B                         ?_Init_TMR1 0073  
                    __pcstackBANK0 005A                          _WorkTimeH 002E  
                        _WorkTimeM 003D                          _WorkTimeS 0034  
                        _WorkStage 003F                          _SysStatus 006A  
                         LED_Off@i 005A                 __end_of_Timer1_Isr 0078  
                      ??_LED_Drive 005D                       ??_Sound_Deal 005A  
           __size_of_DIG_Show_Data 0014             __size_of_DIG_Show_Time 0043  
                 ??_Work_Mode_Show 0062                      _Get_Temp_Data 054D  
             __end_of_PressureHeat 0A78           __size_of_Init_LED_Module 000F  
                        __pnvBANK0 0067                           ?_KscanIo 0073  
                       ?_Time_Deal 0073                   ___lwdiv@dividend 005C  
                 _Heat_Time_Select 0B4B                   ??_ErrorTimeStart 005A  
                         ?___awdiv 005A                           ?___lbdiv 005A  
                         ?___awmod 005A                           ?___lbmod 005A  
         _Get_Pressure_Switch_Data 00D1                         ?_ShortTime 0073  
            __end_of_WorkTimeStart 1000                           ?___lwdiv 005A  
                   Power_On_Show@i 005A                           ?___lwmod 005A  
                   _StandbyTimeCnt 0059             __size_of_Power_On_Show 000C  
               __end_of_Sound_Deal 05FF                   _b_MainLoop_500ms 0380  
                     ?_ShortTimeOn 0073                   ___lwdiv@quotient 005E  
                     _REF_TEMP_TAB 1812                     ?_Get_Temp_Data 0073  
                   _MainTime_500ms 00C9                __end_of_HOT_RUN_TAB 1978  
                interrupt_function 0004                     ___wmul@product 005E  
                         _LED_Task 0183                           Get_AD@ch 0075  
                        clear_ram0 05FF                      _Led_Step_100C 00CD  
                     _SEG_MATH_TAB 1978                        ??_BotHeatOn 005A  
                         _TIME_TAB 1908                        ??_Cook_Task 005C  
                    _DIG_Show_Data 1315                   _StandbyTimeStart 0F60  
                    _DIG_Show_Time 174F                     _Set_Addr_Value 0524  
                         _CakeHeat 08DD                        __stringbase 1812  
                 ??_Test_Mode_Show 0063                  ___wmul@multiplier 005A  
             __size_of_Init_System 0026                        ??_Key_Drive 005F  
                      ??_Init_GPIO 005A            __size_of_Get_AC_Voltage 0026  
                      ??_Init_TMR1 005A                           _DelayXms 03D0  
                 __size_of_LED_Off 000C                           KscanIo@i 005E  
                         _DispData 0020                           _Bot_Temp 004E  
                         _Get_Zero 00FD                      ?_Factory_Show 0073  
                         _Key_Task 0C07                           _Init_PWM 03AE  
                         _Init_Var 03C7                      _Power_On_Show 026C  
                  _PresetTimeStart 108D                           _RelOnCnt 00CE  
                         _RiceHeat 0A78                           _OpenCook 0952  
       __end_of_CountDownTimeStart 0C07                           _SendShow 0030  
                      ??_Time_Deal 0063              Heat_Time_Select@offtm 005A  
                 __size_of_KscanIo 0084                           _b_LedCol 0385  
                         _TestShow 0031                  ??_Init_LED_Module 005A  
           __size_of_Maink_Factory 00E1                        ??_ShortTime 005A  
           __end_of_Set_Addr_Value 054D                     ?_DIG_Show_Data 005F  
                   ?_DIG_Show_Time 005F                   __size_of___awdiv 0045  
                 __size_of___lbdiv 001B                   __size_of___awmod 003D  
                 __size_of___lbmod 001C                    Key_Drive@keyold 00AA  
                 __size_of___lwdiv 002A                   __size_of___lwmod 0024  
                   _Maink_Fast_Fun 0E7C                           _WorkStep 0042  
               __end_of__stringtab 1812                       _b_BotTempOut 038A  
                    ?_Get_Lid_Data 0073                    ___lwdiv@divisor 005A  
                      _HOT_RUN_TAB 1944                    ___lwdiv@counter 0060  
                         __ptext10 0B8C                           __ptext11 05DA  
                         __ptext20 0260                           __ptext12 0183  
                         __ptext21 0204                           __ptext13 13F9  
                         __ptext30 04E2                           __ptext22 10D9  
                         __ptext14 1736                           __ptext31 0524  
                         __ptext23 1398                           __ptext15 0278  
                         __ptext40 0363                           __ptext32 0C07  
                         __ptext24 1353                           __ptext16 118D  
                         __ptext41 03C7                           __ptext33 0EB6  
                         __ptext25 174F                           __ptext17 13D5  
                         __ptext50 1329                           __ptext42 03BB  
                         __ptext34 0E7C                           __ptext26 153C  
                         __ptext18 1315                           __ptext51 03E8  
                         __ptext43 03AE                           __ptext35 0D9B  
                         __ptext27 171B                           __ptext19 026C  
                         __ptext60 08DD                           __ptext52 0841  
                         __ptext44 039F                           __ptext36 0D5C  
                         __ptext28 01E6                     ??_Factory_Show 005F  
                         __ptext61 0B63                           __ptext53 0A78  
                         __ptext45 0389                           __ptext37 0D15  
                         __ptext29 16FF                           __ptext70 00AB  
                         __ptext62 0B4B                           __ptext54 088C  
                         __ptext46 03D0                           __ptext38 0281  
                         __ptext63 0B6C                           __ptext55 09B9  
                         __ptext47 054D                           __ptext39 02CE  
                         __ptext64 0B67                           __ptext56 0D77  
                         __ptext48 0FA1                           __ptext65 002C  
                         __ptext57 0952                           __ptext49 1002  
                         __ptext66 0148                           __ptext58 0800  
                         __ptext67 00FD                           __ptext59 0819  
                         __ptext68 00D1                           __ptext69 0078  
                  ??_Get_Temp_Data 005A              __size_of_PressureHeat 00BF  
                ?_Operate_Relay_IO 0073                         _AC_Vol_Rms 0067  
                   ?_Power_On_Show 0073                 ??_Operate_Relay_IO 0073  
                    __size_of_main 007A             __size_of_Keepwarm_Show 005C  
                    _MainTime_10ms 00C0                    _Fun_Choose_Show 10D9  
           __end_of_Maink_Fast_Fun 0EB6                    ?_Set_Addr_Value 005A  
                    _b_Opencook_OK 0389                       _PressureData 00C7  
                     _PressureHeat 09B9                     ??_Get_Lid_Data 005A  
             Heat_Time_Select@ontm 005B                       _b_JudgeLidOk 0382  
         __end_of_Heat_Time_Select 0B63            __end_of_PresetTimeStart 10D9  
                     _b_Rel_NoZero 0387              DIG_Show_Data@digdata1 0062  
                    _Maink_Factory 0D9B              DIG_Show_Data@digdata2 005F  
            DIG_Show_Data@digdata3 0060              DIG_Show_Data@digdata4 0061  
             __size_of_ShortTimeOn 0004        __size_of_Relay_Duty_Control 004E  
                         intlevel1 0000                   ___lwmod@dividend 005C  
                    ??_FactoryTest 005A         ??_Get_Pressure_Switch_Data 0073  
                    ?_MainK_Preset 0073                          stringcode 180A  
                _Waiting_Mode_Show 0278                    ??_DIG_Show_Data 0062  
                  ??_DIG_Show_Time 0061                    _FactoryTestData 0041  
                    _CountDownTime 0040                      ?_KeepWarmHeat 0073  
               ?_Waiting_Mode_Show 0073                    ?_Maink_Fast_Fun 0073  
                    _TotalTimeSave 003E                         _OPTION_REG 0081  
                    _Keepwarm_Show 0204                ??_Waiting_Mode_Show 005A  
                   _Get_AC_Voltage 00AB                    ___lwmod@divisor 005A  
                  ___lwmod@counter 005E                       _b_VolData_OK 0394  
                         stringtab 1800                         _Ad_Bot_Raw 0050  
                      _Ad_Pressure 00BC                     ?_Maink_Factory 0073  
                     _b_PressureOn 0395                    ??_Power_On_Show 005A  
         __end_of_StandbyTimeStart 0F88                      ?_Maink_Cancel 0073  
                       _Ad_Vol_Avg 0051                         _Ad_Vol_Raw 007C  
                       _Ad_Vol_Sum 00BA                     _b_ZeroDeley_OK 0386  
          __end_of_Fun_Choose_Show 118D                     ??_MainK_Preset 005A  
        __end_of_Waiting_Mode_Show 027A  
